var tipuesearch = {"pages":[{"title":" PE Fortran ","text":"PE Fortran Developer Info Han Tang A Nanook studying and living in Fairbanks","tags":"home","loc":"index.html"},{"title":"euler_multiprecision_util_m.f90 – PE Fortran","text":"Files dependent on this one sourcefile~~euler_multiprecision_util_m.f90~~AfferentGraph sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 sourcefile~prob_0013_m.f90 prob_0013_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0055_m.f90 prob_0055_m.f90 sourcefile~prob_0055_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0057_m.f90 prob_0057_m.f90 sourcefile~prob_0057_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0063_m.f90 prob_0063_m.f90 sourcefile~prob_0063_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0056_m.f90 prob_0056_m.f90 sourcefile~prob_0056_m.f90->sourcefile~euler_multiprecision_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_multiprecision_util_m Source Code euler_multiprecision_util_m.f90 Source Code module euler_multiprecision_util_m implicit none private public :: add , sub , compare , mul , pow2 contains function cut_leading_zeros ( arr ) result ( ret ) !! The core function to cut leading zeros of a contiguous array. !! !! As the name of the function suggests, the function !! deletes all the leading zeros of a contiguous array. !! This procedure uses the intrinsic function `findloc` !! that is only available with gfortran > 9.0.0 integer , contiguous , intent ( in ) :: arr (:) integer , allocatable :: ret (:) ret = arr ( findloc ( arr == 0 , value = . false ., dim = 1 ):) end function cut_leading_zeros function carry ( arr ) result ( ret ) !! The core function to carry digits during add and multiplication. !! !! Each element of the input array is an 32bit integer greater than or !! equal to zero and less than or equal to nine. integer , contiguous , intent ( in ) :: arr (:) integer , dimension ( size ( arr ) + 2 ) :: tmp1 , tmp2 , ret tmp1 = 0 ; tmp2 = 0 ; ret ( 1 : 2 ) = 0 ; ret ( 3 :) = arr (:) do if ( all ( ret <= 9 )) exit tmp1 (:) = ret (:) - ret (:) / 10 * 10 tmp2 ( 1 : size ( tmp2 ) - 1 ) = ret ( 2 :) / 10 ret (:) = tmp1 (:) + tmp2 (:) end do end function carry function add ( arr1 , arr2 ) result ( ret ) !! The core function to provide the ability of addition. !! !! Each element of the input array is an 32bit integer greater than or !! equal to zero and less than or equal to nine. When two such arrays !! are \"added\", first of all, the shorter array will be extended to the !! length of the longer array and two arrays with the same dimension !! are added. Then the function `carry` !! \"[carries](https://en.wikipedia.org/wiki/Carry_(arithmetic))\" the !! added array iteratively until all elements of the array are greater !! than or equal to zero and less than or equal to nine. Finally, the !! leading zeros are deleted by `cut_leading_zeros`. integer , contiguous , intent ( in ) :: arr1 (:), arr2 (:) integer , allocatable , dimension (:) :: ret , tmp1 , tmp2 associate ( x => max ( size ( arr1 ), size ( arr2 )) + 1 ) allocate ( tmp1 ( x ), tmp2 ( x )) tmp1 = 0 ; tmp1 ( x - size ( arr1 ) + 1 : x ) = arr1 (:) tmp2 = 0 ; tmp2 ( x - size ( arr2 ) + 1 : x ) = arr2 (:) end associate ret = cut_leading_zeros ( carry ( tmp1 + tmp2 )) end function add function sub ( arr1 , arr2 ) result ( ret ) !! The core function to provide the ability of subtraction. !! !! Each element of the input array is an 32bit integer greater than or !! equal to zero and less than or equal to nine. integer , contiguous , intent ( in ) :: arr1 (:), arr2 (:) integer , allocatable , dimension (:) :: ret , tmp1 , tmp2 , tmp integer :: i associate ( x => max ( size ( arr1 ), size ( arr2 )) + 1 ) allocate ( tmp1 ( x ), tmp2 ( x ), tmp ( x )) tmp1 = 0 ; tmp2 = 0 ; tmp = 0 tmp1 ( x - size ( arr1 ) + 1 : x ) = arr1 (:) tmp2 ( x - size ( arr2 ) + 1 : x ) = arr2 (:) end associate do i = size ( tmp1 ), 2 , - 1 if ( tmp1 ( i ) >= tmp2 ( i )) then tmp ( i ) = tmp1 ( i ) - tmp2 ( i ) else tmp ( i ) = tmp1 ( i ) - tmp2 ( i ) + 10 tmp1 ( i - 1 ) = tmp1 ( i - 1 ) - 1 end if end do ret = cut_leading_zeros ( tmp ) end function sub function compare ( arr1 , arr2 ) result ( ret ) !! The core function to provide the ability of comparison. !! !! 1. `ret = 1`: arr1 > arr2 !! 2. `ret = 0`: arr1 = arr2 !! 3. `ret = -1`: arr1 < arr2 integer , contiguous , intent ( in ) :: arr1 (:), arr2 (:) integer :: ret , i if ( size ( arr1 ) > size ( arr2 )) then ret = 1 ; return else if ( size ( arr1 ) < size ( arr2 )) then ret = - 1 ; return end if do i = size ( arr1 ), 1 , - 1 if ( arr1 ( i ) > arr2 ( i )) then ret = 1 ; return else if ( arr1 ( i ) < arr2 ( i )) then ret = - 1 ; return else ret = 0 end if end do if ( ret /= 0 ) error stop 'compare: invalid output.' end function compare function mul ( arr1 , arr2 ) result ( ret ) !! The core function to provide the ability of multiplication. !! !! Each element of the input array is an 32bit integer greater than or !! equal to zero and less than or equal to nine. integer , contiguous , intent ( in ) :: arr1 (:), arr2 (:) integer , allocatable :: tmp (:), tmp_row (:), ret (:) integer :: i associate ( s1 => size ( arr1 ), s2 => size ( arr2 )) allocate ( tmp_row ( s1 + s2 ), tmp ( s1 + s2 + 2 )) tmp = 0 do i = s2 , 1 , - 1 tmp_row = 0 ; tmp_row ( i + 1 : i + s1 ) = arr1 tmp = tmp + carry ( tmp_row * arr2 ( i )) end do end associate ret = cut_leading_zeros ( carry ( tmp )) end function mul recursive function pow2 ( arr , n ) result ( ret ) !! The core function to provide the ability of power. !! !! Each element of the input array is an 32bit integer greater than or !! equal to zero and less than or equal to nine. The function uses !! a very simple implementation of exponentiation !! ([wiki links](https://en.wikipedia.org/wiki/ !!Exponentiation_by_squaring)). The function currently doesn't !! support negative powers. integer , contiguous , intent ( in ) :: arr (:) integer , intent ( in ) :: n integer , allocatable :: ret (:) if ( n < 0 ) error stop 'pow2: n is nonnegative.' if ( n == 0 ) then ret = [ 1 ] else if ( n == 1 ) then ret = arr else if ( mod ( n , 2 ) == 0 ) then ret = pow2 ( mul ( arr , arr ), n / 2 ) else if ( mod ( n , 2 ) /= 0 ) then ret = pow2 ( mul ( arr , arr ), ( n - 1 ) / 2 ) ret = mul ( arr , ret ) end if end function pow2 end module euler_multiprecision_util_m","tags":"","loc":"sourcefile/euler_multiprecision_util_m.f90.html"},{"title":"euler_interface_m.f90 – PE Fortran","text":"This file depends on sourcefile~~euler_interface_m.f90~~EfferentGraph sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~euler_interface_m.f90~~AfferentGraph sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0019_m.f90 prob_0019_m.f90 sourcefile~prob_0019_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0030_m.f90 prob_0030_m.f90 sourcefile~prob_0030_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0045_m.f90 prob_0045_m.f90 sourcefile~prob_0045_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0038_m.f90 prob_0038_m.f90 sourcefile~prob_0038_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0062_m.f90 prob_0062_m.f90 sourcefile~prob_0062_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0010_m.f90 prob_0010_m.f90 sourcefile~prob_0010_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0007_m.f90 prob_0007_m.f90 sourcefile~prob_0007_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0014_m.f90 prob_0014_m.f90 sourcefile~prob_0014_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0057_m.f90 prob_0057_m.f90 sourcefile~prob_0057_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0012_m.f90 prob_0012_m.f90 sourcefile~prob_0012_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0024_m.f90 prob_0024_m.f90 sourcefile~prob_0024_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0059_m.f90 prob_0059_m.f90 sourcefile~prob_0059_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0026_m.f90 prob_0026_m.f90 sourcefile~prob_0026_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0036_m.f90 prob_0036_m.f90 sourcefile~prob_0036_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0020_m.f90 prob_0020_m.f90 sourcefile~prob_0020_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0051_m.f90 prob_0051_m.f90 sourcefile~prob_0051_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0040_m.f90 prob_0040_m.f90 sourcefile~prob_0040_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0027_m.f90 prob_0027_m.f90 sourcefile~prob_0027_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0006_m.f90 prob_0006_m.f90 sourcefile~prob_0006_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0004_m.f90 prob_0004_m.f90 sourcefile~prob_0004_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0001_m.f90 prob_0001_m.f90 sourcefile~prob_0001_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0055_m.f90 prob_0055_m.f90 sourcefile~prob_0055_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0005_m.f90 prob_0005_m.f90 sourcefile~prob_0005_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0034_m.f90 prob_0034_m.f90 sourcefile~prob_0034_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0063_m.f90 prob_0063_m.f90 sourcefile~prob_0063_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0002_m.f90 prob_0002_m.f90 sourcefile~prob_0002_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0052_m.f90 prob_0052_m.f90 sourcefile~prob_0052_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0050_m.f90 prob_0050_m.f90 sourcefile~prob_0050_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0037_m.f90 prob_0037_m.f90 sourcefile~prob_0037_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0035_m.f90 prob_0035_m.f90 sourcefile~prob_0035_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0008_m.f90 prob_0008_m.f90 sourcefile~prob_0008_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0032_m.f90 prob_0032_m.f90 sourcefile~prob_0032_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0025_m.f90 prob_0025_m.f90 sourcefile~prob_0025_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0047_m.f90 prob_0047_m.f90 sourcefile~prob_0047_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0021_m.f90 prob_0021_m.f90 sourcefile~prob_0021_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0042_m.f90 prob_0042_m.f90 sourcefile~prob_0042_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0018_m.f90 prob_0018_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0015_m.f90 prob_0015_m.f90 sourcefile~prob_0015_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0054_m.f90 prob_0054_m.f90 sourcefile~prob_0054_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0043_m.f90 prob_0043_m.f90 sourcefile~prob_0043_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0003_m.f90 prob_0003_m.f90 sourcefile~prob_0003_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0056_m.f90 prob_0056_m.f90 sourcefile~prob_0056_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0061_m.f90 prob_0061_m.f90 sourcefile~prob_0061_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0053_m.f90 prob_0053_m.f90 sourcefile~prob_0053_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0022_m.f90 prob_0022_m.f90 sourcefile~prob_0022_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0058_m.f90 prob_0058_m.f90 sourcefile~prob_0058_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0029_m.f90 prob_0029_m.f90 sourcefile~prob_0029_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0013_m.f90 prob_0013_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0039_m.f90 prob_0039_m.f90 sourcefile~prob_0039_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0046_m.f90 prob_0046_m.f90 sourcefile~prob_0046_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0011_m.f90 prob_0011_m.f90 sourcefile~prob_0011_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0033_m.f90 prob_0033_m.f90 sourcefile~prob_0033_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0009_m.f90 prob_0009_m.f90 sourcefile~prob_0009_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0048_m.f90 prob_0048_m.f90 sourcefile~prob_0048_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0016_m.f90 prob_0016_m.f90 sourcefile~prob_0016_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0060_m.f90 prob_0060_m.f90 sourcefile~prob_0060_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0028_m.f90 prob_0028_m.f90 sourcefile~prob_0028_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0049_m.f90 prob_0049_m.f90 sourcefile~prob_0049_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0031_m.f90 prob_0031_m.f90 sourcefile~prob_0031_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0017_m.f90 prob_0017_m.f90 sourcefile~prob_0017_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_prob_api_m.f90 euler_prob_api_m.f90 sourcefile~euler_prob_api_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0023_m.f90 prob_0023_m.f90 sourcefile~prob_0023_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0041_m.f90 prob_0041_m.f90 sourcefile~prob_0041_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0044_m.f90 prob_0044_m.f90 sourcefile~prob_0044_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_main_m.f90 euler_main_m.f90 sourcefile~euler_main_m.f90->sourcefile~euler_prob_api_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_interface_m Source Code euler_interface_m.f90 Source Code module euler_interface_m use iso_fortran_env , only : int64 use euler_utils_m implicit none interface module character ( len = 20 ) function euler0001 () end function euler0001 module character ( len = 20 ) function euler0002 () end function euler0002 module character ( len = 20 ) function euler0003 () end function euler0003 module character ( len = 20 ) function euler0004 () end function euler0004 module character ( len = 20 ) function euler0005 () end function euler0005 module character ( len = 20 ) function euler0006 () end function euler0006 module character ( len = 20 ) function euler0007 () end function euler0007 module character ( len = 20 ) function euler0008 () end function euler0008 module character ( len = 20 ) function euler0009 () end function euler0009 module character ( len = 20 ) function euler0010 () end function euler0010 module character ( len = 20 ) function euler0011 () end function euler0011 module character ( len = 20 ) function euler0012 () end function euler0012 module character ( len = 20 ) function euler0013 () end function euler0013 module character ( len = 20 ) function euler0014 () end function euler0014 module character ( len = 20 ) function euler0015 () end function euler0015 module character ( len = 20 ) function euler0016 () end function euler0016 module character ( len = 20 ) function euler0017 () end function euler0017 module character ( len = 20 ) function euler0018 () end function euler0018 module character ( len = 20 ) function euler0019 () end function euler0019 module character ( len = 20 ) function euler0020 () end function euler0020 module character ( len = 20 ) function euler0021 () end function euler0021 module character ( len = 20 ) function euler0022 () end function euler0022 module character ( len = 20 ) function euler0023 () end function euler0023 module character ( len = 20 ) function euler0024 () end function euler0024 module character ( len = 20 ) function euler0025 () end function euler0025 module character ( len = 20 ) function euler0026 () end function euler0026 module character ( len = 20 ) function euler0027 () end function euler0027 module character ( len = 20 ) function euler0028 () end function euler0028 module character ( len = 20 ) function euler0029 () end function euler0029 module character ( len = 20 ) function euler0030 () end function euler0030 module character ( len = 20 ) function euler0031 () end function euler0031 module character ( len = 20 ) function euler0032 () end function euler0032 module character ( len = 20 ) function euler0033 () end function euler0033 module character ( len = 20 ) function euler0034 () end function euler0034 module character ( len = 20 ) function euler0035 () end function euler0035 module character ( len = 20 ) function euler0036 () end function euler0036 module character ( len = 20 ) function euler0037 () end function euler0037 module character ( len = 20 ) function euler0038 () end function euler0038 module character ( len = 20 ) function euler0039 () end function euler0039 module character ( len = 20 ) function euler0040 () end function euler0040 module character ( len = 20 ) function euler0041 () end function euler0041 module character ( len = 20 ) function euler0042 () end function euler0042 module character ( len = 20 ) function euler0043 () end function euler0043 module character ( len = 20 ) function euler0044 () end function euler0044 module character ( len = 20 ) function euler0045 () end function euler0045 module character ( len = 20 ) function euler0046 () end function euler0046 module character ( len = 20 ) function euler0047 () end function euler0047 module character ( len = 20 ) function euler0048 () end function euler0048 module character ( len = 20 ) function euler0049 () end function euler0049 module character ( len = 20 ) function euler0050 () end function euler0050 module character ( len = 20 ) function euler0051 () end function euler0051 module character ( len = 20 ) function euler0052 () end function euler0052 module character ( len = 20 ) function euler0053 () end function euler0053 module character ( len = 20 ) function euler0054 () end function euler0054 module character ( len = 20 ) function euler0055 () end function euler0055 module character ( len = 20 ) function euler0056 () end function euler0056 module character ( len = 20 ) function euler0057 () end function euler0057 module character ( len = 20 ) function euler0058 () end function euler0058 module character ( len = 20 ) function euler0059 () end function euler0059 module character ( len = 20 ) function euler0060 () end function euler0060 module character ( len = 20 ) function euler0061 () end function euler0061 module character ( len = 20 ) function euler0062 () end function euler0062 module character ( len = 20 ) function euler0063 () end function euler0063 end interface end module euler_interface_m","tags":"","loc":"sourcefile/euler_interface_m.f90.html"},{"title":"euler_primes_m.f90 – PE Fortran","text":"This file depends on sourcefile~~euler_primes_m.f90~~EfferentGraph sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~euler_primes_m.f90~~AfferentGraph sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0058_m.f90 prob_0058_m.f90 sourcefile~prob_0058_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0051_m.f90 prob_0051_m.f90 sourcefile~prob_0051_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0037_m.f90 prob_0037_m.f90 sourcefile~prob_0037_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0046_m.f90 prob_0046_m.f90 sourcefile~prob_0046_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0035_m.f90 prob_0035_m.f90 sourcefile~prob_0035_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0060_m.f90 prob_0060_m.f90 sourcefile~prob_0060_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0010_m.f90 prob_0010_m.f90 sourcefile~prob_0010_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0049_m.f90 prob_0049_m.f90 sourcefile~prob_0049_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0007_m.f90 prob_0007_m.f90 sourcefile~prob_0007_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0003_m.f90 prob_0003_m.f90 sourcefile~prob_0003_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0026_m.f90 prob_0026_m.f90 sourcefile~prob_0026_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0041_m.f90 prob_0041_m.f90 sourcefile~prob_0041_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0050_m.f90 prob_0050_m.f90 sourcefile~prob_0050_m.f90->sourcefile~euler_primes_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_primes_m Source Code euler_primes_m.f90 Source Code module euler_primes_m use iso_fortran_env , only : int64 use euler_utils_m , only : sp , dp implicit none private public :: is_prime interface is_prime module procedure is_prime_int32 , is_prime_int64 end interface is_prime public :: sieve_of_Eratosthenes interface sieve_of_Eratosthenes module procedure sieve_of_Eratosthenes_int32 module procedure sieve_of_Eratosthenes_int64 end interface sieve_of_Eratosthenes contains logical function is_prime_int32 ( n ) integer , intent ( in ) :: n integer :: limit , i is_prime_int32 = . false . limit = int ( sqrt ( real ( n , sp )) + 1 ) if ( n <= 1 ) then is_prime_int32 = . false . else if ( n <= 3 ) then is_prime_int32 = . true . else if ( mod ( n , 2 ) == 0 ) then is_prime_int32 = . false . else loop_1 : do i = 3 , limit , 2 if ( mod ( n , i ) == 0 ) then is_prime_int32 = . false . exit loop_1 else is_prime_int32 = . true . end if end do loop_1 end if end function is_prime_int32 logical function is_prime_int64 ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: limit , i is_prime_int64 = . false . limit = int ( sqrt ( real ( n , sp )) + 1_int64 ) if ( n <= 1_int64 ) then is_prime_int64 = . false . else if ( n <= 3_int64 ) then is_prime_int64 = . true . else if ( mod ( n , 2_int64 ) == 0_int64 ) then is_prime_int64 = . false . else loop_1 : do i = 3_int64 , limit , 2_int64 if ( mod ( n , i ) == 0_int64 ) then is_prime_int64 = . false . exit loop_1 else is_prime_int64 = . true . end if end do loop_1 end if end function is_prime_int64 subroutine sieve_of_Eratosthenes_int32 ( n , prime_arr ) integer , intent ( in ) :: n logical , allocatable , dimension (:) :: prime_arr integer :: i , j allocate ( prime_arr ( 0 : n )) prime_arr = . true . prime_arr ( 0 : 1 ) = . false . do i = 2 , floor ( sqrt ( real ( n , dp ))) if ( prime_arr ( i )) then j = i * i do while ( j <= n ) prime_arr ( j ) = . false . j = j + i end do end if end do end subroutine sieve_of_Eratosthenes_int32 subroutine sieve_of_Eratosthenes_int64 ( n , prime_arr ) integer ( int64 ), intent ( in ) :: n logical , allocatable , dimension (:) :: prime_arr integer ( int64 ) :: i , j allocate ( prime_arr ( 0 : n )) prime_arr = . true . prime_arr ( 0 : 1 ) = . false . do i = 2_int64 , floor ( sqrt ( real ( n , dp )), int64 ) if ( prime_arr ( i )) then j = i * i do while ( j <= n ) prime_arr ( j ) = . false . j = j + i end do end if end do end subroutine sieve_of_Eratosthenes_int64 end module euler_primes_m","tags":"","loc":"sourcefile/euler_primes_m.f90.html"},{"title":"euler_utils_m.f90 – PE Fortran","text":"Files dependent on this one sourcefile~~euler_utils_m.f90~~AfferentGraph sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 sourcefile~prob_0019_m.f90 prob_0019_m.f90 sourcefile~prob_0019_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0030_m.f90 prob_0030_m.f90 sourcefile~prob_0030_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0045_m.f90 prob_0045_m.f90 sourcefile~prob_0045_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0038_m.f90 prob_0038_m.f90 sourcefile~prob_0038_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0062_m.f90 prob_0062_m.f90 sourcefile~prob_0062_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0010_m.f90 prob_0010_m.f90 sourcefile~prob_0010_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0010_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0007_m.f90 prob_0007_m.f90 sourcefile~prob_0007_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0007_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0014_m.f90 prob_0014_m.f90 sourcefile~prob_0014_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0057_m.f90 prob_0057_m.f90 sourcefile~prob_0057_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0012_m.f90 prob_0012_m.f90 sourcefile~prob_0012_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0024_m.f90 prob_0024_m.f90 sourcefile~prob_0024_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0059_m.f90 prob_0059_m.f90 sourcefile~prob_0059_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0026_m.f90 prob_0026_m.f90 sourcefile~prob_0026_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0026_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0036_m.f90 prob_0036_m.f90 sourcefile~prob_0036_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0020_m.f90 prob_0020_m.f90 sourcefile~prob_0020_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0051_m.f90 prob_0051_m.f90 sourcefile~prob_0051_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0051_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0040_m.f90 prob_0040_m.f90 sourcefile~prob_0040_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0027_m.f90 prob_0027_m.f90 sourcefile~prob_0027_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0006_m.f90 prob_0006_m.f90 sourcefile~prob_0006_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0004_m.f90 prob_0004_m.f90 sourcefile~prob_0004_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0001_m.f90 prob_0001_m.f90 sourcefile~prob_0001_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0055_m.f90 prob_0055_m.f90 sourcefile~prob_0055_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0005_m.f90 prob_0005_m.f90 sourcefile~prob_0005_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0034_m.f90 prob_0034_m.f90 sourcefile~prob_0034_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0063_m.f90 prob_0063_m.f90 sourcefile~prob_0063_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0002_m.f90 prob_0002_m.f90 sourcefile~prob_0002_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0052_m.f90 prob_0052_m.f90 sourcefile~prob_0052_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0050_m.f90 prob_0050_m.f90 sourcefile~prob_0050_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0050_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0037_m.f90 prob_0037_m.f90 sourcefile~prob_0037_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0037_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0035_m.f90 prob_0035_m.f90 sourcefile~prob_0035_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0035_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0008_m.f90 prob_0008_m.f90 sourcefile~prob_0008_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0032_m.f90 prob_0032_m.f90 sourcefile~prob_0032_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0025_m.f90 prob_0025_m.f90 sourcefile~prob_0025_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0047_m.f90 prob_0047_m.f90 sourcefile~prob_0047_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0021_m.f90 prob_0021_m.f90 sourcefile~prob_0021_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0042_m.f90 prob_0042_m.f90 sourcefile~prob_0042_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0018_m.f90 prob_0018_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0015_m.f90 prob_0015_m.f90 sourcefile~prob_0015_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0054_m.f90 prob_0054_m.f90 sourcefile~prob_0054_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0043_m.f90 prob_0043_m.f90 sourcefile~prob_0043_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0003_m.f90 prob_0003_m.f90 sourcefile~prob_0003_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0003_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0056_m.f90 prob_0056_m.f90 sourcefile~prob_0056_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0061_m.f90 prob_0061_m.f90 sourcefile~prob_0061_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0053_m.f90 prob_0053_m.f90 sourcefile~prob_0053_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0022_m.f90 prob_0022_m.f90 sourcefile~prob_0022_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0058_m.f90 prob_0058_m.f90 sourcefile~prob_0058_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0058_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0029_m.f90 prob_0029_m.f90 sourcefile~prob_0029_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0013_m.f90 prob_0013_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0039_m.f90 prob_0039_m.f90 sourcefile~prob_0039_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0046_m.f90 prob_0046_m.f90 sourcefile~prob_0046_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0046_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0011_m.f90 prob_0011_m.f90 sourcefile~prob_0011_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0033_m.f90 prob_0033_m.f90 sourcefile~prob_0033_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0009_m.f90 prob_0009_m.f90 sourcefile~prob_0009_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0048_m.f90 prob_0048_m.f90 sourcefile~prob_0048_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0016_m.f90 prob_0016_m.f90 sourcefile~prob_0016_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0060_m.f90 prob_0060_m.f90 sourcefile~prob_0060_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0060_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0028_m.f90 prob_0028_m.f90 sourcefile~prob_0028_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0049_m.f90 prob_0049_m.f90 sourcefile~prob_0049_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0049_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0031_m.f90 prob_0031_m.f90 sourcefile~prob_0031_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0017_m.f90 prob_0017_m.f90 sourcefile~prob_0017_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_prob_api_m.f90 euler_prob_api_m.f90 sourcefile~euler_prob_api_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0023_m.f90 prob_0023_m.f90 sourcefile~prob_0023_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0041_m.f90 prob_0041_m.f90 sourcefile~prob_0041_m.f90->sourcefile~euler_interface_m.f90 sourcefile~prob_0041_m.f90->sourcefile~euler_primes_m.f90 sourcefile~prob_0044_m.f90 prob_0044_m.f90 sourcefile~prob_0044_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_main_m.f90 euler_main_m.f90 sourcefile~euler_main_m.f90->sourcefile~euler_prob_api_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_utils_m Source Code euler_utils_m.f90 Source Code module euler_utils_m use iso_fortran_env , only : int64 , real32 , real64 implicit none private integer , parameter , public :: sp = real32 , dp = real64 real ( sp ), parameter , public :: tiny_sp = tiny ( 0._sp ) real ( dp ), parameter , public :: tiny_dp = tiny ( 0._dp ) public :: unit_digit , swap , digs_of_int , is_pandigital public :: fibonacci , reverse , is_palindromic , gcd , lcm , factorial public :: int_2_arr , arr_2_int , append , next_permutation !> A generic interface that returns the unit digit of an integer. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, unit_digit(324) ! 4 !>    print *, unit_digit(543212345_int64) ! 5 !>end program main !>``` interface unit_digit module procedure unit_digit_int32 module procedure unit_digit_int64 end interface unit_digit !> A generic interface that swap two elements (the two elements !> have to be the same type. When swapping two character types, !> the two character variables must have the same length.). !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer :: a, b !>    a = 32; b = 23 !>    print *, a, b ! 32, 23 !>    call swap(a, b) !>    print *, a, b ! 23, 32 !>end program main !>``` interface swap module procedure swap_sp , swap_dp module procedure swap_int32 , swap_int64 module procedure swap_equal_len_char end interface swap !> A generic interface that returns the length of an integer. !> !>### Usage !>```fortran !>program main !>    user euler_utils_m !>    implicit none !> !>    print *, digs_of_int(12345) ! 5 !>    print *, digs_of_int(1234567890_int64) ! 10 !>end program main !>``` interface digs_of_int module procedure digs_of_int_int32 module procedure digs_of_int_int64 end interface digs_of_int !> A generic interface that returns the n<sup>th</sup> fibonacci number. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, fibonacci(12) ! 144 !>    print *, fibonacci(12_int64) ! 144 !>end program main !>``` interface fibonacci module procedure fib32 , fib64 end interface fibonacci !> A generic interface that reverse the digits of an integer. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, reverse(12345) ! 54321 !>    print *, reverse(12345_int64) ! 54321 !>end program main !>``` interface reverse module procedure reverse_int32 , reverse_int64 end interface reverse !> A generic interface that tells if an integer is a palindromic integer. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer :: a = 123454321, b = 1234 !>    print *, is_palindromic(a) ! T !>    print *, is_palindromic(b) ! F !>end program main !>``` interface is_palindromic module procedure is_palindromic_int32 module procedure is_palindromic_int64 end interface is_palindromic !> Greatest common divisor. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, gcd(32, 24) ! 8 !>    print *, gcd(32_int64, 24_int64) ! 8 !>end program main !>``` interface gcd module procedure gcd_int32 , gcd_int64 end interface gcd !> Least common multiple. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, lcm(3, 4) ! 12 !>    print *, lcm(3_int64, 4_int64) ! 12 !>end program main !>``` interface lcm module procedure lcm_int32 , lcm_int64 end interface lcm !> Factorial. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, factorial(4) ! 24 !>    print *, factorial(4_int64) ! 24 !>end program main !>``` interface factorial module procedure factorial_int32 module procedure factorial_int64 end interface factorial !> To judge whether an integer is a pandigital number. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    print *, is_pandigital(1023456789) ! T !>end program main !>``` interface is_pandigital module procedure is_pandigital_int32 module procedure is_pandigital_int64 end interface is_pandigital !> Convert integer to an integer array. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer :: a = 234 !>    integer, allocatable :: arr(:) !> !>    call int_2_arr(a, arr) !>    print *, arr ! [2, 3, 4] !>end program main !>``` interface int_2_arr module procedure int_2_arr_int32 module procedure int_2_arr_int64 end interface int_2_arr !> Convert an integer arr to an integer. !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer :: arr(3) = [2, 3, 4] !>    integer :: a !> !>    call arr_2_int(arr, a) !>    print *, a ! 234 !>end program main !>``` interface arr_2_int module procedure arr_2_int_int32 module procedure arr_2_int_int64 end interface arr_2_int !> Append an element to the end of an array !> !>### Usage !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer, allocatable :: arr(:) !> !>    arr = [1, 2, 3] !>    call append(arr, 4) !>    print *, arr ! [1, 2, 3, 4] !>end program main !>``` interface append module procedure append_sp , append_dp module procedure append_int32 , append_int64 end interface append !> An interface of variant permutation functions !> !>### `next_permutation_int32/int64` (k-permutation of n) !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer :: k, n !>    integer, dimesion(2) :: arr !>    logical :: next_permutation_available !> !>    k = 2; n = 3 !>    arr = [1, 2] !>    next_permutation_available = .true. !> !>    do while (next_permutation_available) !>        print *, arr !>        next_permutation_available = permutation(k, n, arr) !>    end do !>    ! Output: (1, 2), (1, 3), and (2, 3). !>end program main !>``` !> !>### `next_permutation2_int32` permutation !>```fortran !>program main !>    use euler_utils_m !>    implicit none !> !>    integer :: arr(3) !>    logical :: next_permutation_available !> !>    arr = [1, 2, 3] !>    next_permutation_available = .true. !> !>    do while (next_permutation_available) !>        print *, arr !>        next_permutation_available = permutation(arr) !>    end do !>    ! Output: (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), !>    ! (3, 1, 2), and (3, 2, 1). !>end program main !>``` interface next_permutation module procedure next_permutation_int32 module procedure next_permutation_int64 module procedure next_permutation2_int32 end interface next_permutation contains pure integer function unit_digit_int32 ( n ) integer , intent ( in ) :: n unit_digit_int32 = mod ( n , 10 ) end function unit_digit_int32 pure integer ( int64 ) function unit_digit_int64 ( n ) integer ( int64 ), intent ( in ) :: n unit_digit_int64 = mod ( n , 10_int64 ) end function unit_digit_int64 pure subroutine swap_sp ( a , b ) real ( sp ), intent ( inout ) :: a , b real ( sp ) :: tmp tmp = a ; a = b ; b = tmp end subroutine swap_sp pure subroutine swap_dp ( a , b ) real ( dp ), intent ( inout ) :: a , b real ( dp ) :: tmp tmp = a ; a = b ; b = tmp end subroutine swap_dp pure subroutine swap_int32 ( a , b ) integer , intent ( inout ) :: a , b integer :: tmp tmp = a ; a = b ; b = tmp end subroutine swap_int32 pure subroutine swap_int64 ( a , b ) integer ( int64 ), intent ( inout ) :: a , b integer ( int64 ) :: tmp tmp = a ; a = b ; b = tmp end subroutine swap_int64 pure subroutine swap_equal_len_char ( a , b ) character ( len =* ), intent ( inout ) :: a character ( len = len ( a )), intent ( inout ) :: b character ( len = len ( a )) :: tmp tmp = a a = b b = tmp end subroutine swap_equal_len_char pure integer function digs_of_int_int32 ( n ) integer , intent ( in ) :: n digs_of_int_int32 = floor ( log10 ( real ( n , sp ))) + 1 end function digs_of_int_int32 pure integer ( int64 ) function digs_of_int_int64 ( n ) integer ( int64 ), intent ( in ) :: n digs_of_int_int64 = floor ( log10 ( real ( n , sp ))) + 1_int64 end function digs_of_int_int64 pure recursive function fib32 ( n ) result ( ans ) integer , intent ( in ) :: n integer :: k , ans if ( n < 0 . or . n > 92 ) then error stop \"fib32: Invalid input number.\" end if if ( n == 0 ) then ans = 0 else if ( n == 1 . or . n == 2 ) then ans = 1 else if ( mod ( n , 2 ) == 0 ) then k = n / 2 ans = fib32 ( k ) * ( fib32 ( k + 1 ) * 2 - fib32 ( k )) else k = ( n - 1 ) / 2 ans = fib32 ( k + 1 ) ** 2 + fib32 ( k ) ** 2 end if end function fib32 pure recursive function fib64 ( n ) result ( ans ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: k , ans if ( n < 0_int64 . or . n > 92_int64 ) then error stop \"fib64: Invalid input number.\" end if if ( n == 0_int64 ) then ans = 0_int64 else if ( n == 1_int64 . or . n == 2_int64 ) then ans = 1_int64 else if ( mod ( n , 2_int64 ) == 0_int64 ) then k = n / 2_int64 ans = fib64 ( k ) * ( fib64 ( k + 1_int64 ) * 2_int64 - fib64 ( k )) else k = ( n - 1_int64 ) / 2_int64 ans = fib64 ( k + 1_int64 ) ** 2_int64 + fib64 ( k ) ** 2_int64 end if end function fib64 pure integer function reverse_int32 ( n ) integer , intent ( in ) :: n integer :: reversed , tmp reversed = 0 ; tmp = n do while ( tmp > 0 ) reversed = reversed * 10 + mod ( tmp , 10 ) tmp = tmp / 10 end do reverse_int32 = reversed end function reverse_int32 pure integer ( int64 ) function reverse_int64 ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: reversed , tmp reversed = 0_int64 ; tmp = n do while ( tmp > 0_int64 ) reversed = reversed * 10_int64 + mod ( tmp , 10_int64 ) tmp = tmp / 10_int64 end do reverse_int64 = reversed end function reverse_int64 pure logical function is_palindromic_int32 ( n ) integer , intent ( in ) :: n is_palindromic_int32 = . false . if ( n == reverse_int32 ( n )) then is_palindromic_int32 = . true . end if end function is_palindromic_int32 pure logical function is_palindromic_int64 ( n ) integer ( int64 ), intent ( in ) :: n is_palindromic_int64 = . false . if ( n == reverse_int64 ( n )) then is_palindromic_int64 = . true . end if end function is_palindromic_int64 pure recursive function gcd_int32 ( n1 , n2 ) result ( ans ) integer , intent ( in ) :: n1 , n2 integer :: ans if ( n2 == 0 ) then ans = n1 else ans = gcd_int32 ( n2 , mod ( n1 , n2 )) end if end function gcd_int32 pure recursive function gcd_int64 ( n1 , n2 ) result ( ans ) integer ( int64 ), intent ( in ) :: n1 , n2 integer ( int64 ) :: ans if ( n2 == 0_int64 ) then ans = n1 else ans = gcd_int64 ( n2 , mod ( n1 , n2 )) end if end function gcd_int64 pure integer function lcm_int32 ( n1 , n2 ) integer , intent ( in ) :: n1 , n2 lcm_int32 = n1 * n2 / gcd_int32 ( n1 , n2 ) end function lcm_int32 pure integer ( int64 ) function lcm_int64 ( n1 , n2 ) integer ( int64 ), intent ( in ) :: n1 , n2 lcm_int64 = n1 * n2 / gcd_int64 ( n1 , n2 ) end function lcm_int64 pure integer function factorial_int32 ( n ) integer , intent ( in ) :: n integer :: i , tmp if ( n >= 13 ) then error stop \"FACTORIAL_INT32: n >= 13.\" end if tmp = 1 do i = 1 , n tmp = tmp * i end do factorial_int32 = tmp end function factorial_int32 pure integer ( int64 ) function factorial_int64 ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: i , tmp if ( n >= 13_int64 ) then error stop \"FACTORIAL_INT32: n >= 13.\" end if tmp = 1_int64 do i = 1_int64 , n tmp = tmp * i end do factorial_int64 = tmp end function factorial_int64 pure logical function is_pandigital_int32 ( n , digs ) integer , intent ( in ) :: n integer , intent ( in ), optional :: digs integer :: tmp , j , l logical , allocatable :: logic_arr (:) if ( present ( digs )) then allocate ( logic_arr ( digs )) l = digs else l = 9 allocate ( logic_arr ( l )) end if is_pandigital_int32 = . false . logic_arr = . false . tmp = n do j = unit_digit_int32 ( tmp ) if ( j == 0 . or . j > l ) exit logic_arr ( j ) = . true . tmp = tmp / 10 end do if ( count ( logic_arr ) == l ) then is_pandigital_int32 = . true . else is_pandigital_int32 = . false . end if end function is_pandigital_int32 pure logical function is_pandigital_int64 ( n , digs ) integer ( int64 ), intent ( in ) :: n integer ( int64 ), intent ( in ), optional :: digs integer ( int64 ) :: tmp , j , l logical , allocatable :: logic_arr (:) if ( present ( digs )) then allocate ( logic_arr ( digs )) l = digs else l = 9_int64 allocate ( logic_arr ( l )) end if is_pandigital_int64 = . false . logic_arr = . false . tmp = n do j = unit_digit_int64 ( tmp ) if ( j == 0_int64 . or . j > l ) exit logic_arr ( j ) = . true . tmp = tmp / 10_int64 end do if ( count ( logic_arr ) == l ) then is_pandigital_int64 = . true . else is_pandigital_int64 = . false . end if end function is_pandigital_int64 pure subroutine int_2_arr_int32 ( n , arr ) integer , intent ( in ) :: n integer , allocatable , intent ( out ) :: arr (:) integer :: tmp , i , l tmp = n l = digs_of_int_int32 ( tmp ) if ( l == 1 ) then allocate ( arr ( 1 )) arr ( 1 ) = n return end if allocate ( arr ( l )) do i = l , 1 , - 1 arr ( i ) = unit_digit_int32 ( tmp ) tmp = tmp / 10 end do end subroutine int_2_arr_int32 pure subroutine int_2_arr_int64 ( n , arr ) integer ( int64 ), intent ( in ) :: n integer , allocatable , intent ( out ) :: arr (:) integer ( int64 ) :: tmp integer :: i , l tmp = n l = int ( digs_of_int_int64 ( tmp )) if ( l == 1 ) then allocate ( arr ( 1 )) arr ( 1 ) = int ( n ) return end if allocate ( arr ( l )) do i = l , 1 , - 1 arr ( i ) = int ( unit_digit_int64 ( tmp )) tmp = tmp / 10_int64 end do end subroutine int_2_arr_int64 pure subroutine arr_2_int_int32 ( arr , n ) integer , intent ( in ) :: arr (:) integer , intent ( out ) :: n integer :: i , tmp , l l = size ( arr , dim = 1 ) tmp = 0 do i = 1 , l tmp = tmp * 10 + arr ( i ) end do n = tmp end subroutine arr_2_int_int32 pure subroutine arr_2_int_int64 ( arr , n ) integer ( int64 ), intent ( in ) :: arr (:) integer ( int64 ), intent ( out ) :: n integer ( int64 ) :: i , tmp , l l = size ( arr , dim = 1 ) tmp = 0_int64 do i = 1_int64 , l tmp = tmp * 10_int64 + arr ( i ) end do n = tmp end subroutine arr_2_int_int64 pure subroutine append_sp ( arr , e ) real ( sp ), allocatable , intent ( inout ) :: arr (:) real ( sp ), intent ( in ) :: e if ( allocated ( arr )) then arr = [ arr , [ e ]] else arr = [ e ] end if end subroutine append_sp pure subroutine append_dp ( arr , e ) real ( dp ), allocatable , intent ( inout ) :: arr (:) real ( dp ), intent ( in ) :: e if ( allocated ( arr )) then arr = [ arr , [ e ]] else arr = [ e ] end if end subroutine append_dp pure subroutine append_int32 ( arr , e ) integer , allocatable , intent ( inout ) :: arr (:) integer , intent ( in ) :: e if ( allocated ( arr )) then arr = [ arr , [ e ]] else arr = [ e ] end if end subroutine append_int32 pure subroutine append_int64 ( arr , e ) integer ( int64 ), allocatable , intent ( inout ) :: arr (:) integer ( int64 ), intent ( in ) :: e if ( allocated ( arr )) then arr = [ arr , [ e ]] else arr = [ e ] end if end subroutine append_int64 function next_permutation_int32 ( k , n , idx ) result ( ret ) integer , intent ( in ) :: k , n integer , intent ( inout ) :: idx ( k ) logical :: ret , carr ( k ) integer :: i , x , end_arr ( k ) end_arr = [( i , i = n - k + 1 , n )] ret = . true . if ( all ( idx == end_arr )) then ret = . false . return end if carr = . true . label_carry : do i = k , 1 , - 1 if ( idx ( i ) == n - k + i ) carr ( i ) = . false . end do label_carry if ( all ( carr . eqv . . true .)) then idx ( k ) = idx ( k ) + 1 else x = findloc ( carr , value = . false ., dim = 1 ) - 1 idx ( x : k ) = [( idx ( x ) + i , i = 1 , k - x + 1 )] end if end function next_permutation_int32 function next_permutation_int64 ( k , n , idx ) result ( ret ) integer ( int64 ), intent ( in ) :: k , n integer ( int64 ), intent ( inout ) :: idx ( k ) logical :: ret , carr ( k ) integer ( int64 ) :: i , x , end_arr ( k ) end_arr = [( i , i = n - k + 1 , n )] ret = . true . if ( all ( idx == end_arr )) then ret = . false . return end if carr = . true . label_carry : do i = k , 1 , - 1 if ( idx ( i ) == n - k + i ) carr ( i ) = . false . end do label_carry if ( all ( carr . eqv . . true .)) then idx ( k ) = idx ( k ) + 1 else x = findloc ( carr , value = . false ., dim = 1 ) - 1 idx ( x : k ) = [( idx ( x ) + i , i = 1 , k - x + 1 )] end if end function next_permutation_int64 function next_permutation2_int32 ( arr ) result ( ret ) integer , intent ( inout ) :: arr (:) integer :: i , k , l logical :: ret k = 0 ; l = 0 do i = size ( arr ) - 1 , 1 , - 1 if ( arr ( i ) < arr ( i + 1 )) then k = i ret = . true . exit else ret = . false . end if end do do i = size ( arr ), 1 , - 1 if ( arr ( k ) < arr ( i )) then l = i ; exit end if end do call swap ( arr ( k ), arr ( l )) arr ( k + 1 : size ( arr )) = arr ( size ( arr ): k + 1 : - 1 ) end function next_permutation2_int32 end module euler_utils_m","tags":"","loc":"sourcefile/euler_utils_m.f90.html"},{"title":"euler_data_m.f90 – PE Fortran","text":"Files dependent on this one sourcefile~~euler_data_m.f90~~AfferentGraph sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0022_m.f90 prob_0022_m.f90 sourcefile~prob_0022_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0013_m.f90 prob_0013_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0011_m.f90 prob_0011_m.f90 sourcefile~prob_0011_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0042_m.f90 prob_0042_m.f90 sourcefile~prob_0042_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0008_m.f90 prob_0008_m.f90 sourcefile~prob_0008_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0018_m.f90 prob_0018_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0054_m.f90 prob_0054_m.f90 sourcefile~prob_0054_m.f90->sourcefile~euler_data_m.f90 sourcefile~prob_0059_m.f90 prob_0059_m.f90 sourcefile~prob_0059_m.f90->sourcefile~euler_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_data_m Source Code euler_data_m.f90 Source Code module euler_data_m implicit none contains subroutine get_euler_data_0008 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 50 ) :: & \"73167176531330624919225119674426574742355349194934\" , & \"96983520312774506326239578318016984801869478851843\" , & \"85861560789112949495459501737958331952853208805511\" , & \"12540698747158523863050715693290963295227443043557\" , & \"66896648950445244523161731856403098711121722383113\" , & \"62229893423380308135336276614282806444486645238749\" , & \"30358907296290491560440772390713810515859307960866\" , & \"70172427121883998797908792274921901699720888093776\" , & \"65727333001053367881220235421809751254540594752243\" , & \"52584907711670556013604839586446706324415722155397\" , & \"53697817977846174064955149290862569321978468622482\" , & \"83972241375657056057490261407972968652414535100474\" , & \"82166370484403199890008895243450658541227588666881\" , & \"16427171479924442928230863465674813919123162824586\" , & \"17866458359124566529476545682848912883142607690042\" , & \"24219022671055626321111109370544217506941658960408\" , & \"07198403850962455444362981230987879927244284909188\" , & \"84580156166097919133875499200524063689912560717606\" , & \"05886116467109405077541002256983155200055935729725\" , & \"71636269561882670428252483600823257530420752963450\" ] end subroutine get_euler_data_0008 subroutine get_euler_data_0011 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 59 ) :: & \"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\" , & \"49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\" , & \"81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\" , & \"52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\" , & \"22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\" , & \"24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\" , & \"32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\" , & \"67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\" , & \"24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\" , & \"21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\" , & \"78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\" , & \"16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\" , & \"86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\" , & \"19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\" , & \"04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\" , & \"88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\" , & \"04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\" , & \"20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\" , & \"20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\" , & \"01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\" ] end subroutine get_euler_data_0011 subroutine get_euler_data_0013 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 50 ) :: & \"37107287533902102798797998220837590246510135740250\" , & \"46376937677490009712648124896970078050417018260538\" , & \"74324986199524741059474233309513058123726617309629\" , & \"91942213363574161572522430563301811072406154908250\" , & \"23067588207539346171171980310421047513778063246676\" , & \"89261670696623633820136378418383684178734361726757\" , & \"28112879812849979408065481931592621691275889832738\" , & \"44274228917432520321923589422876796487670272189318\" , & \"47451445736001306439091167216856844588711603153276\" , & \"70386486105843025439939619828917593665686757934951\" , & \"62176457141856560629502157223196586755079324193331\" , & \"64906352462741904929101432445813822663347944758178\" , & \"92575867718337217661963751590579239728245598838407\" , & \"58203565325359399008402633568948830189458628227828\" , & \"80181199384826282014278194139940567587151170094390\" , & \"35398664372827112653829987240784473053190104293586\" , & \"86515506006295864861532075273371959191420517255829\" , & \"71693888707715466499115593487603532921714970056938\" , & \"54370070576826684624621495650076471787294438377604\" , & \"53282654108756828443191190634694037855217779295145\" , & \"36123272525000296071075082563815656710885258350721\" , & \"45876576172410976447339110607218265236877223636045\" , & \"17423706905851860660448207621209813287860733969412\" , & \"81142660418086830619328460811191061556940512689692\" , & \"51934325451728388641918047049293215058642563049483\" , & \"62467221648435076201727918039944693004732956340691\" , & \"15732444386908125794514089057706229429197107928209\" , & \"55037687525678773091862540744969844508330393682126\" , & \"18336384825330154686196124348767681297534375946515\" , & \"80386287592878490201521685554828717201219257766954\" , & \"78182833757993103614740356856449095527097864797581\" , & \"16726320100436897842553539920931837441497806860984\" , & \"48403098129077791799088218795327364475675590848030\" , & \"87086987551392711854517078544161852424320693150332\" , & \"59959406895756536782107074926966537676326235447210\" , & \"69793950679652694742597709739166693763042633987085\" , & \"41052684708299085211399427365734116182760315001271\" , & \"65378607361501080857009149939512557028198746004375\" , & \"35829035317434717326932123578154982629742552737307\" , & \"94953759765105305946966067683156574377167401875275\" , & \"88902802571733229619176668713819931811048770190271\" , & \"25267680276078003013678680992525463401061632866526\" , & \"36270218540497705585629946580636237993140746255962\" , & \"24074486908231174977792365466257246923322810917141\" , & \"91430288197103288597806669760892938638285025333403\" , & \"34413065578016127815921815005561868836468420090470\" , & \"23053081172816430487623791969842487255036638784583\" , & \"11487696932154902810424020138335124462181441773470\" , & \"63783299490636259666498587618221225225512486764533\" , & \"67720186971698544312419572409913959008952310058822\" , & \"95548255300263520781532296796249481641953868218774\" , & \"76085327132285723110424803456124867697064507995236\" , & \"37774242535411291684276865538926205024910326572967\" , & \"23701913275725675285653248258265463092207058596522\" , & \"29798860272258331913126375147341994889534765745501\" , & \"18495701454879288984856827726077713721403798879715\" , & \"38298203783031473527721580348144513491373226651381\" , & \"34829543829199918180278916522431027392251122869539\" , & \"40957953066405232632538044100059654939159879593635\" , & \"29746152185502371307642255121183693803580388584903\" , & \"41698116222072977186158236678424689157993532961922\" , & \"62467957194401269043877107275048102390895523597457\" , & \"23189706772547915061505504953922979530901129967519\" , & \"86188088225875314529584099251203829009407770775672\" , & \"11306739708304724483816533873502340845647058077308\" , & \"82959174767140363198008187129011875491310547126581\" , & \"97623331044818386269515456334926366572897563400500\" , & \"42846280183517070527831839425882145521227251250327\" , & \"55121603546981200581762165212827652751691296897789\" , & \"32238195734329339946437501907836945765883352399886\" , & \"75506164965184775180738168837861091527357929701337\" , & \"62177842752192623401942399639168044983993173312731\" , & \"32924185707147349566916674687634660915035914677504\" , & \"99518671430235219628894890102423325116913619626622\" , & \"73267460800591547471830798392868535206946944540724\" , & \"76841822524674417161514036427982273348055556214818\" , & \"97142617910342598647204516893989422179826088076852\" , & \"87783646182799346313767754307809363333018982642090\" , & \"10848802521674670883215120185883543223812876952786\" , & \"71329612474782464538636993009049310363619763878039\" , & \"62184073572399794223406235393808339651327408011116\" , & \"66627891981488087797941876876144230030984490851411\" , & \"60661826293682836764744779239180335110989069790714\" , & \"85786944089552990653640447425576083659976645795096\" , & \"66024396409905389607120198219976047599490197230297\" , & \"64913982680032973156037120041377903785566085089252\" , & \"16730939319872750275468906903707539413042652315011\" , & \"94809377245048795150954100921645863754710598436791\" , & \"78639167021187492431995700641917969777599028300699\" , & \"15368713711936614952811305876380278410754449733078\" , & \"40789923115535562561142322423255033685442488917353\" , & \"44889911501440648020369068063960672322193204149535\" , & \"41503128880339536053299340368006977710650566631954\" , & \"81234880673210146739058568557934581403627822703280\" , & \"82616570773948327592232845941706525094512325230608\" , & \"22918802058777319719839450180888072429661980811197\" , & \"77158542502016545090413245809786882778948721859617\" , & \"72107838435069186155435662884062257473692284509516\" , & \"20849603980134001723930671666823555245252804609722\" , & \"53503534226472524250874054075591789781264330331690\" ] end subroutine get_euler_data_0013 subroutine get_euler_data_0018 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 50 ) :: & \"75\" , & \"95 64\" , & \"17 47 82\" , & \"18 35 87 10\" , & \"20 04 82 47 65\" , & \"19 01 23 75 03 34\" , & \"88 02 77 73 07 63 67\" , & \"99 65 04 28 06 16 70 92\" , & \"41 41 26 56 83 40 80 70 33\" , & \"41 48 72 33 47 32 37 16 94 29\" , & \"53 71 44 65 25 43 91 52 97 51 14\" , & \"70 11 33 28 77 73 17 78 39 68 17 57\" , & \"91 71 52 38 17 14 91 43 58 50 27 29 48\" , & \"63 66 04 68 89 53 67 30 73 16 69 87 40 31\" , & \"04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\" ] end subroutine get_euler_data_0018 subroutine get_euler_data_0022 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 50 ) :: & \"MARY\" , & \"PATRICIA\" , & \"LINDA\" , & \"BARBARA\" , & \"ELIZABETH\" , & \"JENNIFER\" , & \"MARIA\" , & \"SUSAN\" , & \"MARGARET\" , & \"DOROTHY\" , & \"LISA\" , & \"NANCY\" , & \"KAREN\" , & \"BETTY\" , & \"HELEN\" , & \"SANDRA\" , & \"DONNA\" , & \"CAROL\" , & \"RUTH\" , & \"SHARON\" , & \"MICHELLE\" , & \"LAURA\" , & \"SARAH\" , & \"KIMBERLY\" , & \"DEBORAH\" , & \"JESSICA\" , & \"SHIRLEY\" , & \"CYNTHIA\" , & \"ANGELA\" , & \"MELISSA\" , & \"BRENDA\" , & \"AMY\" , & \"ANNA\" , & \"REBECCA\" , & \"VIRGINIA\" , & \"KATHLEEN\" , & \"PAMELA\" , & \"MARTHA\" , & \"DEBRA\" , & \"AMANDA\" , & \"STEPHANIE\" , & \"CAROLYN\" , & \"CHRISTINE\" , & \"MARIE\" , & \"JANET\" , & \"CATHERINE\" , & \"FRANCES\" , & \"ANN\" , & \"JOYCE\" , & \"DIANE\" , & \"ALICE\" , & \"JULIE\" , & \"HEATHER\" , & \"TERESA\" , & \"DORIS\" , & \"GLORIA\" , & \"EVELYN\" , & \"JEAN\" , & \"CHERYL\" , & \"MILDRED\" , & \"KATHERINE\" , & \"JOAN\" , & \"ASHLEY\" , & \"JUDITH\" , & \"ROSE\" , & \"JANICE\" , & \"KELLY\" , & \"NICOLE\" , & \"JUDY\" , & \"CHRISTINA\" , & \"KATHY\" , & \"THERESA\" , & \"BEVERLY\" , & \"DENISE\" , & \"TAMMY\" , & \"IRENE\" , & \"JANE\" , & \"LORI\" , & \"RACHEL\" , & \"MARILYN\" , & \"ANDREA\" , & \"KATHRYN\" , & \"LOUISE\" , & \"SARA\" , & \"ANNE\" , & \"JACQUELINE\" , & \"WANDA\" , & \"BONNIE\" , & \"JULIA\" , & \"RUBY\" , & \"LOIS\" , & \"TINA\" , & \"PHYLLIS\" , & \"NORMA\" , & \"PAULA\" , & \"DIANA\" , & \"ANNIE\" , & \"LILLIAN\" , & \"EMILY\" , & \"ROBIN\" , & \"PEGGY\" , & \"CRYSTAL\" , & \"GLADYS\" , & \"RITA\" , & \"DAWN\" , & \"CONNIE\" , & \"FLORENCE\" , & \"TRACY\" , & \"EDNA\" , & \"TIFFANY\" , & \"CARMEN\" , & \"ROSA\" , & \"CINDY\" , & \"GRACE\" , & \"WENDY\" , & \"VICTORIA\" , & \"EDITH\" , & \"KIM\" , & \"SHERRY\" , & \"SYLVIA\" , & \"JOSEPHINE\" , & \"THELMA\" , & \"SHANNON\" , & \"SHEILA\" , & \"ETHEL\" , & \"ELLEN\" , & \"ELAINE\" , & \"MARJORIE\" , & \"CARRIE\" , & \"CHARLOTTE\" , & \"MONICA\" , & \"ESTHER\" , & \"PAULINE\" , & \"EMMA\" , & \"JUANITA\" , & \"ANITA\" , & \"RHONDA\" , & \"HAZEL\" , & \"AMBER\" , & \"EVA\" , & \"DEBBIE\" , & \"APRIL\" , & \"LESLIE\" , & \"CLARA\" , & \"LUCILLE\" , & \"JAMIE\" , & \"JOANNE\" , & \"ELEANOR\" , & \"VALERIE\" , & \"DANIELLE\" , & \"MEGAN\" , & \"ALICIA\" , & \"SUZANNE\" , & \"MICHELE\" , & \"GAIL\" , & \"BERTHA\" , & \"DARLENE\" , & \"VERONICA\" , & \"JILL\" , & \"ERIN\" , & \"GERALDINE\" , & \"LAUREN\" , & \"CATHY\" , & \"JOANN\" , & \"LORRAINE\" , & \"LYNN\" , & \"SALLY\" , & \"REGINA\" , & \"ERICA\" , & \"BEATRICE\" , & \"DOLORES\" , & \"BERNICE\" , & \"AUDREY\" , & \"YVONNE\" , & \"ANNETTE\" , & \"JUNE\" , & \"SAMANTHA\" , & \"MARION\" , & \"DANA\" , & \"STACY\" , & \"ANA\" , & \"RENEE\" , & \"IDA\" , & \"VIVIAN\" , & \"ROBERTA\" , & \"HOLLY\" , & \"BRITTANY\" , & \"MELANIE\" , & \"LORETTA\" , & \"YOLANDA\" , & \"JEANETTE\" , & \"LAURIE\" , & \"KATIE\" , & \"KRISTEN\" , & \"VANESSA\" , & \"ALMA\" , & \"SUE\" , & \"ELSIE\" , & \"BETH\" , & \"JEANNE\" , & \"VICKI\" , & \"CARLA\" , & \"TARA\" , & \"ROSEMARY\" , & \"EILEEN\" , & \"TERRI\" , & \"GERTRUDE\" , & \"LUCY\" , & \"TONYA\" , & \"ELLA\" , & \"STACEY\" , & \"WILMA\" , & \"GINA\" , & \"KRISTIN\" , & \"JESSIE\" , & \"NATALIE\" , & \"AGNES\" , & \"VERA\" , & \"WILLIE\" , & \"CHARLENE\" , & \"BESSIE\" , & \"DELORES\" , & \"MELINDA\" , & \"PEARL\" , & \"ARLENE\" , & \"MAUREEN\" , & \"COLLEEN\" , & \"ALLISON\" , & \"TAMARA\" , & \"JOY\" , & \"GEORGIA\" , & \"CONSTANCE\" , & \"LILLIE\" , & \"CLAUDIA\" , & \"JACKIE\" , & \"MARCIA\" , & \"TANYA\" , & \"NELLIE\" , & \"MINNIE\" , & \"MARLENE\" , & \"HEIDI\" , & \"GLENDA\" , & \"LYDIA\" , & \"VIOLA\" , & \"COURTNEY\" , & \"MARIAN\" , & \"STELLA\" , & \"CAROLINE\" , & \"DORA\" , & \"JO\" , & \"VICKIE\" , & \"MATTIE\" , & \"TERRY\" , & \"MAXINE\" , & \"IRMA\" , & \"MABEL\" , & \"MARSHA\" , & \"MYRTLE\" , & \"LENA\" , & \"CHRISTY\" , & \"DEANNA\" , & \"PATSY\" , & \"HILDA\" , & \"GWENDOLYN\" , & \"JENNIE\" , & \"NORA\" , & \"MARGIE\" , & \"NINA\" , & \"CASSANDRA\" , & \"LEAH\" , & \"PENNY\" , & \"KAY\" , & \"PRISCILLA\" , & \"NAOMI\" , & \"CAROLE\" , & \"BRANDY\" , & \"OLGA\" , & \"BILLIE\" , & \"DIANNE\" , & \"TRACEY\" , & \"LEONA\" , & \"JENNY\" , & \"FELICIA\" , & \"SONIA\" , & \"MIRIAM\" , & \"VELMA\" , & \"BECKY\" , & \"BOBBIE\" , & \"VIOLET\" , & \"KRISTINA\" , & \"TONI\" , & \"MISTY\" , & \"MAE\" , & \"SHELLY\" , & \"DAISY\" , & \"RAMONA\" , & \"SHERRI\" , & \"ERIKA\" , & \"KATRINA\" , & \"CLAIRE\" , & \"LINDSEY\" , & \"LINDSAY\" , & \"GENEVA\" , & \"GUADALUPE\" , & \"BELINDA\" , & \"MARGARITA\" , & \"SHERYL\" , & \"CORA\" , & \"FAYE\" , & \"ADA\" , & \"NATASHA\" , & \"SABRINA\" , & \"ISABEL\" , & \"MARGUERITE\" , & \"HATTIE\" , & \"HARRIET\" , & \"MOLLY\" , & \"CECILIA\" , & \"KRISTI\" , & \"BRANDI\" , & \"BLANCHE\" , & \"SANDY\" , & \"ROSIE\" , & \"JOANNA\" , & \"IRIS\" , & \"EUNICE\" , & \"ANGIE\" , & \"INEZ\" , & \"LYNDA\" , & \"MADELINE\" , & \"AMELIA\" , & \"ALBERTA\" , & \"GENEVIEVE\" , & \"MONIQUE\" , & \"JODI\" , & \"JANIE\" , & \"MAGGIE\" , & \"KAYLA\" , & \"SONYA\" , & \"JAN\" , & \"LEE\" , & \"KRISTINE\" , & \"CANDACE\" , & \"FANNIE\" , & \"MARYANN\" , & \"OPAL\" , & \"ALISON\" , & \"YVETTE\" , & \"MELODY\" , & \"LUZ\" , & \"SUSIE\" , & \"OLIVIA\" , & \"FLORA\" , & \"SHELLEY\" , & \"KRISTY\" , & \"MAMIE\" , & \"LULA\" , & \"LOLA\" , & \"VERNA\" , & \"BEULAH\" , & \"ANTOINETTE\" , & \"CANDICE\" , & \"JUANA\" , & \"JEANNETTE\" , & \"PAM\" , & \"KELLI\" , & \"HANNAH\" , & \"WHITNEY\" , & \"BRIDGET\" , & \"KARLA\" , & \"CELIA\" , & \"LATOYA\" , & \"PATTY\" , & \"SHELIA\" , & \"GAYLE\" , & \"DELLA\" , & \"VICKY\" , & \"LYNNE\" , & \"SHERI\" , & \"MARIANNE\" , & \"KARA\" , & \"JACQUELYN\" , & \"ERMA\" , & \"BLANCA\" , & \"MYRA\" , & \"LETICIA\" , & \"PAT\" , & \"KRISTA\" , & \"ROXANNE\" , & \"ANGELICA\" , & \"JOHNNIE\" , & \"ROBYN\" , & \"FRANCIS\" , & \"ADRIENNE\" , & \"ROSALIE\" , & \"ALEXANDRA\" , & \"BROOKE\" , & \"BETHANY\" , & \"SADIE\" , & \"BERNADETTE\" , & \"TRACI\" , & \"JODY\" , & \"KENDRA\" , & \"JASMINE\" , & \"NICHOLE\" , & \"RACHAEL\" , & \"CHELSEA\" , & \"MABLE\" , & \"ERNESTINE\" , & \"MURIEL\" , & \"MARCELLA\" , & \"ELENA\" , & \"KRYSTAL\" , & \"ANGELINA\" , & \"NADINE\" , & \"KARI\" , & \"ESTELLE\" , & \"DIANNA\" , & \"PAULETTE\" , & \"LORA\" , & \"MONA\" , & \"DOREEN\" , & \"ROSEMARIE\" , & \"ANGEL\" , & \"DESIREE\" , & \"ANTONIA\" , & \"HOPE\" , & \"GINGER\" , & \"JANIS\" , & \"BETSY\" , & \"CHRISTIE\" , & \"FREDA\" , & \"MERCEDES\" , & \"MEREDITH\" , & \"LYNETTE\" , & \"TERI\" , & \"CRISTINA\" , & \"EULA\" , & \"LEIGH\" , & \"MEGHAN\" , & \"SOPHIA\" , & \"ELOISE\" , & \"ROCHELLE\" , & \"GRETCHEN\" , & \"CECELIA\" , & \"RAQUEL\" , & \"HENRIETTA\" , & \"ALYSSA\" , & \"JANA\" , & \"KELLEY\" , & \"GWEN\" , & \"KERRY\" , & \"JENNA\" , & \"TRICIA\" , & \"LAVERNE\" , & \"OLIVE\" , & \"ALEXIS\" , & \"TASHA\" , & \"SILVIA\" , & \"ELVIRA\" , & \"CASEY\" , & \"DELIA\" , & \"SOPHIE\" , & \"KATE\" , & \"PATTI\" , & \"LORENA\" , & \"KELLIE\" , & \"SONJA\" , & \"LILA\" , & \"LANA\" , & \"DARLA\" , & \"MAY\" , & \"MINDY\" , & \"ESSIE\" , & \"MANDY\" , & \"LORENE\" , & \"ELSA\" , & \"JOSEFINA\" , & \"JEANNIE\" , & \"MIRANDA\" , & \"DIXIE\" , & \"LUCIA\" , & \"MARTA\" , & \"FAITH\" , & \"LELA\" , & \"JOHANNA\" , & \"SHARI\" , & \"CAMILLE\" , & \"TAMI\" , & \"SHAWNA\" , & \"ELISA\" , & \"EBONY\" , & \"MELBA\" , & \"ORA\" , & \"NETTIE\" , & \"TABITHA\" , & \"OLLIE\" , & \"JAIME\" , & \"WINIFRED\" , & \"KRISTIE\" , & \"MARINA\" , & \"ALISHA\" , & \"AIMEE\" , & \"RENA\" , & \"MYRNA\" , & \"MARLA\" , & \"TAMMIE\" , & \"LATASHA\" , & \"BONITA\" , & \"PATRICE\" , & \"RONDA\" , & \"SHERRIE\" , & \"ADDIE\" , & \"FRANCINE\" , & \"DELORIS\" , & \"STACIE\" , & \"ADRIANA\" , & \"CHERI\" , & \"SHELBY\" , & \"ABIGAIL\" , & \"CELESTE\" , & \"JEWEL\" , & \"CARA\" , & \"ADELE\" , & \"REBEKAH\" , & \"LUCINDA\" , & \"DORTHY\" , & \"CHRIS\" , & \"EFFIE\" , & \"TRINA\" , & \"REBA\" , & \"SHAWN\" , & \"SALLIE\" , & \"AURORA\" , & \"LENORA\" , & \"ETTA\" , & \"LOTTIE\" , & \"KERRI\" , & \"TRISHA\" , & \"NIKKI\" , & \"ESTELLA\" , & \"FRANCISCA\" , & \"JOSIE\" , & \"TRACIE\" , & \"MARISSA\" , & \"KARIN\" , & \"BRITTNEY\" , & \"JANELLE\" , & \"LOURDES\" , & \"LAUREL\" , & \"HELENE\" , & \"FERN\" , & \"ELVA\" , & \"CORINNE\" , & \"KELSEY\" , & \"INA\" , & \"BETTIE\" , & \"ELISABETH\" , & \"AIDA\" , & \"CAITLIN\" , & \"INGRID\" , & \"IVA\" , & \"EUGENIA\" , & \"CHRISTA\" , & \"GOLDIE\" , & \"CASSIE\" , & \"MAUDE\" , & \"JENIFER\" , & \"THERESE\" , & \"FRANKIE\" , & \"DENA\" , & \"LORNA\" , & \"JANETTE\" , & \"LATONYA\" , & \"CANDY\" , & \"MORGAN\" , & \"CONSUELO\" , & \"TAMIKA\" , & \"ROSETTA\" , & \"DEBORA\" , & \"CHERIE\" , & \"POLLY\" , & \"DINA\" , & \"JEWELL\" , & \"FAY\" , & \"JILLIAN\" , & \"DOROTHEA\" , & \"NELL\" , & \"TRUDY\" , & \"ESPERANZA\" , & \"PATRICA\" , & \"KIMBERLEY\" , & \"SHANNA\" , & \"HELENA\" , & \"CAROLINA\" , & \"CLEO\" , & \"STEFANIE\" , & \"ROSARIO\" , & \"OLA\" , & \"JANINE\" , & \"MOLLIE\" , & \"LUPE\" , & \"ALISA\" , & \"LOU\" , & \"MARIBEL\" , & \"SUSANNE\" , & \"BETTE\" , & \"SUSANA\" , & \"ELISE\" , & \"CECILE\" , & \"ISABELLE\" , & \"LESLEY\" , & \"JOCELYN\" , & \"PAIGE\" , & \"JONI\" , & \"RACHELLE\" , & \"LEOLA\" , & \"DAPHNE\" , & \"ALTA\" , & \"ESTER\" , & \"PETRA\" , & \"GRACIELA\" , & \"IMOGENE\" , & \"JOLENE\" , & \"KEISHA\" , & \"LACEY\" , & \"GLENNA\" , & \"GABRIELA\" , & \"KERI\" , & \"URSULA\" , & \"LIZZIE\" , & \"KIRSTEN\" , & \"SHANA\" , & \"ADELINE\" , & \"MAYRA\" , & \"JAYNE\" , & \"JACLYN\" , & \"GRACIE\" , & \"SONDRA\" , & \"CARMELA\" , & \"MARISA\" , & \"ROSALIND\" , & \"CHARITY\" , & \"TONIA\" , & \"BEATRIZ\" , & \"MARISOL\" , & \"CLARICE\" , & \"JEANINE\" , & \"SHEENA\" , & \"ANGELINE\" , & \"FRIEDA\" , & \"LILY\" , & \"ROBBIE\" , & \"SHAUNA\" , & \"MILLIE\" , & \"CLAUDETTE\" , & \"CATHLEEN\" , & \"ANGELIA\" , & \"GABRIELLE\" , & \"AUTUMN\" , & \"KATHARINE\" , & \"SUMMER\" , & \"JODIE\" , & \"STACI\" , & \"LEA\" , & \"CHRISTI\" , & \"JIMMIE\" , & \"JUSTINE\" , & \"ELMA\" , & \"LUELLA\" , & \"MARGRET\" , & \"DOMINIQUE\" , & \"SOCORRO\" , & \"RENE\" , & \"MARTINA\" , & \"MARGO\" , & \"MAVIS\" , & \"CALLIE\" , & \"BOBBI\" , & \"MARITZA\" , & \"LUCILE\" , & \"LEANNE\" , & \"JEANNINE\" , & \"DEANA\" , & \"AILEEN\" , & \"LORIE\" , & \"LADONNA\" , & \"WILLA\" , & \"MANUELA\" , & \"GALE\" , & \"SELMA\" , & \"DOLLY\" , & \"SYBIL\" , & \"ABBY\" , & \"LARA\" , & \"DALE\" , & \"IVY\" , & \"DEE\" , & \"WINNIE\" , & \"MARCY\" , & \"LUISA\" , & \"JERI\" , & \"MAGDALENA\" , & \"OFELIA\" , & \"MEAGAN\" , & \"AUDRA\" , & \"MATILDA\" , & \"LEILA\" , & \"CORNELIA\" , & \"BIANCA\" , & \"SIMONE\" , & \"BETTYE\" , & \"RANDI\" , & \"VIRGIE\" , & \"LATISHA\" , & \"BARBRA\" , & \"GEORGINA\" , & \"ELIZA\" , & \"LEANN\" , & \"BRIDGETTE\" , & \"RHODA\" , & \"HALEY\" , & \"ADELA\" , & \"NOLA\" , & \"BERNADINE\" , & \"FLOSSIE\" , & \"ILA\" , & \"GRETA\" , & \"RUTHIE\" , & \"NELDA\" , & \"MINERVA\" , & \"LILLY\" , & \"TERRIE\" , & \"LETHA\" , & \"HILARY\" , & \"ESTELA\" , & \"VALARIE\" , & \"BRIANNA\" , & \"ROSALYN\" , & \"EARLINE\" , & \"CATALINA\" , & \"AVA\" , & \"MIA\" , & \"CLARISSA\" , & \"LIDIA\" , & \"CORRINE\" , & \"ALEXANDRIA\" , & \"CONCEPCION\" , & \"TIA\" , & \"SHARRON\" , & \"RAE\" , & \"DONA\" , & \"ERICKA\" , & \"JAMI\" , & \"ELNORA\" , & \"CHANDRA\" , & \"LENORE\" , & \"NEVA\" , & \"MARYLOU\" , & \"MELISA\" , & \"TABATHA\" , & \"SERENA\" , & \"AVIS\" , & \"ALLIE\" , & \"SOFIA\" , & \"JEANIE\" , & \"ODESSA\" , & \"NANNIE\" , & \"HARRIETT\" , & \"LORAINE\" , & \"PENELOPE\" , & \"MILAGROS\" , & \"EMILIA\" , & \"BENITA\" , & \"ALLYSON\" , & \"ASHLEE\" , & \"TANIA\" , & \"TOMMIE\" , & \"ESMERALDA\" , & \"KARINA\" , & \"EVE\" , & \"PEARLIE\" , & \"ZELMA\" , & \"MALINDA\" , & \"NOREEN\" , & \"TAMEKA\" , & \"SAUNDRA\" , & \"HILLARY\" , & \"AMIE\" , & \"ALTHEA\" , & \"ROSALINDA\" , & \"JORDAN\" , & \"LILIA\" , & \"ALANA\" , & \"GAY\" , & \"CLARE\" , & \"ALEJANDRA\" , & \"ELINOR\" , & \"MICHAEL\" , & \"LORRIE\" , & \"JERRI\" , & \"DARCY\" , & \"EARNESTINE\" , & \"CARMELLA\" , & \"TAYLOR\" , & \"NOEMI\" , & \"MARCIE\" , & \"LIZA\" , & \"ANNABELLE\" , & \"LOUISA\" , & \"EARLENE\" , & \"MALLORY\" , & \"CARLENE\" , & \"NITA\" , & \"SELENA\" , & \"TANISHA\" , & \"KATY\" , & \"JULIANNE\" , & \"JOHN\" , & \"LAKISHA\" , & \"EDWINA\" , & \"MARICELA\" , & \"MARGERY\" , & \"KENYA\" , & \"DOLLIE\" , & \"ROXIE\" , & \"ROSLYN\" , & \"KATHRINE\" , & \"NANETTE\" , & \"CHARMAINE\" , & \"LAVONNE\" , & \"ILENE\" , & \"KRIS\" , & \"TAMMI\" , & \"SUZETTE\" , & \"CORINE\" , & \"KAYE\" , & \"JERRY\" , & \"MERLE\" , & \"CHRYSTAL\" , & \"LINA\" , & \"DEANNE\" , & \"LILIAN\" , & \"JULIANA\" , & \"ALINE\" , & \"LUANN\" , & \"KASEY\" , & \"MARYANNE\" , & \"EVANGELINE\" , & \"COLETTE\" , & \"MELVA\" , & \"LAWANDA\" , & \"YESENIA\" , & \"NADIA\" , & \"MADGE\" , & \"KATHIE\" , & \"EDDIE\" , & \"OPHELIA\" , & \"VALERIA\" , & \"NONA\" , & \"MITZI\" , & \"MARI\" , & \"GEORGETTE\" , & \"CLAUDINE\" , & \"FRAN\" , & \"ALISSA\" , & \"ROSEANN\" , & \"LAKEISHA\" , & \"SUSANNA\" , & \"REVA\" , & \"DEIDRE\" , & \"CHASITY\" , & \"SHEREE\" , & \"CARLY\" , & \"JAMES\" , & \"ELVIA\" , & \"ALYCE\" , & \"DEIRDRE\" , & \"GENA\" , & \"BRIANA\" , & \"ARACELI\" , & \"KATELYN\" , & \"ROSANNE\" , & \"WENDI\" , & \"TESSA\" , & \"BERTA\" , & \"MARVA\" , & \"IMELDA\" , & \"MARIETTA\" , & \"MARCI\" , & \"LEONOR\" , & \"ARLINE\" , & \"SASHA\" , & \"MADELYN\" , & \"JANNA\" , & \"JULIETTE\" , & \"DEENA\" , & \"AURELIA\" , & \"JOSEFA\" , & \"AUGUSTA\" , & \"LILIANA\" , & \"YOUNG\" , & \"CHRISTIAN\" , & \"LESSIE\" , & \"AMALIA\" , & \"SAVANNAH\" , & \"ANASTASIA\" , & \"VILMA\" , & \"NATALIA\" , & \"ROSELLA\" , & \"LYNNETTE\" , & \"CORINA\" , & \"ALFREDA\" , & \"LEANNA\" , & \"CAREY\" , & \"AMPARO\" , & \"COLEEN\" , & \"TAMRA\" , & \"AISHA\" , & \"WILDA\" , & \"KARYN\" , & \"CHERRY\" , & \"QUEEN\" , & \"MAURA\" , & \"MAI\" , & \"EVANGELINA\" , & \"ROSANNA\" , & \"HALLIE\" , & \"ERNA\" , & \"ENID\" , & \"MARIANA\" , & \"LACY\" , & \"JULIET\" , & \"JACKLYN\" , & \"FREIDA\" , & \"MADELEINE\" , & \"MARA\" , & \"HESTER\" , & \"CATHRYN\" , & \"LELIA\" , & \"CASANDRA\" , & \"BRIDGETT\" , & \"ANGELITA\" , & \"JANNIE\" , & \"DIONNE\" , & \"ANNMARIE\" , & \"KATINA\" , & \"BERYL\" , & \"PHOEBE\" , & \"MILLICENT\" , & \"KATHERYN\" , & \"DIANN\" , & \"CARISSA\" , & \"MARYELLEN\" , & \"LIZ\" , & \"LAURI\" , & \"HELGA\" , & \"GILDA\" , & \"ADRIAN\" , & \"RHEA\" , & \"MARQUITA\" , & \"HOLLIE\" , & \"TISHA\" , & \"TAMERA\" , & \"ANGELIQUE\" , & \"FRANCESCA\" , & \"BRITNEY\" , & \"KAITLIN\" , & \"LOLITA\" , & \"FLORINE\" , & \"ROWENA\" , & \"REYNA\" , & \"TWILA\" , & \"FANNY\" , & \"JANELL\" , & \"INES\" , & \"CONCETTA\" , & \"BERTIE\" , & \"ALBA\" , & \"BRIGITTE\" , & \"ALYSON\" , & \"VONDA\" , & \"PANSY\" , & \"ELBA\" , & \"NOELLE\" , & \"LETITIA\" , & \"KITTY\" , & \"DEANN\" , & \"BRANDIE\" , & \"LOUELLA\" , & \"LETA\" , & \"FELECIA\" , & \"SHARLENE\" , & \"LESA\" , & \"BEVERLEY\" , & \"ROBERT\" , & \"ISABELLA\" , & \"HERMINIA\" , & \"TERRA\" , & \"CELINA\" , & \"TORI\" , & \"OCTAVIA\" , & \"JADE\" , & \"DENICE\" , & \"GERMAINE\" , & \"SIERRA\" , & \"MICHELL\" , & \"CORTNEY\" , & \"NELLY\" , & \"DORETHA\" , & \"SYDNEY\" , & \"DEIDRA\" , & \"MONIKA\" , & \"LASHONDA\" , & \"JUDI\" , & \"CHELSEY\" , & \"ANTIONETTE\" , & \"MARGOT\" , & \"BOBBY\" , & \"ADELAIDE\" , & \"NAN\" , & \"LEEANN\" , & \"ELISHA\" , & \"DESSIE\" , & \"LIBBY\" , & \"KATHI\" , & \"GAYLA\" , & \"LATANYA\" , & \"MINA\" , & \"MELLISA\" , & \"KIMBERLEE\" , & \"JASMIN\" , & \"RENAE\" , & \"ZELDA\" , & \"ELDA\" , & \"MA\" , & \"JUSTINA\" , & \"GUSSIE\" , & \"EMILIE\" , & \"CAMILLA\" , & \"ABBIE\" , & \"ROCIO\" , & \"KAITLYN\" , & \"JESSE\" , & \"EDYTHE\" , & \"ASHLEIGH\" , & \"SELINA\" , & \"LAKESHA\" , & \"GERI\" , & \"ALLENE\" , & \"PAMALA\" , & \"MICHAELA\" , & \"DAYNA\" , & \"CARYN\" , & \"ROSALIA\" , & \"SUN\" , & \"JACQULINE\" , & \"REBECA\" , & \"MARYBETH\" , & \"KRYSTLE\" , & \"IOLA\" , & \"DOTTIE\" , & \"BENNIE\" , & \"BELLE\" , & \"AUBREY\" , & \"GRISELDA\" , & \"ERNESTINA\" , & \"ELIDA\" , & \"ADRIANNE\" , & \"DEMETRIA\" , & \"DELMA\" , & \"CHONG\" , & \"JAQUELINE\" , & \"DESTINY\" , & \"ARLEEN\" , & \"VIRGINA\" , & \"RETHA\" , & \"FATIMA\" , & \"TILLIE\" , & \"ELEANORE\" , & \"CARI\" , & \"TREVA\" , & \"BIRDIE\" , & \"WILHELMINA\" , & \"ROSALEE\" , & \"MAURINE\" , & \"LATRICE\" , & \"YONG\" , & \"JENA\" , & \"TARYN\" , & \"ELIA\" , & \"DEBBY\" , & \"MAUDIE\" , & \"JEANNA\" , & \"DELILAH\" , & \"CATRINA\" , & \"SHONDA\" , & \"HORTENCIA\" , & \"THEODORA\" , & \"TERESITA\" , & \"ROBBIN\" , & \"DANETTE\" , & \"MARYJANE\" , & \"FREDDIE\" , & \"DELPHINE\" , & \"BRIANNE\" , & \"NILDA\" , & \"DANNA\" , & \"CINDI\" , & \"BESS\" , & \"IONA\" , & \"HANNA\" , & \"ARIEL\" , & \"WINONA\" , & \"VIDA\" , & \"ROSITA\" , & \"MARIANNA\" , & \"WILLIAM\" , & \"RACHEAL\" , & \"GUILLERMINA\" , & \"ELOISA\" , & \"CELESTINE\" , & \"CAREN\" , & \"MALISSA\" , & \"LONA\" , & \"CHANTEL\" , & \"SHELLIE\" , & \"MARISELA\" , & \"LEORA\" , & \"AGATHA\" , & \"SOLEDAD\" , & \"MIGDALIA\" , & \"IVETTE\" , & \"CHRISTEN\" , & \"ATHENA\" , & \"JANEL\" , & \"CHLOE\" , & \"VEDA\" , & \"PATTIE\" , & \"TESSIE\" , & \"TERA\" , & \"MARILYNN\" , & \"LUCRETIA\" , & \"KARRIE\" , & \"DINAH\" , & \"DANIELA\" , & \"ALECIA\" , & \"ADELINA\" , & \"VERNICE\" , & \"SHIELA\" , & \"PORTIA\" , & \"MERRY\" , & \"LASHAWN\" , & \"DEVON\" , & \"DARA\" , & \"TAWANA\" , & \"OMA\" , & \"VERDA\" , & \"CHRISTIN\" , & \"ALENE\" , & \"ZELLA\" , & \"SANDI\" , & \"RAFAELA\" , & \"MAYA\" , & \"KIRA\" , & \"CANDIDA\" , & \"ALVINA\" , & \"SUZAN\" , & \"SHAYLA\" , & \"LYN\" , & \"LETTIE\" , & \"ALVA\" , & \"SAMATHA\" , & \"ORALIA\" , & \"MATILDE\" , & \"MADONNA\" , & \"LARISSA\" , & \"VESTA\" , & \"RENITA\" , & \"INDIA\" , & \"DELOIS\" , & \"SHANDA\" , & \"PHILLIS\" , & \"LORRI\" , & \"ERLINDA\" , & \"CRUZ\" , & \"CATHRINE\" , & \"BARB\" , & \"ZOE\" , & \"ISABELL\" , & \"IONE\" , & \"GISELA\" , & \"CHARLIE\" , & \"VALENCIA\" , & \"ROXANNA\" , & \"MAYME\" , & \"KISHA\" , & \"ELLIE\" , & \"MELLISSA\" , & \"DORRIS\" , & \"DALIA\" , & \"BELLA\" , & \"ANNETTA\" , & \"ZOILA\" , & \"RETA\" , & \"REINA\" , & \"LAURETTA\" , & \"KYLIE\" , & \"CHRISTAL\" , & \"PILAR\" , & \"CHARLA\" , & \"ELISSA\" , & \"TIFFANI\" , & \"TANA\" , & \"PAULINA\" , & \"LEOTA\" , & \"BREANNA\" , & \"JAYME\" , & \"CARMEL\" , & \"VERNELL\" , & \"TOMASA\" , & \"MANDI\" , & \"DOMINGA\" , & \"SANTA\" , & \"MELODIE\" , & \"LURA\" , & \"ALEXA\" , & \"TAMELA\" , & \"RYAN\" , & \"MIRNA\" , & \"KERRIE\" , & \"VENUS\" , & \"NOEL\" , & \"FELICITA\" , & \"CRISTY\" , & \"CARMELITA\" , & \"BERNIECE\" , & \"ANNEMARIE\" , & \"TIARA\" , & \"ROSEANNE\" , & \"MISSY\" , & \"CORI\" , & \"ROXANA\" , & \"PRICILLA\" , & \"KRISTAL\" , & \"JUNG\" , & \"ELYSE\" , & \"HAYDEE\" , & \"ALETHA\" , & \"BETTINA\" , & \"MARGE\" , & \"GILLIAN\" , & \"FILOMENA\" , & \"CHARLES\" , & \"ZENAIDA\" , & \"HARRIETTE\" , & \"CARIDAD\" , & \"VADA\" , & \"UNA\" , & \"ARETHA\" , & \"PEARLINE\" , & \"MARJORY\" , & \"MARCELA\" , & \"FLOR\" , & \"EVETTE\" , & \"ELOUISE\" , & \"ALINA\" , & \"TRINIDAD\" , & \"DAVID\" , & \"DAMARIS\" , & \"CATHARINE\" , & \"CARROLL\" , & \"BELVA\" , & \"NAKIA\" , & \"MARLENA\" , & \"LUANNE\" , & \"LORINE\" , & \"KARON\" , & \"DORENE\" , & \"DANITA\" , & \"BRENNA\" , & \"TATIANA\" , & \"SAMMIE\" , & \"LOUANN\" , & \"LOREN\" , & \"JULIANNA\" , & \"ANDRIA\" , & \"PHILOMENA\" , & \"LUCILA\" , & \"LEONORA\" , & \"DOVIE\" , & \"ROMONA\" , & \"MIMI\" , & \"JACQUELIN\" , & \"GAYE\" , & \"TONJA\" , & \"MISTI\" , & \"JOE\" , & \"GENE\" , & \"CHASTITY\" , & \"STACIA\" , & \"ROXANN\" , & \"MICAELA\" , & \"NIKITA\" , & \"MEI\" , & \"VELDA\" , & \"MARLYS\" , & \"JOHNNA\" , & \"AURA\" , & \"LAVERN\" , & \"IVONNE\" , & \"HAYLEY\" , & \"NICKI\" , & \"MAJORIE\" , & \"HERLINDA\" , & \"GEORGE\" , & \"ALPHA\" , & \"YADIRA\" , & \"PERLA\" , & \"GREGORIA\" , & \"DANIEL\" , & \"ANTONETTE\" , & \"SHELLI\" , & \"MOZELLE\" , & \"MARIAH\" , & \"JOELLE\" , & \"CORDELIA\" , & \"JOSETTE\" , & \"CHIQUITA\" , & \"TRISTA\" , & \"LOUIS\" , & \"LAQUITA\" , & \"GEORGIANA\" , & \"CANDI\" , & \"SHANON\" , & \"LONNIE\" , & \"HILDEGARD\" , & \"CECIL\" , & \"VALENTINA\" , & \"STEPHANY\" , & \"MAGDA\" , & \"KAROL\" , & \"GERRY\" , & \"GABRIELLA\" , & \"TIANA\" , & \"ROMA\" , & \"RICHELLE\" , & \"RAY\" , & \"PRINCESS\" , & \"OLETA\" , & \"JACQUE\" , & \"IDELLA\" , & \"ALAINA\" , & \"SUZANNA\" , & \"JOVITA\" , & \"BLAIR\" , & \"TOSHA\" , & \"RAVEN\" , & \"NEREIDA\" , & \"MARLYN\" , & \"KYLA\" , & \"JOSEPH\" , & \"DELFINA\" , & \"TENA\" , & \"STEPHENIE\" , & \"SABINA\" , & \"NATHALIE\" , & \"MARCELLE\" , & \"GERTIE\" , & \"DARLEEN\" , & \"THEA\" , & \"SHARONDA\" , & \"SHANTEL\" , & \"BELEN\" , & \"VENESSA\" , & \"ROSALINA\" , & \"ONA\" , & \"GENOVEVA\" , & \"COREY\" , & \"CLEMENTINE\" , & \"ROSALBA\" , & \"RENATE\" , & \"RENATA\" , & \"MI\" , & \"IVORY\" , & \"GEORGIANNA\" , & \"FLOY\" , & \"DORCAS\" , & \"ARIANA\" , & \"TYRA\" , & \"THEDA\" , & \"MARIAM\" , & \"JULI\" , & \"JESICA\" , & \"DONNIE\" , & \"VIKKI\" , & \"VERLA\" , & \"ROSELYN\" , & \"MELVINA\" , & \"JANNETTE\" , & \"GINNY\" , & \"DEBRAH\" , & \"CORRIE\" , & \"ASIA\" , & \"VIOLETA\" , & \"MYRTIS\" , & \"LATRICIA\" , & \"COLLETTE\" , & \"CHARLEEN\" , & \"ANISSA\" , & \"VIVIANA\" , & \"TWYLA\" , & \"PRECIOUS\" , & \"NEDRA\" , & \"LATONIA\" , & \"LAN\" , & \"HELLEN\" , & \"FABIOLA\" , & \"ANNAMARIE\" , & \"ADELL\" , & \"SHARYN\" , & \"CHANTAL\" , & \"NIKI\" , & \"MAUD\" , & \"LIZETTE\" , & \"LINDY\" , & \"KIA\" , & \"KESHA\" , & \"JEANA\" , & \"DANELLE\" , & \"CHARLINE\" , & \"CHANEL\" , & \"CARROL\" , & \"VALORIE\" , & \"LIA\" , & \"DORTHA\" , & \"CRISTAL\" , & \"SUNNY\" , & \"LEONE\" , & \"LEILANI\" , & \"GERRI\" , & \"DEBI\" , & \"ANDRA\" , & \"KESHIA\" , & \"IMA\" , & \"EULALIA\" , & \"EASTER\" , & \"DULCE\" , & \"NATIVIDAD\" , & \"LINNIE\" , & \"KAMI\" , & \"GEORGIE\" , & \"CATINA\" , & \"BROOK\" , & \"ALDA\" , & \"WINNIFRED\" , & \"SHARLA\" , & \"RUTHANN\" , & \"MEAGHAN\" , & \"MAGDALENE\" , & \"LISSETTE\" , & \"ADELAIDA\" , & \"VENITA\" , & \"TRENA\" , & \"SHIRLENE\" , & \"SHAMEKA\" , & \"ELIZEBETH\" , & \"DIAN\" , & \"SHANTA\" , & \"MICKEY\" , & \"LATOSHA\" , & \"CARLOTTA\" , & \"WINDY\" , & \"SOON\" , & \"ROSINA\" , & \"MARIANN\" , & \"LEISA\" , & \"JONNIE\" , & \"DAWNA\" , & \"CATHIE\" , & \"BILLY\" , & \"ASTRID\" , & \"SIDNEY\" , & \"LAUREEN\" , & \"JANEEN\" , & \"HOLLI\" , & \"FAWN\" , & \"VICKEY\" , & \"TERESSA\" , & \"SHANTE\" , & \"RUBYE\" , & \"MARCELINA\" , & \"CHANDA\" , & \"CARY\" , & \"TERESE\" , & \"SCARLETT\" , & \"MARTY\" , & \"MARNIE\" , & \"LULU\" , & \"LISETTE\" , & \"JENIFFER\" , & \"ELENOR\" , & \"DORINDA\" , & \"DONITA\" , & \"CARMAN\" , & \"BERNITA\" , & \"ALTAGRACIA\" , & \"ALETA\" , & \"ADRIANNA\" , & \"ZORAIDA\" , & \"RONNIE\" , & \"NICOLA\" , & \"LYNDSEY\" , & \"KENDALL\" , & \"JANINA\" , & \"CHRISSY\" , & \"AMI\" , & \"STARLA\" , & \"PHYLIS\" , & \"PHUONG\" , & \"KYRA\" , & \"CHARISSE\" , & \"BLANCH\" , & \"SANJUANITA\" , & \"RONA\" , & \"NANCI\" , & \"MARILEE\" , & \"MARANDA\" , & \"CORY\" , & \"BRIGETTE\" , & \"SANJUANA\" , & \"MARITA\" , & \"KASSANDRA\" , & \"JOYCELYN\" , & \"IRA\" , & \"FELIPA\" , & \"CHELSIE\" , & \"BONNY\" , & \"MIREYA\" , & \"LORENZA\" , & \"KYONG\" , & \"ILEANA\" , & \"CANDELARIA\" , & \"TONY\" , & \"TOBY\" , & \"SHERIE\" , & \"OK\" , & \"MARK\" , & \"LUCIE\" , & \"LEATRICE\" , & \"LAKESHIA\" , & \"GERDA\" , & \"EDIE\" , & \"BAMBI\" , & \"MARYLIN\" , & \"LAVON\" , & \"HORTENSE\" , & \"GARNET\" , & \"EVIE\" , & \"TRESSA\" , & \"SHAYNA\" , & \"LAVINA\" , & \"KYUNG\" , & \"JEANETTA\" , & \"SHERRILL\" , & \"SHARA\" , & \"PHYLISS\" , & \"MITTIE\" , & \"ANABEL\" , & \"ALESIA\" , & \"THUY\" , & \"TAWANDA\" , & \"RICHARD\" , & \"JOANIE\" , & \"TIFFANIE\" , & \"LASHANDA\" , & \"KARISSA\" , & \"ENRIQUETA\" , & \"DARIA\" , & \"DANIELLA\" , & \"CORINNA\" , & \"ALANNA\" , & \"ABBEY\" , & \"ROXANE\" , & \"ROSEANNA\" , & \"MAGNOLIA\" , & \"LIDA\" , & \"KYLE\" , & \"JOELLEN\" , & \"ERA\" , & \"CORAL\" , & \"CARLEEN\" , & \"TRESA\" , & \"PEGGIE\" , & \"NOVELLA\" , & \"NILA\" , & \"MAYBELLE\" , & \"JENELLE\" , & \"CARINA\" , & \"NOVA\" , & \"MELINA\" , & \"MARQUERITE\" , & \"MARGARETTE\" , & \"JOSEPHINA\" , & \"EVONNE\" , & \"DEVIN\" , & \"CINTHIA\" , & \"ALBINA\" , & \"TOYA\" , & \"TAWNYA\" , & \"SHERITA\" , & \"SANTOS\" , & \"MYRIAM\" , & \"LIZABETH\" , & \"LISE\" , & \"KEELY\" , & \"JENNI\" , & \"GISELLE\" , & \"CHERYLE\" , & \"ARDITH\" , & \"ARDIS\" , & \"ALESHA\" , & \"ADRIANE\" , & \"SHAINA\" , & \"LINNEA\" , & \"KAROLYN\" , & \"HONG\" , & \"FLORIDA\" , & \"FELISHA\" , & \"DORI\" , & \"DARCI\" , & \"ARTIE\" , & \"ARMIDA\" , & \"ZOLA\" , & \"XIOMARA\" , & \"VERGIE\" , & \"SHAMIKA\" , & \"NENA\" , & \"NANNETTE\" , & \"MAXIE\" , & \"LOVIE\" , & \"JEANE\" , & \"JAIMIE\" , & \"INGE\" , & \"FARRAH\" , & \"ELAINA\" , & \"CAITLYN\" , & \"STARR\" , & \"FELICITAS\" , & \"CHERLY\" , & \"CARYL\" , & \"YOLONDA\" , & \"YASMIN\" , & \"TEENA\" , & \"PRUDENCE\" , & \"PENNIE\" , & \"NYDIA\" , & \"MACKENZIE\" , & \"ORPHA\" , & \"MARVEL\" , & \"LIZBETH\" , & \"LAURETTE\" , & \"JERRIE\" , & \"HERMELINDA\" , & \"CAROLEE\" , & \"TIERRA\" , & \"MIRIAN\" , & \"META\" , & \"MELONY\" , & \"KORI\" , & \"JENNETTE\" , & \"JAMILA\" , & \"ENA\" , & \"ANH\" , & \"YOSHIKO\" , & \"SUSANNAH\" , & \"SALINA\" , & \"RHIANNON\" , & \"JOLEEN\" , & \"CRISTINE\" , & \"ASHTON\" , & \"ARACELY\" , & \"TOMEKA\" , & \"SHALONDA\" , & \"MARTI\" , & \"LACIE\" , & \"KALA\" , & \"JADA\" , & \"ILSE\" , & \"HAILEY\" , & \"BRITTANI\" , & \"ZONA\" , & \"SYBLE\" , & \"SHERRYL\" , & \"RANDY\" , & \"NIDIA\" , & \"MARLO\" , & \"KANDICE\" , & \"KANDI\" , & \"DEB\" , & \"DEAN\" , & \"AMERICA\" , & \"ALYCIA\" , & \"TOMMY\" , & \"RONNA\" , & \"NORENE\" , & \"MERCY\" , & \"JOSE\" , & \"INGEBORG\" , & \"GIOVANNA\" , & \"GEMMA\" , & \"CHRISTEL\" , & \"AUDRY\" , & \"ZORA\" , & \"VITA\" , & \"VAN\" , & \"TRISH\" , & \"STEPHAINE\" , & \"SHIRLEE\" , & \"SHANIKA\" , & \"MELONIE\" , & \"MAZIE\" , & \"JAZMIN\" , & \"INGA\" , & \"HOA\" , & \"HETTIE\" , & \"GERALYN\" , & \"FONDA\" , & \"ESTRELLA\" , & \"ADELLA\" , & \"SU\" , & \"SARITA\" , & \"RINA\" , & \"MILISSA\" , & \"MARIBETH\" , & \"GOLDA\" , & \"EVON\" , & \"ETHELYN\" , & \"ENEDINA\" , & \"CHERISE\" , & \"CHANA\" , & \"VELVA\" , & \"TAWANNA\" , & \"SADE\" , & \"MIRTA\" , & \"LI\" , & \"KARIE\" , & \"JACINTA\" , & \"ELNA\" , & \"DAVINA\" , & \"CIERRA\" , & \"ASHLIE\" , & \"ALBERTHA\" , & \"TANESHA\" , & \"STEPHANI\" , & \"NELLE\" , & \"MINDI\" , & \"LU\" , & \"LORINDA\" , & \"LARUE\" , & \"FLORENE\" , & \"DEMETRA\" , & \"DEDRA\" , & \"CIARA\" , & \"CHANTELLE\" , & \"ASHLY\" , & \"SUZY\" , & \"ROSALVA\" , & \"NOELIA\" , & \"LYDA\" , & \"LEATHA\" , & \"KRYSTYNA\" , & \"KRISTAN\" , & \"KARRI\" , & \"DARLINE\" , & \"DARCIE\" , & \"CINDA\" , & \"CHEYENNE\" , & \"CHERRIE\" , & \"AWILDA\" , & \"ALMEDA\" , & \"ROLANDA\" , & \"LANETTE\" , & \"JERILYN\" , & \"GISELE\" , & \"EVALYN\" , & \"CYNDI\" , & \"CLETA\" , & \"CARIN\" , & \"ZINA\" , & \"ZENA\" , & \"VELIA\" , & \"TANIKA\" , & \"PAUL\" , & \"CHARISSA\" , & \"THOMAS\" , & \"TALIA\" , & \"MARGARETE\" , & \"LAVONDA\" , & \"KAYLEE\" , & \"KATHLENE\" , & \"JONNA\" , & \"IRENA\" , & \"ILONA\" , & \"IDALIA\" , & \"CANDIS\" , & \"CANDANCE\" , & \"BRANDEE\" , & \"ANITRA\" , & \"ALIDA\" , & \"SIGRID\" , & \"NICOLETTE\" , & \"MARYJO\" , & \"LINETTE\" , & \"HEDWIG\" , & \"CHRISTIANA\" , & \"CASSIDY\" , & \"ALEXIA\" , & \"TRESSIE\" , & \"MODESTA\" , & \"LUPITA\" , & \"LITA\" , & \"GLADIS\" , & \"EVELIA\" , & \"DAVIDA\" , & \"CHERRI\" , & \"CECILY\" , & \"ASHELY\" , & \"ANNABEL\" , & \"AGUSTINA\" , & \"WANITA\" , & \"SHIRLY\" , & \"ROSAURA\" , & \"HULDA\" , & \"EUN\" , & \"BAILEY\" , & \"YETTA\" , & \"VERONA\" , & \"THOMASINA\" , & \"SIBYL\" , & \"SHANNAN\" , & \"MECHELLE\" , & \"LUE\" , & \"LEANDRA\" , & \"LANI\" , & \"KYLEE\" , & \"KANDY\" , & \"JOLYNN\" , & \"FERNE\" , & \"EBONI\" , & \"CORENE\" , & \"ALYSIA\" , & \"ZULA\" , & \"NADA\" , & \"MOIRA\" , & \"LYNDSAY\" , & \"LORRETTA\" , & \"JUAN\" , & \"JAMMIE\" , & \"HORTENSIA\" , & \"GAYNELL\" , & \"CAMERON\" , & \"ADRIA\" , & \"VINA\" , & \"VICENTA\" , & \"TANGELA\" , & \"STEPHINE\" , & \"NORINE\" , & \"NELLA\" , & \"LIANA\" , & \"LESLEE\" , & \"KIMBERELY\" , & \"ILIANA\" , & \"GLORY\" , & \"FELICA\" , & \"EMOGENE\" , & \"ELFRIEDE\" , & \"EDEN\" , & \"EARTHA\" , & \"CARMA\" , & \"BEA\" , & \"OCIE\" , & \"MARRY\" , & \"LENNIE\" , & \"KIARA\" , & \"JACALYN\" , & \"CARLOTA\" , & \"ARIELLE\" , & \"YU\" , & \"STAR\" , & \"OTILIA\" , & \"KIRSTIN\" , & \"KACEY\" , & \"JOHNETTA\" , & \"JOEY\" , & \"JOETTA\" , & \"JERALDINE\" , & \"JAUNITA\" , & \"ELANA\" , & \"DORTHEA\" , & \"CAMI\" , & \"AMADA\" , & \"ADELIA\" , & \"VERNITA\" , & \"TAMAR\" , & \"SIOBHAN\" , & \"RENEA\" , & \"RASHIDA\" , & \"OUIDA\" , & \"ODELL\" , & \"NILSA\" , & \"MERYL\" , & \"KRISTYN\" , & \"JULIETA\" , & \"DANICA\" , & \"BREANNE\" , & \"AUREA\" , & \"ANGLEA\" , & \"SHERRON\" , & \"ODETTE\" , & \"MALIA\" , & \"LORELEI\" , & \"LIN\" , & \"LEESA\" , & \"KENNA\" , & \"KATHLYN\" , & \"FIONA\" , & \"CHARLETTE\" , & \"SUZIE\" , & \"SHANTELL\" , & \"SABRA\" , & \"RACQUEL\" , & \"MYONG\" , & \"MIRA\" , & \"MARTINE\" , & \"LUCIENNE\" , & \"LAVADA\" , & \"JULIANN\" , & \"JOHNIE\" , & \"ELVERA\" , & \"DELPHIA\" , & \"CLAIR\" , & \"CHRISTIANE\" , & \"CHAROLETTE\" , & \"CARRI\" , & \"AUGUSTINE\" , & \"ASHA\" , & \"ANGELLA\" , & \"PAOLA\" , & \"NINFA\" , & \"LEDA\" , & \"LAI\" , & \"EDA\" , & \"SUNSHINE\" , & \"STEFANI\" , & \"SHANELL\" , & \"PALMA\" , & \"MACHELLE\" , & \"LISSA\" , & \"KECIA\" , & \"KATHRYNE\" , & \"KARLENE\" , & \"JULISSA\" , & \"JETTIE\" , & \"JENNIFFER\" , & \"HUI\" , & \"CORRINA\" , & \"CHRISTOPHER\" , & \"CAROLANN\" , & \"ALENA\" , & \"TESS\" , & \"ROSARIA\" , & \"MYRTICE\" , & \"MARYLEE\" , & \"LIANE\" , & \"KENYATTA\" , & \"JUDIE\" , & \"JANEY\" , & \"IN\" , & \"ELMIRA\" , & \"ELDORA\" , & \"DENNA\" , & \"CRISTI\" , & \"CATHI\" , & \"ZAIDA\" , & \"VONNIE\" , & \"VIVA\" , & \"VERNIE\" , & \"ROSALINE\" , & \"MARIELA\" , & \"LUCIANA\" , & \"LESLI\" , & \"KARAN\" , & \"FELICE\" , & \"DENEEN\" , & \"ADINA\" , & \"WYNONA\" , & \"TARSHA\" , & \"SHERON\" , & \"SHASTA\" , & \"SHANITA\" , & \"SHANI\" , & \"SHANDRA\" , & \"RANDA\" , & \"PINKIE\" , & \"PARIS\" , & \"NELIDA\" , & \"MARILOU\" , & \"LYLA\" , & \"LAURENE\" , & \"LACI\" , & \"JOI\" , & \"JANENE\" , & \"DOROTHA\" , & \"DANIELE\" , & \"DANI\" , & \"CAROLYNN\" , & \"CARLYN\" , & \"BERENICE\" , & \"AYESHA\" , & \"ANNELIESE\" , & \"ALETHEA\" , & \"THERSA\" , & \"TAMIKO\" , & \"RUFINA\" , & \"OLIVA\" , & \"MOZELL\" , & \"MARYLYN\" , & \"MADISON\" , & \"KRISTIAN\" , & \"KATHYRN\" , & \"KASANDRA\" , & \"KANDACE\" , & \"JANAE\" , & \"GABRIEL\" , & \"DOMENICA\" , & \"DEBBRA\" , & \"DANNIELLE\" , & \"CHUN\" , & \"BUFFY\" , & \"BARBIE\" , & \"ARCELIA\" , & \"AJA\" , & \"ZENOBIA\" , & \"SHAREN\" , & \"SHAREE\" , & \"PATRICK\" , & \"PAGE\" , & \"MY\" , & \"LAVINIA\" , & \"KUM\" , & \"KACIE\" , & \"JACKELINE\" , & \"HUONG\" , & \"FELISA\" , & \"EMELIA\" , & \"ELEANORA\" , & \"CYTHIA\" , & \"CRISTIN\" , & \"CLYDE\" , & \"CLARIBEL\" , & \"CARON\" , & \"ANASTACIA\" , & \"ZULMA\" , & \"ZANDRA\" , & \"YOKO\" , & \"TENISHA\" , & \"SUSANN\" , & \"SHERILYN\" , & \"SHAY\" , & \"SHAWANDA\" , & \"SABINE\" , & \"ROMANA\" , & \"MATHILDA\" , & \"LINSEY\" , & \"KEIKO\" , & \"JOANA\" , & \"ISELA\" , & \"GRETTA\" , & \"GEORGETTA\" , & \"EUGENIE\" , & \"DUSTY\" , & \"DESIRAE\" , & \"DELORA\" , & \"CORAZON\" , & \"ANTONINA\" , & \"ANIKA\" , & \"WILLENE\" , & \"TRACEE\" , & \"TAMATHA\" , & \"REGAN\" , & \"NICHELLE\" , & \"MICKIE\" , & \"MAEGAN\" , & \"LUANA\" , & \"LANITA\" , & \"KELSIE\" , & \"EDELMIRA\" , & \"BREE\" , & \"AFTON\" , & \"TEODORA\" , & \"TAMIE\" , & \"SHENA\" , & \"MEG\" , & \"LINH\" , & \"KELI\" , & \"KACI\" , & \"DANYELLE\" , & \"BRITT\" , & \"ARLETTE\" , & \"ALBERTINE\" , & \"ADELLE\" , & \"TIFFINY\" , & \"STORMY\" , & \"SIMONA\" , & \"NUMBERS\" , & \"NICOLASA\" , & \"NICHOL\" , & \"NIA\" , & \"NAKISHA\" , & \"MEE\" , & \"MAIRA\" , & \"LOREEN\" , & \"KIZZY\" , & \"JOHNNY\" , & \"JAY\" , & \"FALLON\" , & \"CHRISTENE\" , & \"BOBBYE\" , & \"ANTHONY\" , & \"YING\" , & \"VINCENZA\" , & \"TANJA\" , & \"RUBIE\" , & \"RONI\" , & \"QUEENIE\" , & \"MARGARETT\" , & \"KIMBERLI\" , & \"IRMGARD\" , & \"IDELL\" , & \"HILMA\" , & \"EVELINA\" , & \"ESTA\" , & \"EMILEE\" , & \"DENNISE\" , & \"DANIA\" , & \"CARL\" , & \"CARIE\" , & \"ANTONIO\" , & \"WAI\" , & \"SANG\" , & \"RISA\" , & \"RIKKI\" , & \"PARTICIA\" , & \"MUI\" , & \"MASAKO\" , & \"MARIO\" , & \"LUVENIA\" , & \"LOREE\" , & \"LONI\" , & \"LIEN\" , & \"KEVIN\" , & \"GIGI\" , & \"FLORENCIA\" , & \"DORIAN\" , & \"DENITA\" , & \"DALLAS\" , & \"CHI\" , & \"BILLYE\" , & \"ALEXANDER\" , & \"TOMIKA\" , & \"SHARITA\" , & \"RANA\" , & \"NIKOLE\" , & \"NEOMA\" , & \"MARGARITE\" , & \"MADALYN\" , & \"LUCINA\" , & \"LAILA\" , & \"KALI\" , & \"JENETTE\" , & \"GABRIELE\" , & \"EVELYNE\" , & \"ELENORA\" , & \"CLEMENTINA\" , & \"ALEJANDRINA\" , & \"ZULEMA\" , & \"VIOLETTE\" , & \"VANNESSA\" , & \"THRESA\" , & \"RETTA\" , & \"PIA\" , & \"PATIENCE\" , & \"NOELLA\" , & \"NICKIE\" , & \"JONELL\" , & \"DELTA\" , & \"CHUNG\" , & \"CHAYA\" , & \"CAMELIA\" , & \"BETHEL\" , & \"ANYA\" , & \"ANDREW\" , & \"THANH\" , & \"SUZANN\" , & \"SPRING\" , & \"SHU\" , & \"MILA\" , & \"LILLA\" , & \"LAVERNA\" , & \"KEESHA\" , & \"KATTIE\" , & \"GIA\" , & \"GEORGENE\" , & \"EVELINE\" , & \"ESTELL\" , & \"ELIZBETH\" , & \"VIVIENNE\" , & \"VALLIE\" , & \"TRUDIE\" , & \"STEPHANE\" , & \"MICHEL\" , & \"MAGALY\" , & \"MADIE\" , & \"KENYETTA\" , & \"KARREN\" , & \"JANETTA\" , & \"HERMINE\" , & \"HARMONY\" , & \"DRUCILLA\" , & \"DEBBI\" , & \"CELESTINA\" , & \"CANDIE\" , & \"BRITNI\" , & \"BECKIE\" , & \"AMINA\" , & \"ZITA\" , & \"YUN\" , & \"YOLANDE\" , & \"VIVIEN\" , & \"VERNETTA\" , & \"TRUDI\" , & \"SOMMER\" , & \"PEARLE\" , & \"PATRINA\" , & \"OSSIE\" , & \"NICOLLE\" , & \"LOYCE\" , & \"LETTY\" , & \"LARISA\" , & \"KATHARINA\" , & \"JOSELYN\" , & \"JONELLE\" , & \"JENELL\" , & \"IESHA\" , & \"HEIDE\" , & \"FLORINDA\" , & \"FLORENTINA\" , & \"FLO\" , & \"ELODIA\" , & \"DORINE\" , & \"BRUNILDA\" , & \"BRIGID\" , & \"ASHLI\" , & \"ARDELLA\" , & \"TWANA\" , & \"THU\" , & \"TARAH\" , & \"SUNG\" , & \"SHEA\" , & \"SHAVON\" , & \"SHANE\" , & \"SERINA\" , & \"RAYNA\" , & \"RAMONITA\" , & \"NGA\" , & \"MARGURITE\" , & \"LUCRECIA\" , & \"KOURTNEY\" , & \"KATI\" , & \"JESUS\" , & \"JESENIA\" , & \"DIAMOND\" , & \"CRISTA\" , & \"AYANA\" , & \"ALICA\" , & \"ALIA\" , & \"VINNIE\" , & \"SUELLEN\" , & \"ROMELIA\" , & \"RACHELL\" , & \"PIPER\" , & \"OLYMPIA\" , & \"MICHIKO\" , & \"KATHALEEN\" , & \"JOLIE\" , & \"JESSI\" , & \"JANESSA\" , & \"HANA\" , & \"HA\" , & \"ELEASE\" , & \"CARLETTA\" , & \"BRITANY\" , & \"SHONA\" , & \"SALOME\" , & \"ROSAMOND\" , & \"REGENA\" , & \"RAINA\" , & \"NGOC\" , & \"NELIA\" , & \"LOUVENIA\" , & \"LESIA\" , & \"LATRINA\" , & \"LATICIA\" , & \"LARHONDA\" , & \"JINA\" , & \"JACKI\" , & \"HOLLIS\" , & \"HOLLEY\" , & \"EMMY\" , & \"DEEANN\" , & \"CORETTA\" , & \"ARNETTA\" , & \"VELVET\" , & \"THALIA\" , & \"SHANICE\" , & \"NETA\" , & \"MIKKI\" , & \"MICKI\" , & \"LONNA\" , & \"LEANA\" , & \"LASHUNDA\" , & \"KILEY\" , & \"JOYE\" , & \"JACQULYN\" , & \"IGNACIA\" , & \"HYUN\" , & \"HIROKO\" , & \"HENRY\" , & \"HENRIETTE\" , & \"ELAYNE\" , & \"DELINDA\" , & \"DARNELL\" , & \"DAHLIA\" , & \"COREEN\" , & \"CONSUELA\" , & \"CONCHITA\" , & \"CELINE\" , & \"BABETTE\" , & \"AYANNA\" , & \"ANETTE\" , & \"ALBERTINA\" , & \"SKYE\" , & \"SHAWNEE\" , & \"SHANEKA\" , & \"QUIANA\" , & \"PAMELIA\" , & \"MIN\" , & \"MERRI\" , & \"MERLENE\" , & \"MARGIT\" , & \"KIESHA\" , & \"KIERA\" , & \"KAYLENE\" , & \"JODEE\" , & \"JENISE\" , & \"ERLENE\" , & \"EMMIE\" , & \"ELSE\" , & \"DARYL\" , & \"DALILA\" , & \"DAISEY\" , & \"CODY\" , & \"CASIE\" , & \"BELIA\" , & \"BABARA\" , & \"VERSIE\" , & \"VANESA\" , & \"SHELBA\" , & \"SHAWNDA\" , & \"SAM\" , & \"NORMAN\" , & \"NIKIA\" , & \"NAOMA\" , & \"MARNA\" , & \"MARGERET\" , & \"MADALINE\" , & \"LAWANA\" , & \"KINDRA\" , & \"JUTTA\" , & \"JAZMINE\" , & \"JANETT\" , & \"HANNELORE\" , & \"GLENDORA\" , & \"GERTRUD\" , & \"GARNETT\" , & \"FREEDA\" , & \"FREDERICA\" , & \"FLORANCE\" , & \"FLAVIA\" , & \"DENNIS\" , & \"CARLINE\" , & \"BEVERLEE\" , & \"ANJANETTE\" , & \"VALDA\" , & \"TRINITY\" , & \"TAMALA\" , & \"STEVIE\" , & \"SHONNA\" , & \"SHA\" , & \"SARINA\" , & \"ONEIDA\" , & \"MICAH\" , & \"MERILYN\" , & \"MARLEEN\" , & \"LURLINE\" , & \"LENNA\" , & \"KATHERIN\" , & \"JIN\" , & \"JENI\" , & \"HAE\" , & \"GRACIA\" , & \"GLADY\" , & \"FARAH\" , & \"ERIC\" , & \"ENOLA\" , & \"EMA\" , & \"DOMINQUE\" , & \"DEVONA\" , & \"DELANA\" , & \"CECILA\" , & \"CAPRICE\" , & \"ALYSHA\" , & \"ALI\" , & \"ALETHIA\" , & \"VENA\" , & \"THERESIA\" , & \"TAWNY\" , & \"SONG\" , & \"SHAKIRA\" , & \"SAMARA\" , & \"SACHIKO\" , & \"RACHELE\" , & \"PAMELLA\" , & \"NICKY\" , & \"MARNI\" , & \"MARIEL\" , & \"MAREN\" , & \"MALISA\" , & \"LIGIA\" , & \"LERA\" , & \"LATORIA\" , & \"LARAE\" , & \"KIMBER\" , & \"KATHERN\" , & \"KAREY\" , & \"JENNEFER\" , & \"JANETH\" , & \"HALINA\" , & \"FREDIA\" , & \"DELISA\" , & \"DEBROAH\" , & \"CIERA\" , & \"CHIN\" , & \"ANGELIKA\" , & \"ANDREE\" , & \"ALTHA\" , & \"YEN\" , & \"VIVAN\" , & \"TERRESA\" , & \"TANNA\" , & \"SUK\" , & \"SUDIE\" , & \"SOO\" , & \"SIGNE\" , & \"SALENA\" , & \"RONNI\" , & \"REBBECCA\" , & \"MYRTIE\" , & \"MCKENZIE\" , & \"MALIKA\" , & \"MAIDA\" , & \"LOAN\" , & \"LEONARDA\" , & \"KAYLEIGH\" , & \"FRANCE\" , & \"ETHYL\" , & \"ELLYN\" , & \"DAYLE\" , & \"CAMMIE\" , & \"BRITTNI\" , & \"BIRGIT\" , & \"AVELINA\" , & \"ASUNCION\" , & \"ARIANNA\" , & \"AKIKO\" , & \"VENICE\" , & \"TYESHA\" , & \"TONIE\" , & \"TIESHA\" , & \"TAKISHA\" , & \"STEFFANIE\" , & \"SINDY\" , & \"SANTANA\" , & \"MEGHANN\" , & \"MANDA\" , & \"MACIE\" , & \"LADY\" , & \"KELLYE\" , & \"KELLEE\" , & \"JOSLYN\" , & \"JASON\" , & \"INGER\" , & \"INDIRA\" , & \"GLINDA\" , & \"GLENNIS\" , & \"FERNANDA\" , & \"FAUSTINA\" , & \"ENEIDA\" , & \"ELICIA\" , & \"DOT\" , & \"DIGNA\" , & \"DELL\" , & \"ARLETTA\" , & \"ANDRE\" , & \"WILLIA\" , & \"TAMMARA\" , & \"TABETHA\" , & \"SHERRELL\" , & \"SARI\" , & \"REFUGIO\" , & \"REBBECA\" , & \"PAULETTA\" , & \"NIEVES\" , & \"NATOSHA\" , & \"NAKITA\" , & \"MAMMIE\" , & \"KENISHA\" , & \"KAZUKO\" , & \"KASSIE\" , & \"GARY\" , & \"EARLEAN\" , & \"DAPHINE\" , & \"CORLISS\" , & \"CLOTILDE\" , & \"CAROLYNE\" , & \"BERNETTA\" , & \"AUGUSTINA\" , & \"AUDREA\" , & \"ANNIS\" , & \"ANNABELL\" , & \"YAN\" , & \"TENNILLE\" , & \"TAMICA\" , & \"SELENE\" , & \"SEAN\" , & \"ROSANA\" , & \"REGENIA\" , & \"QIANA\" , & \"MARKITA\" , & \"MACY\" , & \"LEEANNE\" , & \"LAURINE\" , & \"KYM\" , & \"JESSENIA\" , & \"JANITA\" , & \"GEORGINE\" , & \"GENIE\" , & \"EMIKO\" , & \"ELVIE\" , & \"DEANDRA\" , & \"DAGMAR\" , & \"CORIE\" , & \"COLLEN\" , & \"CHERISH\" , & \"ROMAINE\" , & \"PORSHA\" , & \"PEARLENE\" , & \"MICHELINE\" , & \"MERNA\" , & \"MARGORIE\" , & \"MARGARETTA\" , & \"LORE\" , & \"KENNETH\" , & \"JENINE\" , & \"HERMINA\" , & \"FREDERICKA\" , & \"ELKE\" , & \"DRUSILLA\" , & \"DORATHY\" , & \"DIONE\" , & \"DESIRE\" , & \"CELENA\" , & \"BRIGIDA\" , & \"ANGELES\" , & \"ALLEGRA\" , & \"THEO\" , & \"TAMEKIA\" , & \"SYNTHIA\" , & \"STEPHEN\" , & \"SOOK\" , & \"SLYVIA\" , & \"ROSANN\" , & \"REATHA\" , & \"RAYE\" , & \"MARQUETTA\" , & \"MARGART\" , & \"LING\" , & \"LAYLA\" , & \"KYMBERLY\" , & \"KIANA\" , & \"KAYLEEN\" , & \"KATLYN\" , & \"KARMEN\" , & \"JOELLA\" , & \"IRINA\" , & \"EMELDA\" , & \"ELENI\" , & \"DETRA\" , & \"CLEMMIE\" , & \"CHERYLL\" , & \"CHANTELL\" , & \"CATHEY\" , & \"ARNITA\" , & \"ARLA\" , & \"ANGLE\" , & \"ANGELIC\" , & \"ALYSE\" , & \"ZOFIA\" , & \"THOMASINE\" , & \"TENNIE\" , & \"SON\" , & \"SHERLY\" , & \"SHERLEY\" , & \"SHARYL\" , & \"REMEDIOS\" , & \"PETRINA\" , & \"NICKOLE\" , & \"MYUNG\" , & \"MYRLE\" , & \"MOZELLA\" , & \"LOUANNE\" , & \"LISHA\" , & \"LATIA\" , & \"LANE\" , & \"KRYSTA\" , & \"JULIENNE\" , & \"JOEL\" , & \"JEANENE\" , & \"JACQUALINE\" , & \"ISAURA\" , & \"GWENDA\" , & \"EARLEEN\" , & \"DONALD\" , & \"CLEOPATRA\" , & \"CARLIE\" , & \"AUDIE\" , & \"ANTONIETTA\" , & \"ALISE\" , & \"ALEX\" , & \"VERDELL\" , & \"VAL\" , & \"TYLER\" , & \"TOMOKO\" , & \"THAO\" , & \"TALISHA\" , & \"STEVEN\" , & \"SO\" , & \"SHEMIKA\" , & \"SHAUN\" , & \"SCARLET\" , & \"SAVANNA\" , & \"SANTINA\" , & \"ROSIA\" , & \"RAEANN\" , & \"ODILIA\" , & \"NANA\" , & \"MINNA\" , & \"MAGAN\" , & \"LYNELLE\" , & \"LE\" , & \"KARMA\" , & \"JOEANN\" , & \"IVANA\" , & \"INELL\" , & \"ILANA\" , & \"HYE\" , & \"HONEY\" , & \"HEE\" , & \"GUDRUN\" , & \"FRANK\" , & \"DREAMA\" , & \"CRISSY\" , & \"CHANTE\" , & \"CARMELINA\" , & \"ARVILLA\" , & \"ARTHUR\" , & \"ANNAMAE\" , & \"ALVERA\" , & \"ALEIDA\" , & \"AARON\" , & \"YEE\" , & \"YANIRA\" , & \"VANDA\" , & \"TIANNA\" , & \"TAM\" , & \"STEFANIA\" , & \"SHIRA\" , & \"PERRY\" , & \"NICOL\" , & \"NANCIE\" , & \"MONSERRATE\" , & \"MINH\" , & \"MELYNDA\" , & \"MELANY\" , & \"MATTHEW\" , & \"LOVELLA\" , & \"LAURE\" , & \"KIRBY\" , & \"KACY\" , & \"JACQUELYNN\" , & \"HYON\" , & \"GERTHA\" , & \"FRANCISCO\" , & \"ELIANA\" , & \"CHRISTENA\" , & \"CHRISTEEN\" , & \"CHARISE\" , & \"CATERINA\" , & \"CARLEY\" , & \"CANDYCE\" , & \"ARLENA\" , & \"AMMIE\" , & \"YANG\" , & \"WILLETTE\" , & \"VANITA\" , & \"TUYET\" , & \"TINY\" , & \"SYREETA\" , & \"SILVA\" , & \"SCOTT\" , & \"RONALD\" , & \"PENNEY\" , & \"NYLA\" , & \"MICHAL\" , & \"MAURICE\" , & \"MARYAM\" , & \"MARYA\" , & \"MAGEN\" , & \"LUDIE\" , & \"LOMA\" , & \"LIVIA\" , & \"LANELL\" , & \"KIMBERLIE\" , & \"JULEE\" , & \"DONETTA\" , & \"DIEDRA\" , & \"DENISHA\" , & \"DEANE\" , & \"DAWNE\" , & \"CLARINE\" , & \"CHERRYL\" , & \"BRONWYN\" , & \"BRANDON\" , & \"ALLA\" , & \"VALERY\" , & \"TONDA\" , & \"SUEANN\" , & \"SORAYA\" , & \"SHOSHANA\" , & \"SHELA\" , & \"SHARLEEN\" , & \"SHANELLE\" , & \"NERISSA\" , & \"MICHEAL\" , & \"MERIDITH\" , & \"MELLIE\" , & \"MAYE\" , & \"MAPLE\" , & \"MAGARET\" , & \"LUIS\" , & \"LILI\" , & \"LEONILA\" , & \"LEONIE\" , & \"LEEANNA\" , & \"LAVONIA\" , & \"LAVERA\" , & \"KRISTEL\" , & \"KATHEY\" , & \"KATHE\" , & \"JUSTIN\" , & \"JULIAN\" , & \"JIMMY\" , & \"JANN\" , & \"ILDA\" , & \"HILDRED\" , & \"HILDEGARDE\" , & \"GENIA\" , & \"FUMIKO\" , & \"EVELIN\" , & \"ERMELINDA\" , & \"ELLY\" , & \"DUNG\" , & \"DOLORIS\" , & \"DIONNA\" , & \"DANAE\" , & \"BERNEICE\" , & \"ANNICE\" , & \"ALIX\" , & \"VERENA\" , & \"VERDIE\" , & \"TRISTAN\" , & \"SHAWNNA\" , & \"SHAWANA\" , & \"SHAUNNA\" , & \"ROZELLA\" , & \"RANDEE\" , & \"RANAE\" , & \"MILAGRO\" , & \"LYNELL\" , & \"LUISE\" , & \"LOUIE\" , & \"LOIDA\" , & \"LISBETH\" , & \"KARLEEN\" , & \"JUNITA\" , & \"JONA\" , & \"ISIS\" , & \"HYACINTH\" , & \"HEDY\" , & \"GWENN\" , & \"ETHELENE\" , & \"ERLINE\" , & \"EDWARD\" , & \"DONYA\" , & \"DOMONIQUE\" , & \"DELICIA\" , & \"DANNETTE\" , & \"CICELY\" , & \"BRANDA\" , & \"BLYTHE\" , & \"BETHANN\" , & \"ASHLYN\" , & \"ANNALEE\" , & \"ALLINE\" , & \"YUKO\" , & \"VELLA\" , & \"TRANG\" , & \"TOWANDA\" , & \"TESHA\" , & \"SHERLYN\" , & \"NARCISA\" , & \"MIGUELINA\" , & \"MERI\" , & \"MAYBELL\" , & \"MARLANA\" , & \"MARGUERITA\" , & \"MADLYN\" , & \"LUNA\" , & \"LORY\" , & \"LORIANN\" , & \"LIBERTY\" , & \"LEONORE\" , & \"LEIGHANN\" , & \"LAURICE\" , & \"LATESHA\" , & \"LARONDA\" , & \"KATRICE\" , & \"KASIE\" , & \"KARL\" , & \"KALEY\" , & \"JADWIGA\" , & \"GLENNIE\" , & \"GEARLDINE\" , & \"FRANCINA\" , & \"EPIFANIA\" , & \"DYAN\" , & \"DORIE\" , & \"DIEDRE\" , & \"DENESE\" , & \"DEMETRICE\" , & \"DELENA\" , & \"DARBY\" , & \"CRISTIE\" , & \"CLEORA\" , & \"CATARINA\" , & \"CARISA\" , & \"BERNIE\" , & \"BARBERA\" , & \"ALMETA\" , & \"TRULA\" , & \"TEREASA\" , & \"SOLANGE\" , & \"SHEILAH\" , & \"SHAVONNE\" , & \"SANORA\" , & \"ROCHELL\" , & \"MATHILDE\" , & \"MARGARETA\" , & \"MAIA\" , & \"LYNSEY\" , & \"LAWANNA\" , & \"LAUNA\" , & \"KENA\" , & \"KEENA\" , & \"KATIA\" , & \"JAMEY\" , & \"GLYNDA\" , & \"GAYLENE\" , & \"ELVINA\" , & \"ELANOR\" , & \"DANUTA\" , & \"DANIKA\" , & \"CRISTEN\" , & \"CORDIE\" , & \"COLETTA\" , & \"CLARITA\" , & \"CARMON\" , & \"BRYNN\" , & \"AZUCENA\" , & \"AUNDREA\" , & \"ANGELE\" , & \"YI\" , & \"WALTER\" , & \"VERLIE\" , & \"VERLENE\" , & \"TAMESHA\" , & \"SILVANA\" , & \"SEBRINA\" , & \"SAMIRA\" , & \"REDA\" , & \"RAYLENE\" , & \"PENNI\" , & \"PANDORA\" , & \"NORAH\" , & \"NOMA\" , & \"MIREILLE\" , & \"MELISSIA\" , & \"MARYALICE\" , & \"LARAINE\" , & \"KIMBERY\" , & \"KARYL\" , & \"KARINE\" , & \"KAM\" , & \"JOLANDA\" , & \"JOHANA\" , & \"JESUSA\" , & \"JALEESA\" , & \"JAE\" , & \"JACQUELYNE\" , & \"IRISH\" , & \"ILUMINADA\" , & \"HILARIA\" , & \"HANH\" , & \"GENNIE\" , & \"FRANCIE\" , & \"FLORETTA\" , & \"EXIE\" , & \"EDDA\" , & \"DREMA\" , & \"DELPHA\" , & \"BEV\" , & \"BARBAR\" , & \"ASSUNTA\" , & \"ARDELL\" , & \"ANNALISA\" , & \"ALISIA\" , & \"YUKIKO\" , & \"YOLANDO\" , & \"WONDA\" , & \"WEI\" , & \"WALTRAUD\" , & \"VETA\" , & \"TEQUILA\" , & \"TEMEKA\" , & \"TAMEIKA\" , & \"SHIRLEEN\" , & \"SHENITA\" , & \"PIEDAD\" , & \"OZELLA\" , & \"MIRTHA\" , & \"MARILU\" , & \"KIMIKO\" , & \"JULIANE\" , & \"JENICE\" , & \"JEN\" , & \"JANAY\" , & \"JACQUILINE\" , & \"HILDE\" , & \"FE\" , & \"FAE\" , & \"EVAN\" , & \"EUGENE\" , & \"ELOIS\" , & \"ECHO\" , & \"DEVORAH\" , & \"CHAU\" , & \"BRINDA\" , & \"BETSEY\" , & \"ARMINDA\" , & \"ARACELIS\" , & \"APRYL\" , & \"ANNETT\" , & \"ALISHIA\" , & \"VEOLA\" , & \"USHA\" , & \"TOSHIKO\" , & \"THEOLA\" , & \"TASHIA\" , & \"TALITHA\" , & \"SHERY\" , & \"RUDY\" , & \"RENETTA\" , & \"REIKO\" , & \"RASHEEDA\" , & \"OMEGA\" , & \"OBDULIA\" , & \"MIKA\" , & \"MELAINE\" , & \"MEGGAN\" , & \"MARTIN\" , & \"MARLEN\" , & \"MARGET\" , & \"MARCELINE\" , & \"MANA\" , & \"MAGDALEN\" , & \"LIBRADA\" , & \"LEZLIE\" , & \"LEXIE\" , & \"LATASHIA\" , & \"LASANDRA\" , & \"KELLE\" , & \"ISIDRA\" , & \"ISA\" , & \"INOCENCIA\" , & \"GWYN\" , & \"FRANCOISE\" , & \"ERMINIA\" , & \"ERINN\" , & \"DIMPLE\" , & \"DEVORA\" , & \"CRISELDA\" , & \"ARMANDA\" , & \"ARIE\" , & \"ARIANE\" , & \"ANGELO\" , & \"ANGELENA\" , & \"ALLEN\" , & \"ALIZA\" , & \"ADRIENE\" , & \"ADALINE\" , & \"XOCHITL\" , & \"TWANNA\" , & \"TRAN\" , & \"TOMIKO\" , & \"TAMISHA\" , & \"TAISHA\" , & \"SUSY\" , & \"SIU\" , & \"RUTHA\" , & \"ROXY\" , & \"RHONA\" , & \"RAYMOND\" , & \"OTHA\" , & \"NORIKO\" , & \"NATASHIA\" , & \"MERRIE\" , & \"MELVIN\" , & \"MARINDA\" , & \"MARIKO\" , & \"MARGERT\" , & \"LORIS\" , & \"LIZZETTE\" , & \"LEISHA\" , & \"KAILA\" , & \"KA\" , & \"JOANNIE\" , & \"JERRICA\" , & \"JENE\" , & \"JANNET\" , & \"JANEE\" , & \"JACINDA\" , & \"HERTA\" , & \"ELENORE\" , & \"DORETTA\" , & \"DELAINE\" , & \"DANIELL\" , & \"CLAUDIE\" , & \"CHINA\" , & \"BRITTA\" , & \"APOLONIA\" , & \"AMBERLY\" , & \"ALEASE\" , & \"YURI\" , & \"YUK\" , & \"WEN\" , & \"WANETA\" , & \"UTE\" , & \"TOMI\" , & \"SHARRI\" , & \"SANDIE\" , & \"ROSELLE\" , & \"REYNALDA\" , & \"RAGUEL\" , & \"PHYLICIA\" , & \"PATRIA\" , & \"OLIMPIA\" , & \"ODELIA\" , & \"MITZIE\" , & \"MITCHELL\" , & \"MISS\" , & \"MINDA\" , & \"MIGNON\" , & \"MICA\" , & \"MENDY\" , & \"MARIVEL\" , & \"MAILE\" , & \"LYNETTA\" , & \"LAVETTE\" , & \"LAURYN\" , & \"LATRISHA\" , & \"LAKIESHA\" , & \"KIERSTEN\" , & \"KARY\" , & \"JOSPHINE\" , & \"JOLYN\" , & \"JETTA\" , & \"JANISE\" , & \"JACQUIE\" , & \"IVELISSE\" , & \"GLYNIS\" , & \"GIANNA\" , & \"GAYNELLE\" , & \"EMERALD\" , & \"DEMETRIUS\" , & \"DANYELL\" , & \"DANILLE\" , & \"DACIA\" , & \"CORALEE\" , & \"CHER\" , & \"CEOLA\" , & \"BRETT\" , & \"BELL\" , & \"ARIANNE\" , & \"ALESHIA\" , & \"YUNG\" , & \"WILLIEMAE\" , & \"TROY\" , & \"TRINH\" , & \"THORA\" , & \"TAI\" , & \"SVETLANA\" , & \"SHERIKA\" , & \"SHEMEKA\" , & \"SHAUNDA\" , & \"ROSELINE\" , & \"RICKI\" , & \"MELDA\" , & \"MALLIE\" , & \"LAVONNA\" , & \"LATINA\" , & \"LARRY\" , & \"LAQUANDA\" , & \"LALA\" , & \"LACHELLE\" , & \"KLARA\" , & \"KANDIS\" , & \"JOHNA\" , & \"JEANMARIE\" , & \"JAYE\" , & \"HANG\" , & \"GRAYCE\" , & \"GERTUDE\" , & \"EMERITA\" , & \"EBONIE\" , & \"CLORINDA\" , & \"CHING\" , & \"CHERY\" , & \"CAROLA\" , & \"BREANN\" , & \"BLOSSOM\" , & \"BERNARDINE\" , & \"BECKI\" , & \"ARLETHA\" , & \"ARGELIA\" , & \"ARA\" , & \"ALITA\" , & \"YULANDA\" , & \"YON\" , & \"YESSENIA\" , & \"TOBI\" , & \"TASIA\" , & \"SYLVIE\" , & \"SHIRL\" , & \"SHIRELY\" , & \"SHERIDAN\" , & \"SHELLA\" , & \"SHANTELLE\" , & \"SACHA\" , & \"ROYCE\" , & \"REBECKA\" , & \"REAGAN\" , & \"PROVIDENCIA\" , & \"PAULENE\" , & \"MISHA\" , & \"MIKI\" , & \"MARLINE\" , & \"MARICA\" , & \"LORITA\" , & \"LATOYIA\" , & \"LASONYA\" , & \"KERSTIN\" , & \"KENDA\" , & \"KEITHA\" , & \"KATHRIN\" , & \"JAYMIE\" , & \"JACK\" , & \"GRICELDA\" , & \"GINETTE\" , & \"ERYN\" , & \"ELINA\" , & \"ELFRIEDA\" , & \"DANYEL\" , & \"CHEREE\" , & \"CHANELLE\" , & \"BARRIE\" , & \"AVERY\" , & \"AURORE\" , & \"ANNAMARIA\" , & \"ALLEEN\" , & \"AILENE\" , & \"AIDE\" , & \"YASMINE\" , & \"VASHTI\" , & \"VALENTINE\" , & \"TREASA\" , & \"TORY\" , & \"TIFFANEY\" , & \"SHERYLL\" , & \"SHARIE\" , & \"SHANAE\" , & \"SAU\" , & \"RAISA\" , & \"PA\" , & \"NEDA\" , & \"MITSUKO\" , & \"MIRELLA\" , & \"MILDA\" , & \"MARYANNA\" , & \"MARAGRET\" , & \"MABELLE\" , & \"LUETTA\" , & \"LORINA\" , & \"LETISHA\" , & \"LATARSHA\" , & \"LANELLE\" , & \"LAJUANA\" , & \"KRISSY\" , & \"KARLY\" , & \"KARENA\" , & \"JON\" , & \"JESSIKA\" , & \"JERICA\" , & \"JEANELLE\" , & \"JANUARY\" , & \"JALISA\" , & \"JACELYN\" , & \"IZOLA\" , & \"IVEY\" , & \"GREGORY\" , & \"EUNA\" , & \"ETHA\" , & \"DREW\" , & \"DOMITILA\" , & \"DOMINICA\" , & \"DAINA\" , & \"CREOLA\" , & \"CARLI\" , & \"CAMIE\" , & \"BUNNY\" , & \"BRITTNY\" , & \"ASHANTI\" , & \"ANISHA\" , & \"ALEEN\" , & \"ADAH\" , & \"YASUKO\" , & \"WINTER\" , & \"VIKI\" , & \"VALRIE\" , & \"TONA\" , & \"TINISHA\" , & \"THI\" , & \"TERISA\" , & \"TATUM\" , & \"TANEKA\" , & \"SIMONNE\" , & \"SHALANDA\" , & \"SERITA\" , & \"RESSIE\" , & \"REFUGIA\" , & \"PAZ\" , & \"OLENE\" , & \"NA\" , & \"MERRILL\" , & \"MARGHERITA\" , & \"MANDIE\" , & \"MAN\" , & \"MAIRE\" , & \"LYNDIA\" , & \"LUCI\" , & \"LORRIANE\" , & \"LORETA\" , & \"LEONIA\" , & \"LAVONA\" , & \"LASHAWNDA\" , & \"LAKIA\" , & \"KYOKO\" , & \"KRYSTINA\" , & \"KRYSTEN\" , & \"KENIA\" , & \"KELSI\" , & \"JUDE\" , & \"JEANICE\" , & \"ISOBEL\" , & \"GEORGIANN\" , & \"GENNY\" , & \"FELICIDAD\" , & \"EILENE\" , & \"DEON\" , & \"DELOISE\" , & \"DEEDEE\" , & \"DANNIE\" , & \"CONCEPTION\" , & \"CLORA\" , & \"CHERILYN\" , & \"CHANG\" , & \"CALANDRA\" , & \"BERRY\" , & \"ARMANDINA\" , & \"ANISA\" , & \"ULA\" , & \"TIMOTHY\" , & \"TIERA\" , & \"THERESSA\" , & \"STEPHANIA\" , & \"SIMA\" , & \"SHYLA\" , & \"SHONTA\" , & \"SHERA\" , & \"SHAQUITA\" , & \"SHALA\" , & \"SAMMY\" , & \"ROSSANA\" , & \"NOHEMI\" , & \"NERY\" , & \"MORIAH\" , & \"MELITA\" , & \"MELIDA\" , & \"MELANI\" , & \"MARYLYNN\" , & \"MARISHA\" , & \"MARIETTE\" , & \"MALORIE\" , & \"MADELENE\" , & \"LUDIVINA\" , & \"LORIA\" , & \"LORETTE\" , & \"LORALEE\" , & \"LIANNE\" , & \"LEON\" , & \"LAVENIA\" , & \"LAURINDA\" , & \"LASHON\" , & \"KIT\" , & \"KIMI\" , & \"KEILA\" , & \"KATELYNN\" , & \"KAI\" , & \"JONE\" , & \"JOANE\" , & \"JI\" , & \"JAYNA\" , & \"JANELLA\" , & \"JA\" , & \"HUE\" , & \"HERTHA\" , & \"FRANCENE\" , & \"ELINORE\" , & \"DESPINA\" , & \"DELSIE\" , & \"DEEDRA\" , & \"CLEMENCIA\" , & \"CARRY\" , & \"CAROLIN\" , & \"CARLOS\" , & \"BULAH\" , & \"BRITTANIE\" , & \"BOK\" , & \"BLONDELL\" , & \"BIBI\" , & \"BEAULAH\" , & \"BEATA\" , & \"ANNITA\" , & \"AGRIPINA\" , & \"VIRGEN\" , & \"VALENE\" , & \"UN\" , & \"TWANDA\" , & \"TOMMYE\" , & \"TOI\" , & \"TARRA\" , & \"TARI\" , & \"TAMMERA\" , & \"SHAKIA\" , & \"SADYE\" , & \"RUTHANNE\" , & \"ROCHEL\" , & \"RIVKA\" , & \"PURA\" , & \"NENITA\" , & \"NATISHA\" , & \"MING\" , & \"MERRILEE\" , & \"MELODEE\" , & \"MARVIS\" , & \"LUCILLA\" , & \"LEENA\" , & \"LAVETA\" , & \"LARITA\" , & \"LANIE\" , & \"KEREN\" , & \"ILEEN\" , & \"GEORGEANN\" , & \"GENNA\" , & \"GENESIS\" , & \"FRIDA\" , & \"EWA\" , & \"EUFEMIA\" , & \"EMELY\" , & \"ELA\" , & \"EDYTH\" , & \"DEONNA\" , & \"DEADRA\" , & \"DARLENA\" , & \"CHANELL\" , & \"CHAN\" , & \"CATHERN\" , & \"CASSONDRA\" , & \"CASSAUNDRA\" , & \"BERNARDA\" , & \"BERNA\" , & \"ARLINDA\" , & \"ANAMARIA\" , & \"ALBERT\" , & \"WESLEY\" , & \"VERTIE\" , & \"VALERI\" , & \"TORRI\" , & \"TATYANA\" , & \"STASIA\" , & \"SHERISE\" , & \"SHERILL\" , & \"SEASON\" , & \"SCOTTIE\" , & \"SANDA\" , & \"RUTHE\" , & \"ROSY\" , & \"ROBERTO\" , & \"ROBBI\" , & \"RANEE\" , & \"QUYEN\" , & \"PEARLY\" , & \"PALMIRA\" , & \"ONITA\" , & \"NISHA\" , & \"NIESHA\" , & \"NIDA\" , & \"NEVADA\" , & \"NAM\" , & \"MERLYN\" , & \"MAYOLA\" , & \"MARYLOUISE\" , & \"MARYLAND\" , & \"MARX\" , & \"MARTH\" , & \"MARGENE\" , & \"MADELAINE\" , & \"LONDA\" , & \"LEONTINE\" , & \"LEOMA\" , & \"LEIA\" , & \"LAWRENCE\" , & \"LAURALEE\" , & \"LANORA\" , & \"LAKITA\" , & \"KIYOKO\" , & \"KETURAH\" , & \"KATELIN\" , & \"KAREEN\" , & \"JONIE\" , & \"JOHNETTE\" , & \"JENEE\" , & \"JEANETT\" , & \"IZETTA\" , & \"HIEDI\" , & \"HEIKE\" , & \"HASSIE\" , & \"HAROLD\" , & \"GIUSEPPINA\" , & \"GEORGANN\" , & \"FIDELA\" , & \"FERNANDE\" , & \"ELWANDA\" , & \"ELLAMAE\" , & \"ELIZ\" , & \"DUSTI\" , & \"DOTTY\" , & \"CYNDY\" , & \"CORALIE\" , & \"CELESTA\" , & \"ARGENTINA\" , & \"ALVERTA\" , & \"XENIA\" , & \"WAVA\" , & \"VANETTA\" , & \"TORRIE\" , & \"TASHINA\" , & \"TANDY\" , & \"TAMBRA\" , & \"TAMA\" , & \"STEPANIE\" , & \"SHILA\" , & \"SHAUNTA\" , & \"SHARAN\" , & \"SHANIQUA\" , & \"SHAE\" , & \"SETSUKO\" , & \"SERAFINA\" , & \"SANDEE\" , & \"ROSAMARIA\" , & \"PRISCILA\" , & \"OLINDA\" , & \"NADENE\" , & \"MUOI\" , & \"MICHELINA\" , & \"MERCEDEZ\" , & \"MARYROSE\" , & \"MARIN\" , & \"MARCENE\" , & \"MAO\" , & \"MAGALI\" , & \"MAFALDA\" , & \"LOGAN\" , & \"LINN\" , & \"LANNIE\" , & \"KAYCE\" , & \"KAROLINE\" , & \"KAMILAH\" , & \"KAMALA\" , & \"JUSTA\" , & \"JOLINE\" , & \"JENNINE\" , & \"JACQUETTA\" , & \"IRAIDA\" , & \"GERALD\" , & \"GEORGEANNA\" , & \"FRANCHESCA\" , & \"FAIRY\" , & \"EMELINE\" , & \"ELANE\" , & \"EHTEL\" , & \"EARLIE\" , & \"DULCIE\" , & \"DALENE\" , & \"CRIS\" , & \"CLASSIE\" , & \"CHERE\" , & \"CHARIS\" , & \"CAROYLN\" , & \"CARMINA\" , & \"CARITA\" , & \"BRIAN\" , & \"BETHANIE\" , & \"AYAKO\" , & \"ARICA\" , & \"AN\" , & \"ALYSA\" , & \"ALESSANDRA\" , & \"AKILAH\" , & \"ADRIEN\" , & \"ZETTA\" , & \"YOULANDA\" , & \"YELENA\" , & \"YAHAIRA\" , & \"XUAN\" , & \"WENDOLYN\" , & \"VICTOR\" , & \"TIJUANA\" , & \"TERRELL\" , & \"TERINA\" , & \"TERESIA\" , & \"SUZI\" , & \"SUNDAY\" , & \"SHERELL\" , & \"SHAVONDA\" , & \"SHAUNTE\" , & \"SHARDA\" , & \"SHAKITA\" , & \"SENA\" , & \"RYANN\" , & \"RUBI\" , & \"RIVA\" , & \"REGINIA\" , & \"REA\" , & \"RACHAL\" , & \"PARTHENIA\" , & \"PAMULA\" , & \"MONNIE\" , & \"MONET\" , & \"MICHAELE\" , & \"MELIA\" , & \"MARINE\" , & \"MALKA\" , & \"MAISHA\" , & \"LISANDRA\" , & \"LEO\" , & \"LEKISHA\" , & \"LEAN\" , & \"LAURENCE\" , & \"LAKENDRA\" , & \"KRYSTIN\" , & \"KORTNEY\" , & \"KIZZIE\" , & \"KITTIE\" , & \"KERA\" , & \"KENDAL\" , & \"KEMBERLY\" , & \"KANISHA\" , & \"JULENE\" , & \"JULE\" , & \"JOSHUA\" , & \"JOHANNE\" , & \"JEFFREY\" , & \"JAMEE\" , & \"HAN\" , & \"HALLEY\" , & \"GIDGET\" , & \"GALINA\" , & \"FREDRICKA\" , & \"FLETA\" , & \"FATIMAH\" , & \"EUSEBIA\" , & \"ELZA\" , & \"ELEONORE\" , & \"DORTHEY\" , & \"DORIA\" , & \"DONELLA\" , & \"DINORAH\" , & \"DELORSE\" , & \"CLARETHA\" , & \"CHRISTINIA\" , & \"CHARLYN\" , & \"BONG\" , & \"BELKIS\" , & \"AZZIE\" , & \"ANDERA\" , & \"AIKO\" , & \"ADENA\" , & \"YER\" , & \"YAJAIRA\" , & \"WAN\" , & \"VANIA\" , & \"ULRIKE\" , & \"TOSHIA\" , & \"TIFANY\" , & \"STEFANY\" , & \"SHIZUE\" , & \"SHENIKA\" , & \"SHAWANNA\" , & \"SHAROLYN\" , & \"SHARILYN\" , & \"SHAQUANA\" , & \"SHANTAY\" , & \"SEE\" , & \"ROZANNE\" , & \"ROSELEE\" , & \"RICKIE\" , & \"REMONA\" , & \"REANNA\" , & \"RAELENE\" , & \"QUINN\" , & \"PHUNG\" , & \"PETRONILA\" , & \"NATACHA\" , & \"NANCEY\" , & \"MYRL\" , & \"MIYOKO\" , & \"MIESHA\" , & \"MERIDETH\" , & \"MARVELLA\" , & \"MARQUITTA\" , & \"MARHTA\" , & \"MARCHELLE\" , & \"LIZETH\" , & \"LIBBIE\" , & \"LAHOMA\" , & \"LADAWN\" , & \"KINA\" , & \"KATHELEEN\" , & \"KATHARYN\" , & \"KARISA\" , & \"KALEIGH\" , & \"JUNIE\" , & \"JULIEANN\" , & \"JOHNSIE\" , & \"JANEAN\" , & \"JAIMEE\" , & \"JACKQUELINE\" , & \"HISAKO\" , & \"HERMA\" , & \"HELAINE\" , & \"GWYNETH\" , & \"GLENN\" , & \"GITA\" , & \"EUSTOLIA\" , & \"EMELINA\" , & \"ELIN\" , & \"EDRIS\" , & \"DONNETTE\" , & \"DONNETTA\" , & \"DIERDRE\" , & \"DENAE\" , & \"DARCEL\" , & \"CLAUDE\" , & \"CLARISA\" , & \"CINDERELLA\" , & \"CHIA\" , & \"CHARLESETTA\" , & \"CHARITA\" , & \"CELSA\" , & \"CASSY\" , & \"CASSI\" , & \"CARLEE\" , & \"BRUNA\" , & \"BRITTANEY\" , & \"BRANDE\" , & \"BILLI\" , & \"BAO\" , & \"ANTONETTA\" , & \"ANGLA\" , & \"ANGELYN\" , & \"ANALISA\" , & \"ALANE\" , & \"WENONA\" , & \"WENDIE\" , & \"VERONIQUE\" , & \"VANNESA\" , & \"TOBIE\" , & \"TEMPIE\" , & \"SUMIKO\" , & \"SULEMA\" , & \"SPARKLE\" , & \"SOMER\" , & \"SHEBA\" , & \"SHAYNE\" , & \"SHARICE\" , & \"SHANEL\" , & \"SHALON\" , & \"SAGE\" , & \"ROY\" , & \"ROSIO\" , & \"ROSELIA\" , & \"RENAY\" , & \"REMA\" , & \"REENA\" , & \"PORSCHE\" , & \"PING\" , & \"PEG\" , & \"OZIE\" , & \"ORETHA\" , & \"ORALEE\" , & \"ODA\" , & \"NU\" , & \"NGAN\" , & \"NAKESHA\" , & \"MILLY\" , & \"MARYBELLE\" , & \"MARLIN\" , & \"MARIS\" , & \"MARGRETT\" , & \"MARAGARET\" , & \"MANIE\" , & \"LURLENE\" , & \"LILLIA\" , & \"LIESELOTTE\" , & \"LAVELLE\" , & \"LASHAUNDA\" , & \"LAKEESHA\" , & \"KEITH\" , & \"KAYCEE\" , & \"KALYN\" , & \"JOYA\" , & \"JOETTE\" , & \"JENAE\" , & \"JANIECE\" , & \"ILLA\" , & \"GRISEL\" , & \"GLAYDS\" , & \"GENEVIE\" , & \"GALA\" , & \"FREDDA\" , & \"FRED\" , & \"ELMER\" , & \"ELEONOR\" , & \"DEBERA\" , & \"DEANDREA\" , & \"DAN\" , & \"CORRINNE\" , & \"CORDIA\" , & \"CONTESSA\" , & \"COLENE\" , & \"CLEOTILDE\" , & \"CHARLOTT\" , & \"CHANTAY\" , & \"CECILLE\" , & \"BEATRIS\" , & \"AZALEE\" , & \"ARLEAN\" , & \"ARDATH\" , & \"ANJELICA\" , & \"ANJA\" , & \"ALFREDIA\" , & \"ALEISHA\" , & \"ADAM\" , & \"ZADA\" , & \"YUONNE\" , & \"XIAO\" , & \"WILLODEAN\" , & \"WHITLEY\" , & \"VENNIE\" , & \"VANNA\" , & \"TYISHA\" , & \"TOVA\" , & \"TORIE\" , & \"TONISHA\" , & \"TILDA\" , & \"TIEN\" , & \"TEMPLE\" , & \"SIRENA\" , & \"SHERRIL\" , & \"SHANTI\" , & \"SHAN\" , & \"SENAIDA\" , & \"SAMELLA\" , & \"ROBBYN\" , & \"RENDA\" , & \"REITA\" , & \"PHEBE\" , & \"PAULITA\" , & \"NOBUKO\" , & \"NGUYET\" , & \"NEOMI\" , & \"MOON\" , & \"MIKAELA\" , & \"MELANIA\" , & \"MAXIMINA\" , & \"MARG\" , & \"MAISIE\" , & \"LYNNA\" , & \"LILLI\" , & \"LAYNE\" , & \"LASHAUN\" , & \"LAKENYA\" , & \"LAEL\" , & \"KIRSTIE\" , & \"KATHLINE\" , & \"KASHA\" , & \"KARLYN\" , & \"KARIMA\" , & \"JOVAN\" , & \"JOSEFINE\" , & \"JENNELL\" , & \"JACQUI\" , & \"JACKELYN\" , & \"HYO\" , & \"HIEN\" , & \"GRAZYNA\" , & \"FLORRIE\" , & \"FLORIA\" , & \"ELEONORA\" , & \"DWANA\" , & \"DORLA\" , & \"DONG\" , & \"DELMY\" , & \"DEJA\" , & \"DEDE\" , & \"DANN\" , & \"CRYSTA\" , & \"CLELIA\" , & \"CLARIS\" , & \"CLARENCE\" , & \"CHIEKO\" , & \"CHERLYN\" , & \"CHERELLE\" , & \"CHARMAIN\" , & \"CHARA\" , & \"CAMMY\" , & \"BEE\" , & \"ARNETTE\" , & \"ARDELLE\" , & \"ANNIKA\" , & \"AMIEE\" , & \"AMEE\" , & \"ALLENA\" , & \"YVONE\" , & \"YUKI\" , & \"YOSHIE\" , & \"YEVETTE\" , & \"YAEL\" , & \"WILLETTA\" , & \"VONCILE\" , & \"VENETTA\" , & \"TULA\" , & \"TONETTE\" , & \"TIMIKA\" , & \"TEMIKA\" , & \"TELMA\" , & \"TEISHA\" , & \"TAREN\" , & \"TA\" , & \"STACEE\" , & \"SHIN\" , & \"SHAWNTA\" , & \"SATURNINA\" , & \"RICARDA\" , & \"POK\" , & \"PASTY\" , & \"ONIE\" , & \"NUBIA\" , & \"MORA\" , & \"MIKE\" , & \"MARIELLE\" , & \"MARIELLA\" , & \"MARIANELA\" , & \"MARDELL\" , & \"MANY\" , & \"LUANNA\" , & \"LOISE\" , & \"LISABETH\" , & \"LINDSY\" , & \"LILLIANA\" , & \"LILLIAM\" , & \"LELAH\" , & \"LEIGHA\" , & \"LEANORA\" , & \"LANG\" , & \"KRISTEEN\" , & \"KHALILAH\" , & \"KEELEY\" , & \"KANDRA\" , & \"JUNKO\" , & \"JOAQUINA\" , & \"JERLENE\" , & \"JANI\" , & \"JAMIKA\" , & \"JAME\" , & \"HSIU\" , & \"HERMILA\" , & \"GOLDEN\" , & \"GENEVIVE\" , & \"EVIA\" , & \"EUGENA\" , & \"EMMALINE\" , & \"ELFREDA\" , & \"ELENE\" , & \"DONETTE\" , & \"DELCIE\" , & \"DEEANNA\" , & \"DARCEY\" , & \"CUC\" , & \"CLARINDA\" , & \"CIRA\" , & \"CHAE\" , & \"CELINDA\" , & \"CATHERYN\" , & \"CATHERIN\" , & \"CASIMIRA\" , & \"CARMELIA\" , & \"CAMELLIA\" , & \"BREANA\" , & \"BOBETTE\" , & \"BERNARDINA\" , & \"BEBE\" , & \"BASILIA\" , & \"ARLYNE\" , & \"AMAL\" , & \"ALAYNA\" , & \"ZONIA\" , & \"ZENIA\" , & \"YURIKO\" , & \"YAEKO\" , & \"WYNELL\" , & \"WILLOW\" , & \"WILLENA\" , & \"VERNIA\" , & \"TU\" , & \"TRAVIS\" , & \"TORA\" , & \"TERRILYN\" , & \"TERICA\" , & \"TENESHA\" , & \"TAWNA\" , & \"TAJUANA\" , & \"TAINA\" , & \"STEPHNIE\" , & \"SONA\" , & \"SOL\" , & \"SINA\" , & \"SHONDRA\" , & \"SHIZUKO\" , & \"SHERLENE\" , & \"SHERICE\" , & \"SHARIKA\" , & \"ROSSIE\" , & \"ROSENA\" , & \"RORY\" , & \"RIMA\" , & \"RIA\" , & \"RHEBA\" , & \"RENNA\" , & \"PETER\" , & \"NATALYA\" , & \"NANCEE\" , & \"MELODI\" , & \"MEDA\" , & \"MAXIMA\" , & \"MATHA\" , & \"MARKETTA\" , & \"MARICRUZ\" , & \"MARCELENE\" , & \"MALVINA\" , & \"LUBA\" , & \"LOUETTA\" , & \"LEIDA\" , & \"LECIA\" , & \"LAURAN\" , & \"LASHAWNA\" , & \"LAINE\" , & \"KHADIJAH\" , & \"KATERINE\" , & \"KASI\" , & \"KALLIE\" , & \"JULIETTA\" , & \"JESUSITA\" , & \"JESTINE\" , & \"JESSIA\" , & \"JEREMY\" , & \"JEFFIE\" , & \"JANYCE\" , & \"ISADORA\" , & \"GEORGIANNE\" , & \"FIDELIA\" , & \"EVITA\" , & \"EURA\" , & \"EULAH\" , & \"ESTEFANA\" , & \"ELSY\" , & \"ELIZABET\" , & \"ELADIA\" , & \"DODIE\" , & \"DION\" , & \"DIA\" , & \"DENISSE\" , & \"DELORAS\" , & \"DELILA\" , & \"DAYSI\" , & \"DAKOTA\" , & \"CURTIS\" , & \"CRYSTLE\" , & \"CONCHA\" , & \"COLBY\" , & \"CLARETTA\" , & \"CHU\" , & \"CHRISTIA\" , & \"CHARLSIE\" , & \"CHARLENA\" , & \"CARYLON\" , & \"BETTYANN\" , & \"ASLEY\" , & \"ASHLEA\" , & \"AMIRA\" , & \"AI\" , & \"AGUEDA\" , & \"AGNUS\" , & \"YUETTE\" , & \"VINITA\" , & \"VICTORINA\" , & \"TYNISHA\" , & \"TREENA\" , & \"TOCCARA\" , & \"TISH\" , & \"THOMASENA\" , & \"TEGAN\" , & \"SOILA\" , & \"SHILOH\" , & \"SHENNA\" , & \"SHARMAINE\" , & \"SHANTAE\" , & \"SHANDI\" , & \"SEPTEMBER\" , & \"SARAN\" , & \"SARAI\" , & \"SANA\" , & \"SAMUEL\" , & \"SALLEY\" , & \"ROSETTE\" , & \"ROLANDE\" , & \"REGINE\" , & \"OTELIA\" , & \"OSCAR\" , & \"OLEVIA\" , & \"NICHOLLE\" , & \"NECOLE\" , & \"NAIDA\" , & \"MYRTA\" , & \"MYESHA\" , & \"MITSUE\" , & \"MINTA\" , & \"MERTIE\" , & \"MARGY\" , & \"MAHALIA\" , & \"MADALENE\" , & \"LOVE\" , & \"LOURA\" , & \"LOREAN\" , & \"LEWIS\" , & \"LESHA\" , & \"LEONIDA\" , & \"LENITA\" , & \"LAVONE\" , & \"LASHELL\" , & \"LASHANDRA\" , & \"LAMONICA\" , & \"KIMBRA\" , & \"KATHERINA\" , & \"KARRY\" , & \"KANESHA\" , & \"JULIO\" , & \"JONG\" , & \"JENEVA\" , & \"JAQUELYN\" , & \"HWA\" , & \"GILMA\" , & \"GHISLAINE\" , & \"GERTRUDIS\" , & \"FRANSISCA\" , & \"FERMINA\" , & \"ETTIE\" , & \"ETSUKO\" , & \"ELLIS\" , & \"ELLAN\" , & \"ELIDIA\" , & \"EDRA\" , & \"DORETHEA\" , & \"DOREATHA\" , & \"DENYSE\" , & \"DENNY\" , & \"DEETTA\" , & \"DAINE\" , & \"CYRSTAL\" , & \"CORRIN\" , & \"CAYLA\" , & \"CARLITA\" , & \"CAMILA\" , & \"BURMA\" , & \"BULA\" , & \"BUENA\" , & \"BLAKE\" , & \"BARABARA\" , & \"AVRIL\" , & \"AUSTIN\" , & \"ALAINE\" , & \"ZANA\" , & \"WILHEMINA\" , & \"WANETTA\" , & \"VIRGIL\" , & \"VI\" , & \"VERONIKA\" , & \"VERNON\" , & \"VERLINE\" , & \"VASILIKI\" , & \"TONITA\" , & \"TISA\" , & \"TEOFILA\" , & \"TAYNA\" , & \"TAUNYA\" , & \"TANDRA\" , & \"TAKAKO\" , & \"SUNNI\" , & \"SUANNE\" , & \"SIXTA\" , & \"SHARELL\" , & \"SEEMA\" , & \"RUSSELL\" , & \"ROSENDA\" , & \"ROBENA\" , & \"RAYMONDE\" , & \"PEI\" , & \"PAMILA\" , & \"OZELL\" , & \"NEIDA\" , & \"NEELY\" , & \"MISTIE\" , & \"MICHA\" , & \"MERISSA\" , & \"MAURITA\" , & \"MARYLN\" , & \"MARYETTA\" , & \"MARSHALL\" , & \"MARCELL\" , & \"MALENA\" , & \"MAKEDA\" , & \"MADDIE\" , & \"LOVETTA\" , & \"LOURIE\" , & \"LORRINE\" , & \"LORILEE\" , & \"LESTER\" , & \"LAURENA\" , & \"LASHAY\" , & \"LARRAINE\" , & \"LAREE\" , & \"LACRESHA\" , & \"KRISTLE\" , & \"KRISHNA\" , & \"KEVA\" , & \"KEIRA\" , & \"KAROLE\" , & \"JOIE\" , & \"JINNY\" , & \"JEANNETTA\" , & \"JAMA\" , & \"HEIDY\" , & \"GILBERTE\" , & \"GEMA\" , & \"FAVIOLA\" , & \"EVELYNN\" , & \"ENDA\" , & \"ELLI\" , & \"ELLENA\" , & \"DIVINA\" , & \"DAGNY\" , & \"COLLENE\" , & \"CODI\" , & \"CINDIE\" , & \"CHASSIDY\" , & \"CHASIDY\" , & \"CATRICE\" , & \"CATHERINA\" , & \"CASSEY\" , & \"CAROLL\" , & \"CARLENA\" , & \"CANDRA\" , & \"CALISTA\" , & \"BRYANNA\" , & \"BRITTENY\" , & \"BEULA\" , & \"BARI\" , & \"AUDRIE\" , & \"AUDRIA\" , & \"ARDELIA\" , & \"ANNELLE\" , & \"ANGILA\" , & \"ALONA\" , & \"ALLYN\" , & \"DOUGLAS\" , & \"ROGER\" , & \"JONATHAN\" , & \"RALPH\" , & \"NICHOLAS\" , & \"BENJAMIN\" , & \"BRUCE\" , & \"HARRY\" , & \"WAYNE\" , & \"STEVE\" , & \"HOWARD\" , & \"ERNEST\" , & \"PHILLIP\" , & \"TODD\" , & \"CRAIG\" , & \"ALAN\" , & \"PHILIP\" , & \"EARL\" , & \"DANNY\" , & \"BRYAN\" , & \"STANLEY\" , & \"LEONARD\" , & \"NATHAN\" , & \"MANUEL\" , & \"RODNEY\" , & \"MARVIN\" , & \"VINCENT\" , & \"JEFFERY\" , & \"JEFF\" , & \"CHAD\" , & \"JACOB\" , & \"ALFRED\" , & \"BRADLEY\" , & \"HERBERT\" , & \"FREDERICK\" , & \"EDWIN\" , & \"DON\" , & \"RICKY\" , & \"RANDALL\" , & \"BARRY\" , & \"BERNARD\" , & \"LEROY\" , & \"MARCUS\" , & \"THEODORE\" , & \"CLIFFORD\" , & \"MIGUEL\" , & \"JIM\" , & \"TOM\" , & \"CALVIN\" , & \"BILL\" , & \"LLOYD\" , & \"DEREK\" , & \"WARREN\" , & \"DARRELL\" , & \"JEROME\" , & \"FLOYD\" , & \"ALVIN\" , & \"TIM\" , & \"GORDON\" , & \"GREG\" , & \"JORGE\" , & \"DUSTIN\" , & \"PEDRO\" , & \"DERRICK\" , & \"ZACHARY\" , & \"HERMAN\" , & \"GLEN\" , & \"HECTOR\" , & \"RICARDO\" , & \"RICK\" , & \"BRENT\" , & \"RAMON\" , & \"GILBERT\" , & \"MARC\" , & \"REGINALD\" , & \"RUBEN\" , & \"NATHANIEL\" , & \"RAFAEL\" , & \"EDGAR\" , & \"MILTON\" , & \"RAUL\" , & \"BEN\" , & \"CHESTER\" , & \"DUANE\" , & \"FRANKLIN\" , & \"BRAD\" , & \"RON\" , & \"ROLAND\" , & \"ARNOLD\" , & \"HARVEY\" , & \"JARED\" , & \"ERIK\" , & \"DARRYL\" , & \"NEIL\" , & \"JAVIER\" , & \"FERNANDO\" , & \"CLINTON\" , & \"TED\" , & \"MATHEW\" , & \"TYRONE\" , & \"DARREN\" , & \"LANCE\" , & \"KURT\" , & \"ALLAN\" , & \"NELSON\" , & \"GUY\" , & \"CLAYTON\" , & \"HUGH\" , & \"MAX\" , & \"DWAYNE\" , & \"DWIGHT\" , & \"ARMANDO\" , & \"FELIX\" , & \"EVERETT\" , & \"IAN\" , & \"WALLACE\" , & \"KEN\" , & \"BOB\" , & \"ALFREDO\" , & \"ALBERTO\" , & \"DAVE\" , & \"IVAN\" , & \"BYRON\" , & \"ISAAC\" , & \"MORRIS\" , & \"CLIFTON\" , & \"WILLARD\" , & \"ROSS\" , & \"ANDY\" , & \"SALVADOR\" , & \"KIRK\" , & \"SERGIO\" , & \"SETH\" , & \"KENT\" , & \"TERRANCE\" , & \"EDUARDO\" , & \"TERRENCE\" , & \"ENRIQUE\" , & \"WADE\" , & \"STUART\" , & \"FREDRICK\" , & \"ARTURO\" , & \"ALEJANDRO\" , & \"NICK\" , & \"LUTHER\" , & \"WENDELL\" , & \"JEREMIAH\" , & \"JULIUS\" , & \"OTIS\" , & \"TREVOR\" , & \"OLIVER\" , & \"LUKE\" , & \"HOMER\" , & \"GERARD\" , & \"DOUG\" , & \"KENNY\" , & \"HUBERT\" , & \"LYLE\" , & \"MATT\" , & \"ALFONSO\" , & \"ORLANDO\" , & \"REX\" , & \"CARLTON\" , & \"ERNESTO\" , & \"NEAL\" , & \"PABLO\" , & \"LORENZO\" , & \"OMAR\" , & \"WILBUR\" , & \"GRANT\" , & \"HORACE\" , & \"RODERICK\" , & \"ABRAHAM\" , & \"WILLIS\" , & \"RICKEY\" , & \"ANDRES\" , & \"CESAR\" , & \"JOHNATHAN\" , & \"MALCOLM\" , & \"RUDOLPH\" , & \"DAMON\" , & \"KELVIN\" , & \"PRESTON\" , & \"ALTON\" , & \"ARCHIE\" , & \"MARCO\" , & \"WM\" , & \"PETE\" , & \"RANDOLPH\" , & \"GARRY\" , & \"GEOFFREY\" , & \"JONATHON\" , & \"FELIPE\" , & \"GERARDO\" , & \"ED\" , & \"DOMINIC\" , & \"DELBERT\" , & \"COLIN\" , & \"GUILLERMO\" , & \"EARNEST\" , & \"LUCAS\" , & \"BENNY\" , & \"SPENCER\" , & \"RODOLFO\" , & \"MYRON\" , & \"EDMUND\" , & \"GARRETT\" , & \"SALVATORE\" , & \"CEDRIC\" , & \"LOWELL\" , & \"GREGG\" , & \"SHERMAN\" , & \"WILSON\" , & \"SYLVESTER\" , & \"ROOSEVELT\" , & \"ISRAEL\" , & \"JERMAINE\" , & \"FORREST\" , & \"WILBERT\" , & \"LELAND\" , & \"SIMON\" , & \"CLARK\" , & \"IRVING\" , & \"BRYANT\" , & \"OWEN\" , & \"RUFUS\" , & \"WOODROW\" , & \"KRISTOPHER\" , & \"MACK\" , & \"LEVI\" , & \"MARCOS\" , & \"GUSTAVO\" , & \"JAKE\" , & \"LIONEL\" , & \"GILBERTO\" , & \"CLINT\" , & \"NICOLAS\" , & \"ISMAEL\" , & \"ORVILLE\" , & \"ERVIN\" , & \"DEWEY\" , & \"AL\" , & \"WILFRED\" , & \"JOSH\" , & \"HUGO\" , & \"IGNACIO\" , & \"CALEB\" , & \"TOMAS\" , & \"SHELDON\" , & \"ERICK\" , & \"STEWART\" , & \"DOYLE\" , & \"DARREL\" , & \"ROGELIO\" , & \"TERENCE\" , & \"SANTIAGO\" , & \"ALONZO\" , & \"ELIAS\" , & \"BERT\" , & \"ELBERT\" , & \"RAMIRO\" , & \"CONRAD\" , & \"NOAH\" , & \"GRADY\" , & \"PHIL\" , & \"CORNELIUS\" , & \"LAMAR\" , & \"ROLANDO\" , & \"CLAY\" , & \"PERCY\" , & \"DEXTER\" , & \"BRADFORD\" , & \"DARIN\" , & \"AMOS\" , & \"MOSES\" , & \"IRVIN\" , & \"SAUL\" , & \"ROMAN\" , & \"RANDAL\" , & \"TIMMY\" , & \"DARRIN\" , & \"WINSTON\" , & \"BRENDAN\" , & \"ABEL\" , & \"DOMINICK\" , & \"BOYD\" , & \"EMILIO\" , & \"ELIJAH\" , & \"DOMINGO\" , & \"EMMETT\" , & \"MARLON\" , & \"EMANUEL\" , & \"JERALD\" , & \"EDMOND\" , & \"EMIL\" , & \"DEWAYNE\" , & \"WILL\" , & \"OTTO\" , & \"TEDDY\" , & \"REYNALDO\" , & \"BRET\" , & \"JESS\" , & \"TRENT\" , & \"HUMBERTO\" , & \"EMMANUEL\" , & \"STEPHAN\" , & \"VICENTE\" , & \"LAMONT\" , & \"GARLAND\" , & \"MILES\" , & \"EFRAIN\" , & \"HEATH\" , & \"RODGER\" , & \"HARLEY\" , & \"ETHAN\" , & \"ELDON\" , & \"ROCKY\" , & \"PIERRE\" , & \"JUNIOR\" , & \"FREDDY\" , & \"ELI\" , & \"BRYCE\" , & \"ANTOINE\" , & \"STERLING\" , & \"CHASE\" , & \"GROVER\" , & \"ELTON\" , & \"CLEVELAND\" , & \"DYLAN\" , & \"CHUCK\" , & \"DAMIAN\" , & \"REUBEN\" , & \"STAN\" , & \"AUGUST\" , & \"LEONARDO\" , & \"JASPER\" , & \"RUSSEL\" , & \"ERWIN\" , & \"BENITO\" , & \"HANS\" , & \"MONTE\" , & \"BLAINE\" , & \"ERNIE\" , & \"CURT\" , & \"QUENTIN\" , & \"AGUSTIN\" , & \"MURRAY\" , & \"JAMAL\" , & \"ADOLFO\" , & \"HARRISON\" , & \"TYSON\" , & \"BURTON\" , & \"BRADY\" , & \"ELLIOTT\" , & \"WILFREDO\" , & \"BART\" , & \"JARROD\" , & \"VANCE\" , & \"DENIS\" , & \"DAMIEN\" , & \"JOAQUIN\" , & \"HARLAN\" , & \"DESMOND\" , & \"ELLIOT\" , & \"DARWIN\" , & \"GREGORIO\" , & \"BUDDY\" , & \"XAVIER\" , & \"KERMIT\" , & \"ROSCOE\" , & \"ESTEBAN\" , & \"ANTON\" , & \"SOLOMON\" , & \"SCOTTY\" , & \"NORBERT\" , & \"ELVIN\" , & \"WILLIAMS\" , & \"NOLAN\" , & \"ROD\" , & \"QUINTON\" , & \"HAL\" , & \"BRAIN\" , & \"ROB\" , & \"ELWOOD\" , & \"KENDRICK\" , & \"DARIUS\" , & \"MOISES\" , & \"FIDEL\" , & \"THADDEUS\" , & \"CLIFF\" , & \"MARCEL\" , & \"JACKSON\" , & \"RAPHAEL\" , & \"BRYON\" , & \"ARMAND\" , & \"ALVARO\" , & \"JEFFRY\" , & \"DANE\" , & \"JOESPH\" , & \"THURMAN\" , & \"NED\" , & \"RUSTY\" , & \"MONTY\" , & \"FABIAN\" , & \"REGGIE\" , & \"MASON\" , & \"GRAHAM\" , & \"ISAIAH\" , & \"VAUGHN\" , & \"GUS\" , & \"LOYD\" , & \"DIEGO\" , & \"ADOLPH\" , & \"NORRIS\" , & \"MILLARD\" , & \"ROCCO\" , & \"GONZALO\" , & \"DERICK\" , & \"RODRIGO\" , & \"WILEY\" , & \"RIGOBERTO\" , & \"ALPHONSO\" , & \"TY\" , & \"NOE\" , & \"VERN\" , & \"REED\" , & \"JEFFERSON\" , & \"ELVIS\" , & \"BERNARDO\" , & \"MAURICIO\" , & \"HIRAM\" , & \"DONOVAN\" , & \"BASIL\" , & \"RILEY\" , & \"NICKOLAS\" , & \"MAYNARD\" , & \"SCOT\" , & \"VINCE\" , & \"QUINCY\" , & \"EDDY\" , & \"SEBASTIAN\" , & \"FEDERICO\" , & \"ULYSSES\" , & \"HERIBERTO\" , & \"DONNELL\" , & \"COLE\" , & \"DAVIS\" , & \"GAVIN\" , & \"EMERY\" , & \"WARD\" , & \"ROMEO\" , & \"JAYSON\" , & \"DANTE\" , & \"CLEMENT\" , & \"COY\" , & \"MAXWELL\" , & \"JARVIS\" , & \"BRUNO\" , & \"ISSAC\" , & \"DUDLEY\" , & \"BROCK\" , & \"SANFORD\" , & \"CARMELO\" , & \"BARNEY\" , & \"NESTOR\" , & \"STEFAN\" , & \"DONNY\" , & \"ART\" , & \"LINWOOD\" , & \"BEAU\" , & \"WELDON\" , & \"GALEN\" , & \"ISIDRO\" , & \"TRUMAN\" , & \"DELMAR\" , & \"JOHNATHON\" , & \"SILAS\" , & \"FREDERIC\" , & \"DICK\" , & \"IRWIN\" , & \"MERLIN\" , & \"CHARLEY\" , & \"MARCELINO\" , & \"HARRIS\" , & \"CARLO\" , & \"TRENTON\" , & \"KURTIS\" , & \"HUNTER\" , & \"AURELIO\" , & \"WINFRED\" , & \"VITO\" , & \"COLLIN\" , & \"DENVER\" , & \"CARTER\" , & \"LEONEL\" , & \"EMORY\" , & \"PASQUALE\" , & \"MOHAMMAD\" , & \"MARIANO\" , & \"DANIAL\" , & \"LANDON\" , & \"DIRK\" , & \"BRANDEN\" , & \"ADAN\" , & \"BUFORD\" , & \"GERMAN\" , & \"WILMER\" , & \"EMERSON\" , & \"ZACHERY\" , & \"FLETCHER\" , & \"JACQUES\" , & \"ERROL\" , & \"DALTON\" , & \"MONROE\" , & \"JOSUE\" , & \"EDWARDO\" , & \"BOOKER\" , & \"WILFORD\" , & \"SONNY\" , & \"SHELTON\" , & \"CARSON\" , & \"THERON\" , & \"RAYMUNDO\" , & \"DAREN\" , & \"HOUSTON\" , & \"ROBBY\" , & \"LINCOLN\" , & \"GENARO\" , & \"BENNETT\" , & \"OCTAVIO\" , & \"CORNELL\" , & \"HUNG\" , & \"ARRON\" , & \"ANTONY\" , & \"HERSCHEL\" , & \"GIOVANNI\" , & \"GARTH\" , & \"CYRUS\" , & \"CYRIL\" , & \"RONNY\" , & \"LON\" , & \"FREEMAN\" , & \"DUNCAN\" , & \"KENNITH\" , & \"CARMINE\" , & \"ERICH\" , & \"CHADWICK\" , & \"WILBURN\" , & \"RUSS\" , & \"REID\" , & \"MYLES\" , & \"ANDERSON\" , & \"MORTON\" , & \"JONAS\" , & \"FOREST\" , & \"MITCHEL\" , & \"MERVIN\" , & \"ZANE\" , & \"RICH\" , & \"JAMEL\" , & \"LAZARO\" , & \"ALPHONSE\" , & \"RANDELL\" , & \"MAJOR\" , & \"JARRETT\" , & \"BROOKS\" , & \"ABDUL\" , & \"LUCIANO\" , & \"SEYMOUR\" , & \"EUGENIO\" , & \"MOHAMMED\" , & \"VALENTIN\" , & \"CHANCE\" , & \"ARNULFO\" , & \"LUCIEN\" , & \"FERDINAND\" , & \"THAD\" , & \"EZRA\" , & \"ALDO\" , & \"RUBIN\" , & \"ROYAL\" , & \"MITCH\" , & \"EARLE\" , & \"ABE\" , & \"WYATT\" , & \"MARQUIS\" , & \"LANNY\" , & \"KAREEM\" , & \"JAMAR\" , & \"BORIS\" , & \"ISIAH\" , & \"EMILE\" , & \"ELMO\" , & \"ARON\" , & \"LEOPOLDO\" , & \"EVERETTE\" , & \"JOSEF\" , & \"ELOY\" , & \"RODRICK\" , & \"REINALDO\" , & \"LUCIO\" , & \"JERROD\" , & \"WESTON\" , & \"HERSHEL\" , & \"BARTON\" , & \"PARKER\" , & \"LEMUEL\" , & \"BURT\" , & \"JULES\" , & \"GIL\" , & \"ELISEO\" , & \"AHMAD\" , & \"NIGEL\" , & \"EFREN\" , & \"ANTWAN\" , & \"ALDEN\" , & \"MARGARITO\" , & \"COLEMAN\" , & \"DINO\" , & \"OSVALDO\" , & \"LES\" , & \"DEANDRE\" , & \"NORMAND\" , & \"KIETH\" , & \"TREY\" , & \"NORBERTO\" , & \"NAPOLEON\" , & \"JEROLD\" , & \"FRITZ\" , & \"ROSENDO\" , & \"MILFORD\" , & \"CHRISTOPER\" , & \"ALFONZO\" , & \"LYMAN\" , & \"JOSIAH\" , & \"BRANT\" , & \"WILTON\" , & \"RICO\" , & \"JAMAAL\" , & \"DEWITT\" , & \"BRENTON\" , & \"OLIN\" , & \"FOSTER\" , & \"FAUSTINO\" , & \"CLAUDIO\" , & \"JUDSON\" , & \"GINO\" , & \"EDGARDO\" , & \"ALEC\" , & \"TANNER\" , & \"JARRED\" , & \"DONN\" , & \"TAD\" , & \"PRINCE\" , & \"PORFIRIO\" , & \"ODIS\" , & \"LENARD\" , & \"CHAUNCEY\" , & \"TOD\" , & \"MEL\" , & \"MARCELO\" , & \"KORY\" , & \"AUGUSTUS\" , & \"KEVEN\" , & \"HILARIO\" , & \"BUD\" , & \"SAL\" , & \"ORVAL\" , & \"MAURO\" , & \"ZACHARIAH\" , & \"OLEN\" , & \"ANIBAL\" , & \"MILO\" , & \"JED\" , & \"DILLON\" , & \"AMADO\" , & \"NEWTON\" , & \"LENNY\" , & \"RICHIE\" , & \"HORACIO\" , & \"BRICE\" , & \"MOHAMED\" , & \"DELMER\" , & \"DARIO\" , & \"REYES\" , & \"MAC\" , & \"JONAH\" , & \"JERROLD\" , & \"ROBT\" , & \"HANK\" , & \"RUPERT\" , & \"ROLLAND\" , & \"KENTON\" , & \"DAMION\" , & \"ANTONE\" , & \"WALDO\" , & \"FREDRIC\" , & \"BRADLY\" , & \"KIP\" , & \"BURL\" , & \"WALKER\" , & \"TYREE\" , & \"JEFFEREY\" , & \"AHMED\" , & \"WILLY\" , & \"STANFORD\" , & \"OREN\" , & \"NOBLE\" , & \"MOSHE\" , & \"MIKEL\" , & \"ENOCH\" , & \"BRENDON\" , & \"QUINTIN\" , & \"JAMISON\" , & \"FLORENCIO\" , & \"DARRICK\" , & \"TOBIAS\" , & \"HASSAN\" , & \"GIUSEPPE\" , & \"DEMARCUS\" , & \"CLETUS\" , & \"TYRELL\" , & \"LYNDON\" , & \"KEENAN\" , & \"WERNER\" , & \"GERALDO\" , & \"COLUMBUS\" , & \"CHET\" , & \"BERTRAM\" , & \"MARKUS\" , & \"HUEY\" , & \"HILTON\" , & \"DWAIN\" , & \"DONTE\" , & \"TYRON\" , & \"OMER\" , & \"ISAIAS\" , & \"HIPOLITO\" , & \"FERMIN\" , & \"ADALBERTO\" , & \"BO\" , & \"BARRETT\" , & \"TEODORO\" , & \"MCKINLEY\" , & \"MAXIMO\" , & \"GARFIELD\" , & \"RALEIGH\" , & \"LAWERENCE\" , & \"ABRAM\" , & \"RASHAD\" , & \"KING\" , & \"EMMITT\" , & \"DARON\" , & \"SAMUAL\" , & \"MIQUEL\" , & \"EUSEBIO\" , & \"DOMENIC\" , & \"DARRON\" , & \"BUSTER\" , & \"WILBER\" , & \"RENATO\" , & \"JC\" , & \"HOYT\" , & \"HAYWOOD\" , & \"EZEKIEL\" , & \"CHAS\" , & \"FLORENTINO\" , & \"ELROY\" , & \"CLEMENTE\" , & \"ARDEN\" , & \"NEVILLE\" , & \"EDISON\" , & \"DESHAWN\" , & \"NATHANIAL\" , & \"JORDON\" , & \"DANILO\" , & \"CLAUD\" , & \"SHERWOOD\" , & \"RAYMON\" , & \"RAYFORD\" , & \"CRISTOBAL\" , & \"AMBROSE\" , & \"TITUS\" , & \"HYMAN\" , & \"FELTON\" , & \"EZEQUIEL\" , & \"ERASMO\" , & \"STANTON\" , & \"LONNY\" , & \"LEN\" , & \"IKE\" , & \"MILAN\" , & \"LINO\" , & \"JAROD\" , & \"HERB\" , & \"ANDREAS\" , & \"WALTON\" , & \"RHETT\" , & \"PALMER\" , & \"DOUGLASS\" , & \"CORDELL\" , & \"OSWALDO\" , & \"ELLSWORTH\" , & \"VIRGILIO\" , & \"TONEY\" , & \"NATHANAEL\" , & \"DEL\" , & \"BENEDICT\" , & \"MOSE\" , & \"JOHNSON\" , & \"ISREAL\" , & \"GARRET\" , & \"FAUSTO\" , & \"ASA\" , & \"ARLEN\" , & \"ZACK\" , & \"WARNER\" , & \"MODESTO\" , & \"FRANCESCO\" , & \"MANUAL\" , & \"GAYLORD\" , & \"GASTON\" , & \"FILIBERTO\" , & \"DEANGELO\" , & \"MICHALE\" , & \"GRANVILLE\" , & \"WES\" , & \"MALIK\" , & \"ZACKARY\" , & \"TUAN\" , & \"ELDRIDGE\" , & \"CRISTOPHER\" , & \"CORTEZ\" , & \"ANTIONE\" , & \"MALCOM\" , & \"LONG\" , & \"KOREY\" , & \"JOSPEH\" , & \"COLTON\" , & \"WAYLON\" , & \"VON\" , & \"HOSEA\" , & \"SHAD\" , & \"SANTO\" , & \"RUDOLF\" , & \"ROLF\" , & \"REY\" , & \"RENALDO\" , & \"MARCELLUS\" , & \"LUCIUS\" , & \"KRISTOFER\" , & \"BOYCE\" , & \"BENTON\" , & \"HAYDEN\" , & \"HARLAND\" , & \"ARNOLDO\" , & \"RUEBEN\" , & \"LEANDRO\" , & \"KRAIG\" , & \"JERRELL\" , & \"JEROMY\" , & \"HOBERT\" , & \"CEDRICK\" , & \"ARLIE\" , & \"WINFORD\" , & \"WALLY\" , & \"LUIGI\" , & \"KENETH\" , & \"JACINTO\" , & \"GRAIG\" , & \"FRANKLYN\" , & \"EDMUNDO\" , & \"SID\" , & \"PORTER\" , & \"LEIF\" , & \"JERAMY\" , & \"BUCK\" , & \"WILLIAN\" , & \"VINCENZO\" , & \"SHON\" , & \"LYNWOOD\" , & \"JERE\" , & \"HAI\" , & \"ELDEN\" , & \"DORSEY\" , & \"DARELL\" , & \"BRODERICK\" , & \"ALONSO\" ] end subroutine get_euler_data_0022 subroutine get_euler_data_0042 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 50 ) :: & \"A\" , & \"ABILITY\" , & \"ABLE\" , & \"ABOUT\" , & \"ABOVE\" , & \"ABSENCE\" , & \"ABSOLUTELY\" , & \"ACADEMIC\" , & \"ACCEPT\" , & \"ACCESS\" , & \"ACCIDENT\" , & \"ACCOMPANY\" , & \"ACCORDING\" , & \"ACCOUNT\" , & \"ACHIEVE\" , & \"ACHIEVEMENT\" , & \"ACID\" , & \"ACQUIRE\" , & \"ACROSS\" , & \"ACT\" , & \"ACTION\" , & \"ACTIVE\" , & \"ACTIVITY\" , & \"ACTUAL\" , & \"ACTUALLY\" , & \"ADD\" , & \"ADDITION\" , & \"ADDITIONAL\" , & \"ADDRESS\" , & \"ADMINISTRATION\" , & \"ADMIT\" , & \"ADOPT\" , & \"ADULT\" , & \"ADVANCE\" , & \"ADVANTAGE\" , & \"ADVICE\" , & \"ADVISE\" , & \"AFFAIR\" , & \"AFFECT\" , & \"AFFORD\" , & \"AFRAID\" , & \"AFTER\" , & \"AFTERNOON\" , & \"AFTERWARDS\" , & \"AGAIN\" , & \"AGAINST\" , & \"AGE\" , & \"AGENCY\" , & \"AGENT\" , & \"AGO\" , & \"AGREE\" , & \"AGREEMENT\" , & \"AHEAD\" , & \"AID\" , & \"AIM\" , & \"AIR\" , & \"AIRCRAFT\" , & \"ALL\" , & \"ALLOW\" , & \"ALMOST\" , & \"ALONE\" , & \"ALONG\" , & \"ALREADY\" , & \"ALRIGHT\" , & \"ALSO\" , & \"ALTERNATIVE\" , & \"ALTHOUGH\" , & \"ALWAYS\" , & \"AMONG\" , & \"AMONGST\" , & \"AMOUNT\" , & \"AN\" , & \"ANALYSIS\" , & \"ANCIENT\" , & \"AND\" , & \"ANIMAL\" , & \"ANNOUNCE\" , & \"ANNUAL\" , & \"ANOTHER\" , & \"ANSWER\" , & \"ANY\" , & \"ANYBODY\" , & \"ANYONE\" , & \"ANYTHING\" , & \"ANYWAY\" , & \"APART\" , & \"APPARENT\" , & \"APPARENTLY\" , & \"APPEAL\" , & \"APPEAR\" , & \"APPEARANCE\" , & \"APPLICATION\" , & \"APPLY\" , & \"APPOINT\" , & \"APPOINTMENT\" , & \"APPROACH\" , & \"APPROPRIATE\" , & \"APPROVE\" , & \"AREA\" , & \"ARGUE\" , & \"ARGUMENT\" , & \"ARISE\" , & \"ARM\" , & \"ARMY\" , & \"AROUND\" , & \"ARRANGE\" , & \"ARRANGEMENT\" , & \"ARRIVE\" , & \"ART\" , & \"ARTICLE\" , & \"ARTIST\" , & \"AS\" , & \"ASK\" , & \"ASPECT\" , & \"ASSEMBLY\" , & \"ASSESS\" , & \"ASSESSMENT\" , & \"ASSET\" , & \"ASSOCIATE\" , & \"ASSOCIATION\" , & \"ASSUME\" , & \"ASSUMPTION\" , & \"AT\" , & \"ATMOSPHERE\" , & \"ATTACH\" , & \"ATTACK\" , & \"ATTEMPT\" , & \"ATTEND\" , & \"ATTENTION\" , & \"ATTITUDE\" , & \"ATTRACT\" , & \"ATTRACTIVE\" , & \"AUDIENCE\" , & \"AUTHOR\" , & \"AUTHORITY\" , & \"AVAILABLE\" , & \"AVERAGE\" , & \"AVOID\" , & \"AWARD\" , & \"AWARE\" , & \"AWAY\" , & \"AYE\" , & \"BABY\" , & \"BACK\" , & \"BACKGROUND\" , & \"BAD\" , & \"BAG\" , & \"BALANCE\" , & \"BALL\" , & \"BAND\" , & \"BANK\" , & \"BAR\" , & \"BASE\" , & \"BASIC\" , & \"BASIS\" , & \"BATTLE\" , & \"BE\" , & \"BEAR\" , & \"BEAT\" , & \"BEAUTIFUL\" , & \"BECAUSE\" , & \"BECOME\" , & \"BED\" , & \"BEDROOM\" , & \"BEFORE\" , & \"BEGIN\" , & \"BEGINNING\" , & \"BEHAVIOUR\" , & \"BEHIND\" , & \"BELIEF\" , & \"BELIEVE\" , & \"BELONG\" , & \"BELOW\" , & \"BENEATH\" , & \"BENEFIT\" , & \"BESIDE\" , & \"BEST\" , & \"BETTER\" , & \"BETWEEN\" , & \"BEYOND\" , & \"BIG\" , & \"BILL\" , & \"BIND\" , & \"BIRD\" , & \"BIRTH\" , & \"BIT\" , & \"BLACK\" , & \"BLOCK\" , & \"BLOOD\" , & \"BLOODY\" , & \"BLOW\" , & \"BLUE\" , & \"BOARD\" , & \"BOAT\" , & \"BODY\" , & \"BONE\" , & \"BOOK\" , & \"BORDER\" , & \"BOTH\" , & \"BOTTLE\" , & \"BOTTOM\" , & \"BOX\" , & \"BOY\" , & \"BRAIN\" , & \"BRANCH\" , & \"BREAK\" , & \"BREATH\" , & \"BRIDGE\" , & \"BRIEF\" , & \"BRIGHT\" , & \"BRING\" , & \"BROAD\" , & \"BROTHER\" , & \"BUDGET\" , & \"BUILD\" , & \"BUILDING\" , & \"BURN\" , & \"BUS\" , & \"BUSINESS\" , & \"BUSY\" , & \"BUT\" , & \"BUY\" , & \"BY\" , & \"CABINET\" , & \"CALL\" , & \"CAMPAIGN\" , & \"CAN\" , & \"CANDIDATE\" , & \"CAPABLE\" , & \"CAPACITY\" , & \"CAPITAL\" , & \"CAR\" , & \"CARD\" , & \"CARE\" , & \"CAREER\" , & \"CAREFUL\" , & \"CAREFULLY\" , & \"CARRY\" , & \"CASE\" , & \"CASH\" , & \"CAT\" , & \"CATCH\" , & \"CATEGORY\" , & \"CAUSE\" , & \"CELL\" , & \"CENTRAL\" , & \"CENTRE\" , & \"CENTURY\" , & \"CERTAIN\" , & \"CERTAINLY\" , & \"CHAIN\" , & \"CHAIR\" , & \"CHAIRMAN\" , & \"CHALLENGE\" , & \"CHANCE\" , & \"CHANGE\" , & \"CHANNEL\" , & \"CHAPTER\" , & \"CHARACTER\" , & \"CHARACTERISTIC\" , & \"CHARGE\" , & \"CHEAP\" , & \"CHECK\" , & \"CHEMICAL\" , & \"CHIEF\" , & \"CHILD\" , & \"CHOICE\" , & \"CHOOSE\" , & \"CHURCH\" , & \"CIRCLE\" , & \"CIRCUMSTANCE\" , & \"CITIZEN\" , & \"CITY\" , & \"CIVIL\" , & \"CLAIM\" , & \"CLASS\" , & \"CLEAN\" , & \"CLEAR\" , & \"CLEARLY\" , & \"CLIENT\" , & \"CLIMB\" , & \"CLOSE\" , & \"CLOSELY\" , & \"CLOTHES\" , & \"CLUB\" , & \"COAL\" , & \"CODE\" , & \"COFFEE\" , & \"COLD\" , & \"COLLEAGUE\" , & \"COLLECT\" , & \"COLLECTION\" , & \"COLLEGE\" , & \"COLOUR\" , & \"COMBINATION\" , & \"COMBINE\" , & \"COME\" , & \"COMMENT\" , & \"COMMERCIAL\" , & \"COMMISSION\" , & \"COMMIT\" , & \"COMMITMENT\" , & \"COMMITTEE\" , & \"COMMON\" , & \"COMMUNICATION\" , & \"COMMUNITY\" , & \"COMPANY\" , & \"COMPARE\" , & \"COMPARISON\" , & \"COMPETITION\" , & \"COMPLETE\" , & \"COMPLETELY\" , & \"COMPLEX\" , & \"COMPONENT\" , & \"COMPUTER\" , & \"CONCENTRATE\" , & \"CONCENTRATION\" , & \"CONCEPT\" , & \"CONCERN\" , & \"CONCERNED\" , & \"CONCLUDE\" , & \"CONCLUSION\" , & \"CONDITION\" , & \"CONDUCT\" , & \"CONFERENCE\" , & \"CONFIDENCE\" , & \"CONFIRM\" , & \"CONFLICT\" , & \"CONGRESS\" , & \"CONNECT\" , & \"CONNECTION\" , & \"CONSEQUENCE\" , & \"CONSERVATIVE\" , & \"CONSIDER\" , & \"CONSIDERABLE\" , & \"CONSIDERATION\" , & \"CONSIST\" , & \"CONSTANT\" , & \"CONSTRUCTION\" , & \"CONSUMER\" , & \"CONTACT\" , & \"CONTAIN\" , & \"CONTENT\" , & \"CONTEXT\" , & \"CONTINUE\" , & \"CONTRACT\" , & \"CONTRAST\" , & \"CONTRIBUTE\" , & \"CONTRIBUTION\" , & \"CONTROL\" , & \"CONVENTION\" , & \"CONVERSATION\" , & \"COPY\" , & \"CORNER\" , & \"CORPORATE\" , & \"CORRECT\" , & \"COS\" , & \"COST\" , & \"COULD\" , & \"COUNCIL\" , & \"COUNT\" , & \"COUNTRY\" , & \"COUNTY\" , & \"COUPLE\" , & \"COURSE\" , & \"COURT\" , & \"COVER\" , & \"CREATE\" , & \"CREATION\" , & \"CREDIT\" , & \"CRIME\" , & \"CRIMINAL\" , & \"CRISIS\" , & \"CRITERION\" , & \"CRITICAL\" , & \"CRITICISM\" , & \"CROSS\" , & \"CROWD\" , & \"CRY\" , & \"CULTURAL\" , & \"CULTURE\" , & \"CUP\" , & \"CURRENT\" , & \"CURRENTLY\" , & \"CURRICULUM\" , & \"CUSTOMER\" , & \"CUT\" , & \"DAMAGE\" , & \"DANGER\" , & \"DANGEROUS\" , & \"DARK\" , & \"DATA\" , & \"DATE\" , & \"DAUGHTER\" , & \"DAY\" , & \"DEAD\" , & \"DEAL\" , & \"DEATH\" , & \"DEBATE\" , & \"DEBT\" , & \"DECADE\" , & \"DECIDE\" , & \"DECISION\" , & \"DECLARE\" , & \"DEEP\" , & \"DEFENCE\" , & \"DEFENDANT\" , & \"DEFINE\" , & \"DEFINITION\" , & \"DEGREE\" , & \"DELIVER\" , & \"DEMAND\" , & \"DEMOCRATIC\" , & \"DEMONSTRATE\" , & \"DENY\" , & \"DEPARTMENT\" , & \"DEPEND\" , & \"DEPUTY\" , & \"DERIVE\" , & \"DESCRIBE\" , & \"DESCRIPTION\" , & \"DESIGN\" , & \"DESIRE\" , & \"DESK\" , & \"DESPITE\" , & \"DESTROY\" , & \"DETAIL\" , & \"DETAILED\" , & \"DETERMINE\" , & \"DEVELOP\" , & \"DEVELOPMENT\" , & \"DEVICE\" , & \"DIE\" , & \"DIFFERENCE\" , & \"DIFFERENT\" , & \"DIFFICULT\" , & \"DIFFICULTY\" , & \"DINNER\" , & \"DIRECT\" , & \"DIRECTION\" , & \"DIRECTLY\" , & \"DIRECTOR\" , & \"DISAPPEAR\" , & \"DISCIPLINE\" , & \"DISCOVER\" , & \"DISCUSS\" , & \"DISCUSSION\" , & \"DISEASE\" , & \"DISPLAY\" , & \"DISTANCE\" , & \"DISTINCTION\" , & \"DISTRIBUTION\" , & \"DISTRICT\" , & \"DIVIDE\" , & \"DIVISION\" , & \"DO\" , & \"DOCTOR\" , & \"DOCUMENT\" , & \"DOG\" , & \"DOMESTIC\" , & \"DOOR\" , & \"DOUBLE\" , & \"DOUBT\" , & \"DOWN\" , & \"DRAW\" , & \"DRAWING\" , & \"DREAM\" , & \"DRESS\" , & \"DRINK\" , & \"DRIVE\" , & \"DRIVER\" , & \"DROP\" , & \"DRUG\" , & \"DRY\" , & \"DUE\" , & \"DURING\" , & \"DUTY\" , & \"EACH\" , & \"EAR\" , & \"EARLY\" , & \"EARN\" , & \"EARTH\" , & \"EASILY\" , & \"EAST\" , & \"EASY\" , & \"EAT\" , & \"ECONOMIC\" , & \"ECONOMY\" , & \"EDGE\" , & \"EDITOR\" , & \"EDUCATION\" , & \"EDUCATIONAL\" , & \"EFFECT\" , & \"EFFECTIVE\" , & \"EFFECTIVELY\" , & \"EFFORT\" , & \"EGG\" , & \"EITHER\" , & \"ELDERLY\" , & \"ELECTION\" , & \"ELEMENT\" , & \"ELSE\" , & \"ELSEWHERE\" , & \"EMERGE\" , & \"EMPHASIS\" , & \"EMPLOY\" , & \"EMPLOYEE\" , & \"EMPLOYER\" , & \"EMPLOYMENT\" , & \"EMPTY\" , & \"ENABLE\" , & \"ENCOURAGE\" , & \"END\" , & \"ENEMY\" , & \"ENERGY\" , & \"ENGINE\" , & \"ENGINEERING\" , & \"ENJOY\" , & \"ENOUGH\" , & \"ENSURE\" , & \"ENTER\" , & \"ENTERPRISE\" , & \"ENTIRE\" , & \"ENTIRELY\" , & \"ENTITLE\" , & \"ENTRY\" , & \"ENVIRONMENT\" , & \"ENVIRONMENTAL\" , & \"EQUAL\" , & \"EQUALLY\" , & \"EQUIPMENT\" , & \"ERROR\" , & \"ESCAPE\" , & \"ESPECIALLY\" , & \"ESSENTIAL\" , & \"ESTABLISH\" , & \"ESTABLISHMENT\" , & \"ESTATE\" , & \"ESTIMATE\" , & \"EVEN\" , & \"EVENING\" , & \"EVENT\" , & \"EVENTUALLY\" , & \"EVER\" , & \"EVERY\" , & \"EVERYBODY\" , & \"EVERYONE\" , & \"EVERYTHING\" , & \"EVIDENCE\" , & \"EXACTLY\" , & \"EXAMINATION\" , & \"EXAMINE\" , & \"EXAMPLE\" , & \"EXCELLENT\" , & \"EXCEPT\" , & \"EXCHANGE\" , & \"EXECUTIVE\" , & \"EXERCISE\" , & \"EXHIBITION\" , & \"EXIST\" , & \"EXISTENCE\" , & \"EXISTING\" , & \"EXPECT\" , & \"EXPECTATION\" , & \"EXPENDITURE\" , & \"EXPENSE\" , & \"EXPENSIVE\" , & \"EXPERIENCE\" , & \"EXPERIMENT\" , & \"EXPERT\" , & \"EXPLAIN\" , & \"EXPLANATION\" , & \"EXPLORE\" , & \"EXPRESS\" , & \"EXPRESSION\" , & \"EXTEND\" , & \"EXTENT\" , & \"EXTERNAL\" , & \"EXTRA\" , & \"EXTREMELY\" , & \"EYE\" , & \"FACE\" , & \"FACILITY\" , & \"FACT\" , & \"FACTOR\" , & \"FACTORY\" , & \"FAIL\" , & \"FAILURE\" , & \"FAIR\" , & \"FAIRLY\" , & \"FAITH\" , & \"FALL\" , & \"FAMILIAR\" , & \"FAMILY\" , & \"FAMOUS\" , & \"FAR\" , & \"FARM\" , & \"FARMER\" , & \"FASHION\" , & \"FAST\" , & \"FATHER\" , & \"FAVOUR\" , & \"FEAR\" , & \"FEATURE\" , & \"FEE\" , & \"FEEL\" , & \"FEELING\" , & \"FEMALE\" , & \"FEW\" , & \"FIELD\" , & \"FIGHT\" , & \"FIGURE\" , & \"FILE\" , & \"FILL\" , & \"FILM\" , & \"FINAL\" , & \"FINALLY\" , & \"FINANCE\" , & \"FINANCIAL\" , & \"FIND\" , & \"FINDING\" , & \"FINE\" , & \"FINGER\" , & \"FINISH\" , & \"FIRE\" , & \"FIRM\" , & \"FIRST\" , & \"FISH\" , & \"FIT\" , & \"FIX\" , & \"FLAT\" , & \"FLIGHT\" , & \"FLOOR\" , & \"FLOW\" , & \"FLOWER\" , & \"FLY\" , & \"FOCUS\" , & \"FOLLOW\" , & \"FOLLOWING\" , & \"FOOD\" , & \"FOOT\" , & \"FOOTBALL\" , & \"FOR\" , & \"FORCE\" , & \"FOREIGN\" , & \"FOREST\" , & \"FORGET\" , & \"FORM\" , & \"FORMAL\" , & \"FORMER\" , & \"FORWARD\" , & \"FOUNDATION\" , & \"FREE\" , & \"FREEDOM\" , & \"FREQUENTLY\" , & \"FRESH\" , & \"FRIEND\" , & \"FROM\" , & \"FRONT\" , & \"FRUIT\" , & \"FUEL\" , & \"FULL\" , & \"FULLY\" , & \"FUNCTION\" , & \"FUND\" , & \"FUNNY\" , & \"FURTHER\" , & \"FUTURE\" , & \"GAIN\" , & \"GAME\" , & \"GARDEN\" , & \"GAS\" , & \"GATE\" , & \"GATHER\" , & \"GENERAL\" , & \"GENERALLY\" , & \"GENERATE\" , & \"GENERATION\" , & \"GENTLEMAN\" , & \"GET\" , & \"GIRL\" , & \"GIVE\" , & \"GLASS\" , & \"GO\" , & \"GOAL\" , & \"GOD\" , & \"GOLD\" , & \"GOOD\" , & \"GOVERNMENT\" , & \"GRANT\" , & \"GREAT\" , & \"GREEN\" , & \"GREY\" , & \"GROUND\" , & \"GROUP\" , & \"GROW\" , & \"GROWING\" , & \"GROWTH\" , & \"GUEST\" , & \"GUIDE\" , & \"GUN\" , & \"HAIR\" , & \"HALF\" , & \"HALL\" , & \"HAND\" , & \"HANDLE\" , & \"HANG\" , & \"HAPPEN\" , & \"HAPPY\" , & \"HARD\" , & \"HARDLY\" , & \"HATE\" , & \"HAVE\" , & \"HE\" , & \"HEAD\" , & \"HEALTH\" , & \"HEAR\" , & \"HEART\" , & \"HEAT\" , & \"HEAVY\" , & \"HELL\" , & \"HELP\" , & \"HENCE\" , & \"HER\" , & \"HERE\" , & \"HERSELF\" , & \"HIDE\" , & \"HIGH\" , & \"HIGHLY\" , & \"HILL\" , & \"HIM\" , & \"HIMSELF\" , & \"HIS\" , & \"HISTORICAL\" , & \"HISTORY\" , & \"HIT\" , & \"HOLD\" , & \"HOLE\" , & \"HOLIDAY\" , & \"HOME\" , & \"HOPE\" , & \"HORSE\" , & \"HOSPITAL\" , & \"HOT\" , & \"HOTEL\" , & \"HOUR\" , & \"HOUSE\" , & \"HOUSEHOLD\" , & \"HOUSING\" , & \"HOW\" , & \"HOWEVER\" , & \"HUGE\" , & \"HUMAN\" , & \"HURT\" , & \"HUSBAND\" , & \"I\" , & \"IDEA\" , & \"IDENTIFY\" , & \"IF\" , & \"IGNORE\" , & \"ILLUSTRATE\" , & \"IMAGE\" , & \"IMAGINE\" , & \"IMMEDIATE\" , & \"IMMEDIATELY\" , & \"IMPACT\" , & \"IMPLICATION\" , & \"IMPLY\" , & \"IMPORTANCE\" , & \"IMPORTANT\" , & \"IMPOSE\" , & \"IMPOSSIBLE\" , & \"IMPRESSION\" , & \"IMPROVE\" , & \"IMPROVEMENT\" , & \"IN\" , & \"INCIDENT\" , & \"INCLUDE\" , & \"INCLUDING\" , & \"INCOME\" , & \"INCREASE\" , & \"INCREASED\" , & \"INCREASINGLY\" , & \"INDEED\" , & \"INDEPENDENT\" , & \"INDEX\" , & \"INDICATE\" , & \"INDIVIDUAL\" , & \"INDUSTRIAL\" , & \"INDUSTRY\" , & \"INFLUENCE\" , & \"INFORM\" , & \"INFORMATION\" , & \"INITIAL\" , & \"INITIATIVE\" , & \"INJURY\" , & \"INSIDE\" , & \"INSIST\" , & \"INSTANCE\" , & \"INSTEAD\" , & \"INSTITUTE\" , & \"INSTITUTION\" , & \"INSTRUCTION\" , & \"INSTRUMENT\" , & \"INSURANCE\" , & \"INTEND\" , & \"INTENTION\" , & \"INTEREST\" , & \"INTERESTED\" , & \"INTERESTING\" , & \"INTERNAL\" , & \"INTERNATIONAL\" , & \"INTERPRETATION\" , & \"INTERVIEW\" , & \"INTO\" , & \"INTRODUCE\" , & \"INTRODUCTION\" , & \"INVESTIGATE\" , & \"INVESTIGATION\" , & \"INVESTMENT\" , & \"INVITE\" , & \"INVOLVE\" , & \"IRON\" , & \"IS\" , & \"ISLAND\" , & \"ISSUE\" , & \"IT\" , & \"ITEM\" , & \"ITS\" , & \"ITSELF\" , & \"JOB\" , & \"JOIN\" , & \"JOINT\" , & \"JOURNEY\" , & \"JUDGE\" , & \"JUMP\" , & \"JUST\" , & \"JUSTICE\" , & \"KEEP\" , & \"KEY\" , & \"KID\" , & \"KILL\" , & \"KIND\" , & \"KING\" , & \"KITCHEN\" , & \"KNEE\" , & \"KNOW\" , & \"KNOWLEDGE\" , & \"LABOUR\" , & \"LACK\" , & \"LADY\" , & \"LAND\" , & \"LANGUAGE\" , & \"LARGE\" , & \"LARGELY\" , & \"LAST\" , & \"LATE\" , & \"LATER\" , & \"LATTER\" , & \"LAUGH\" , & \"LAUNCH\" , & \"LAW\" , & \"LAWYER\" , & \"LAY\" , & \"LEAD\" , & \"LEADER\" , & \"LEADERSHIP\" , & \"LEADING\" , & \"LEAF\" , & \"LEAGUE\" , & \"LEAN\" , & \"LEARN\" , & \"LEAST\" , & \"LEAVE\" , & \"LEFT\" , & \"LEG\" , & \"LEGAL\" , & \"LEGISLATION\" , & \"LENGTH\" , & \"LESS\" , & \"LET\" , & \"LETTER\" , & \"LEVEL\" , & \"LIABILITY\" , & \"LIBERAL\" , & \"LIBRARY\" , & \"LIE\" , & \"LIFE\" , & \"LIFT\" , & \"LIGHT\" , & \"LIKE\" , & \"LIKELY\" , & \"LIMIT\" , & \"LIMITED\" , & \"LINE\" , & \"LINK\" , & \"LIP\" , & \"LIST\" , & \"LISTEN\" , & \"LITERATURE\" , & \"LITTLE\" , & \"LIVE\" , & \"LIVING\" , & \"LOAN\" , & \"LOCAL\" , & \"LOCATION\" , & \"LONG\" , & \"LOOK\" , & \"LORD\" , & \"LOSE\" , & \"LOSS\" , & \"LOT\" , & \"LOVE\" , & \"LOVELY\" , & \"LOW\" , & \"LUNCH\" , & \"MACHINE\" , & \"MAGAZINE\" , & \"MAIN\" , & \"MAINLY\" , & \"MAINTAIN\" , & \"MAJOR\" , & \"MAJORITY\" , & \"MAKE\" , & \"MALE\" , & \"MAN\" , & \"MANAGE\" , & \"MANAGEMENT\" , & \"MANAGER\" , & \"MANNER\" , & \"MANY\" , & \"MAP\" , & \"MARK\" , & \"MARKET\" , & \"MARRIAGE\" , & \"MARRIED\" , & \"MARRY\" , & \"MASS\" , & \"MASTER\" , & \"MATCH\" , & \"MATERIAL\" , & \"MATTER\" , & \"MAY\" , & \"MAYBE\" , & \"ME\" , & \"MEAL\" , & \"MEAN\" , & \"MEANING\" , & \"MEANS\" , & \"MEANWHILE\" , & \"MEASURE\" , & \"MECHANISM\" , & \"MEDIA\" , & \"MEDICAL\" , & \"MEET\" , & \"MEETING\" , & \"MEMBER\" , & \"MEMBERSHIP\" , & \"MEMORY\" , & \"MENTAL\" , & \"MENTION\" , & \"MERELY\" , & \"MESSAGE\" , & \"METAL\" , & \"METHOD\" , & \"MIDDLE\" , & \"MIGHT\" , & \"MILE\" , & \"MILITARY\" , & \"MILK\" , & \"MIND\" , & \"MINE\" , & \"MINISTER\" , & \"MINISTRY\" , & \"MINUTE\" , & \"MISS\" , & \"MISTAKE\" , & \"MODEL\" , & \"MODERN\" , & \"MODULE\" , & \"MOMENT\" , & \"MONEY\" , & \"MONTH\" , & \"MORE\" , & \"MORNING\" , & \"MOST\" , & \"MOTHER\" , & \"MOTION\" , & \"MOTOR\" , & \"MOUNTAIN\" , & \"MOUTH\" , & \"MOVE\" , & \"MOVEMENT\" , & \"MUCH\" , & \"MURDER\" , & \"MUSEUM\" , & \"MUSIC\" , & \"MUST\" , & \"MY\" , & \"MYSELF\" , & \"NAME\" , & \"NARROW\" , & \"NATION\" , & \"NATIONAL\" , & \"NATURAL\" , & \"NATURE\" , & \"NEAR\" , & \"NEARLY\" , & \"NECESSARILY\" , & \"NECESSARY\" , & \"NECK\" , & \"NEED\" , & \"NEGOTIATION\" , & \"NEIGHBOUR\" , & \"NEITHER\" , & \"NETWORK\" , & \"NEVER\" , & \"NEVERTHELESS\" , & \"NEW\" , & \"NEWS\" , & \"NEWSPAPER\" , & \"NEXT\" , & \"NICE\" , & \"NIGHT\" , & \"NO\" , & \"NOBODY\" , & \"NOD\" , & \"NOISE\" , & \"NONE\" , & \"NOR\" , & \"NORMAL\" , & \"NORMALLY\" , & \"NORTH\" , & \"NORTHERN\" , & \"NOSE\" , & \"NOT\" , & \"NOTE\" , & \"NOTHING\" , & \"NOTICE\" , & \"NOTION\" , & \"NOW\" , & \"NUCLEAR\" , & \"NUMBER\" , & \"NURSE\" , & \"OBJECT\" , & \"OBJECTIVE\" , & \"OBSERVATION\" , & \"OBSERVE\" , & \"OBTAIN\" , & \"OBVIOUS\" , & \"OBVIOUSLY\" , & \"OCCASION\" , & \"OCCUR\" , & \"ODD\" , & \"OF\" , & \"OFF\" , & \"OFFENCE\" , & \"OFFER\" , & \"OFFICE\" , & \"OFFICER\" , & \"OFFICIAL\" , & \"OFTEN\" , & \"OIL\" , & \"OKAY\" , & \"OLD\" , & \"ON\" , & \"ONCE\" , & \"ONE\" , & \"ONLY\" , & \"ONTO\" , & \"OPEN\" , & \"OPERATE\" , & \"OPERATION\" , & \"OPINION\" , & \"OPPORTUNITY\" , & \"OPPOSITION\" , & \"OPTION\" , & \"OR\" , & \"ORDER\" , & \"ORDINARY\" , & \"ORGANISATION\" , & \"ORGANISE\" , & \"ORGANIZATION\" , & \"ORIGIN\" , & \"ORIGINAL\" , & \"OTHER\" , & \"OTHERWISE\" , & \"OUGHT\" , & \"OUR\" , & \"OURSELVES\" , & \"OUT\" , & \"OUTCOME\" , & \"OUTPUT\" , & \"OUTSIDE\" , & \"OVER\" , & \"OVERALL\" , & \"OWN\" , & \"OWNER\" , & \"PACKAGE\" , & \"PAGE\" , & \"PAIN\" , & \"PAINT\" , & \"PAINTING\" , & \"PAIR\" , & \"PANEL\" , & \"PAPER\" , & \"PARENT\" , & \"PARK\" , & \"PARLIAMENT\" , & \"PART\" , & \"PARTICULAR\" , & \"PARTICULARLY\" , & \"PARTLY\" , & \"PARTNER\" , & \"PARTY\" , & \"PASS\" , & \"PASSAGE\" , & \"PAST\" , & \"PATH\" , & \"PATIENT\" , & \"PATTERN\" , & \"PAY\" , & \"PAYMENT\" , & \"PEACE\" , & \"PENSION\" , & \"PEOPLE\" , & \"PER\" , & \"PERCENT\" , & \"PERFECT\" , & \"PERFORM\" , & \"PERFORMANCE\" , & \"PERHAPS\" , & \"PERIOD\" , & \"PERMANENT\" , & \"PERSON\" , & \"PERSONAL\" , & \"PERSUADE\" , & \"PHASE\" , & \"PHONE\" , & \"PHOTOGRAPH\" , & \"PHYSICAL\" , & \"PICK\" , & \"PICTURE\" , & \"PIECE\" , & \"PLACE\" , & \"PLAN\" , & \"PLANNING\" , & \"PLANT\" , & \"PLASTIC\" , & \"PLATE\" , & \"PLAY\" , & \"PLAYER\" , & \"PLEASE\" , & \"PLEASURE\" , & \"PLENTY\" , & \"PLUS\" , & \"POCKET\" , & \"POINT\" , & \"POLICE\" , & \"POLICY\" , & \"POLITICAL\" , & \"POLITICS\" , & \"POOL\" , & \"POOR\" , & \"POPULAR\" , & \"POPULATION\" , & \"POSITION\" , & \"POSITIVE\" , & \"POSSIBILITY\" , & \"POSSIBLE\" , & \"POSSIBLY\" , & \"POST\" , & \"POTENTIAL\" , & \"POUND\" , & \"POWER\" , & \"POWERFUL\" , & \"PRACTICAL\" , & \"PRACTICE\" , & \"PREFER\" , & \"PREPARE\" , & \"PRESENCE\" , & \"PRESENT\" , & \"PRESIDENT\" , & \"PRESS\" , & \"PRESSURE\" , & \"PRETTY\" , & \"PREVENT\" , & \"PREVIOUS\" , & \"PREVIOUSLY\" , & \"PRICE\" , & \"PRIMARY\" , & \"PRIME\" , & \"PRINCIPLE\" , & \"PRIORITY\" , & \"PRISON\" , & \"PRISONER\" , & \"PRIVATE\" , & \"PROBABLY\" , & \"PROBLEM\" , & \"PROCEDURE\" , & \"PROCESS\" , & \"PRODUCE\" , & \"PRODUCT\" , & \"PRODUCTION\" , & \"PROFESSIONAL\" , & \"PROFIT\" , & \"PROGRAM\" , & \"PROGRAMME\" , & \"PROGRESS\" , & \"PROJECT\" , & \"PROMISE\" , & \"PROMOTE\" , & \"PROPER\" , & \"PROPERLY\" , & \"PROPERTY\" , & \"PROPORTION\" , & \"PROPOSE\" , & \"PROPOSAL\" , & \"PROSPECT\" , & \"PROTECT\" , & \"PROTECTION\" , & \"PROVE\" , & \"PROVIDE\" , & \"PROVIDED\" , & \"PROVISION\" , & \"PUB\" , & \"PUBLIC\" , & \"PUBLICATION\" , & \"PUBLISH\" , & \"PULL\" , & \"PUPIL\" , & \"PURPOSE\" , & \"PUSH\" , & \"PUT\" , & \"QUALITY\" , & \"QUARTER\" , & \"QUESTION\" , & \"QUICK\" , & \"QUICKLY\" , & \"QUIET\" , & \"QUITE\" , & \"RACE\" , & \"RADIO\" , & \"RAILWAY\" , & \"RAIN\" , & \"RAISE\" , & \"RANGE\" , & \"RAPIDLY\" , & \"RARE\" , & \"RATE\" , & \"RATHER\" , & \"REACH\" , & \"REACTION\" , & \"READ\" , & \"READER\" , & \"READING\" , & \"READY\" , & \"REAL\" , & \"REALISE\" , & \"REALITY\" , & \"REALIZE\" , & \"REALLY\" , & \"REASON\" , & \"REASONABLE\" , & \"RECALL\" , & \"RECEIVE\" , & \"RECENT\" , & \"RECENTLY\" , & \"RECOGNISE\" , & \"RECOGNITION\" , & \"RECOGNIZE\" , & \"RECOMMEND\" , & \"RECORD\" , & \"RECOVER\" , & \"RED\" , & \"REDUCE\" , & \"REDUCTION\" , & \"REFER\" , & \"REFERENCE\" , & \"REFLECT\" , & \"REFORM\" , & \"REFUSE\" , & \"REGARD\" , & \"REGION\" , & \"REGIONAL\" , & \"REGULAR\" , & \"REGULATION\" , & \"REJECT\" , & \"RELATE\" , & \"RELATION\" , & \"RELATIONSHIP\" , & \"RELATIVE\" , & \"RELATIVELY\" , & \"RELEASE\" , & \"RELEVANT\" , & \"RELIEF\" , & \"RELIGION\" , & \"RELIGIOUS\" , & \"RELY\" , & \"REMAIN\" , & \"REMEMBER\" , & \"REMIND\" , & \"REMOVE\" , & \"REPEAT\" , & \"REPLACE\" , & \"REPLY\" , & \"REPORT\" , & \"REPRESENT\" , & \"REPRESENTATION\" , & \"REPRESENTATIVE\" , & \"REQUEST\" , & \"REQUIRE\" , & \"REQUIREMENT\" , & \"RESEARCH\" , & \"RESOURCE\" , & \"RESPECT\" , & \"RESPOND\" , & \"RESPONSE\" , & \"RESPONSIBILITY\" , & \"RESPONSIBLE\" , & \"REST\" , & \"RESTAURANT\" , & \"RESULT\" , & \"RETAIN\" , & \"RETURN\" , & \"REVEAL\" , & \"REVENUE\" , & \"REVIEW\" , & \"REVOLUTION\" , & \"RICH\" , & \"RIDE\" , & \"RIGHT\" , & \"RING\" , & \"RISE\" , & \"RISK\" , & \"RIVER\" , & \"ROAD\" , & \"ROCK\" , & \"ROLE\" , & \"ROLL\" , & \"ROOF\" , & \"ROOM\" , & \"ROUND\" , & \"ROUTE\" , & \"ROW\" , & \"ROYAL\" , & \"RULE\" , & \"RUN\" , & \"RURAL\" , & \"SAFE\" , & \"SAFETY\" , & \"SALE\" , & \"SAME\" , & \"SAMPLE\" , & \"SATISFY\" , & \"SAVE\" , & \"SAY\" , & \"SCALE\" , & \"SCENE\" , & \"SCHEME\" , & \"SCHOOL\" , & \"SCIENCE\" , & \"SCIENTIFIC\" , & \"SCIENTIST\" , & \"SCORE\" , & \"SCREEN\" , & \"SEA\" , & \"SEARCH\" , & \"SEASON\" , & \"SEAT\" , & \"SECOND\" , & \"SECONDARY\" , & \"SECRETARY\" , & \"SECTION\" , & \"SECTOR\" , & \"SECURE\" , & \"SECURITY\" , & \"SEE\" , & \"SEEK\" , & \"SEEM\" , & \"SELECT\" , & \"SELECTION\" , & \"SELL\" , & \"SEND\" , & \"SENIOR\" , & \"SENSE\" , & \"SENTENCE\" , & \"SEPARATE\" , & \"SEQUENCE\" , & \"SERIES\" , & \"SERIOUS\" , & \"SERIOUSLY\" , & \"SERVANT\" , & \"SERVE\" , & \"SERVICE\" , & \"SESSION\" , & \"SET\" , & \"SETTLE\" , & \"SETTLEMENT\" , & \"SEVERAL\" , & \"SEVERE\" , & \"SEX\" , & \"SEXUAL\" , & \"SHAKE\" , & \"SHALL\" , & \"SHAPE\" , & \"SHARE\" , & \"SHE\" , & \"SHEET\" , & \"SHIP\" , & \"SHOE\" , & \"SHOOT\" , & \"SHOP\" , & \"SHORT\" , & \"SHOT\" , & \"SHOULD\" , & \"SHOULDER\" , & \"SHOUT\" , & \"SHOW\" , & \"SHUT\" , & \"SIDE\" , & \"SIGHT\" , & \"SIGN\" , & \"SIGNAL\" , & \"SIGNIFICANCE\" , & \"SIGNIFICANT\" , & \"SILENCE\" , & \"SIMILAR\" , & \"SIMPLE\" , & \"SIMPLY\" , & \"SINCE\" , & \"SING\" , & \"SINGLE\" , & \"SIR\" , & \"SISTER\" , & \"SIT\" , & \"SITE\" , & \"SITUATION\" , & \"SIZE\" , & \"SKILL\" , & \"SKIN\" , & \"SKY\" , & \"SLEEP\" , & \"SLIGHTLY\" , & \"SLIP\" , & \"SLOW\" , & \"SLOWLY\" , & \"SMALL\" , & \"SMILE\" , & \"SO\" , & \"SOCIAL\" , & \"SOCIETY\" , & \"SOFT\" , & \"SOFTWARE\" , & \"SOIL\" , & \"SOLDIER\" , & \"SOLICITOR\" , & \"SOLUTION\" , & \"SOME\" , & \"SOMEBODY\" , & \"SOMEONE\" , & \"SOMETHING\" , & \"SOMETIMES\" , & \"SOMEWHAT\" , & \"SOMEWHERE\" , & \"SON\" , & \"SONG\" , & \"SOON\" , & \"SORRY\" , & \"SORT\" , & \"SOUND\" , & \"SOURCE\" , & \"SOUTH\" , & \"SOUTHERN\" , & \"SPACE\" , & \"SPEAK\" , & \"SPEAKER\" , & \"SPECIAL\" , & \"SPECIES\" , & \"SPECIFIC\" , & \"SPEECH\" , & \"SPEED\" , & \"SPEND\" , & \"SPIRIT\" , & \"SPORT\" , & \"SPOT\" , & \"SPREAD\" , & \"SPRING\" , & \"STAFF\" , & \"STAGE\" , & \"STAND\" , & \"STANDARD\" , & \"STAR\" , & \"START\" , & \"STATE\" , & \"STATEMENT\" , & \"STATION\" , & \"STATUS\" , & \"STAY\" , & \"STEAL\" , & \"STEP\" , & \"STICK\" , & \"STILL\" , & \"STOCK\" , & \"STONE\" , & \"STOP\" , & \"STORE\" , & \"STORY\" , & \"STRAIGHT\" , & \"STRANGE\" , & \"STRATEGY\" , & \"STREET\" , & \"STRENGTH\" , & \"STRIKE\" , & \"STRONG\" , & \"STRONGLY\" , & \"STRUCTURE\" , & \"STUDENT\" , & \"STUDIO\" , & \"STUDY\" , & \"STUFF\" , & \"STYLE\" , & \"SUBJECT\" , & \"SUBSTANTIAL\" , & \"SUCCEED\" , & \"SUCCESS\" , & \"SUCCESSFUL\" , & \"SUCH\" , & \"SUDDENLY\" , & \"SUFFER\" , & \"SUFFICIENT\" , & \"SUGGEST\" , & \"SUGGESTION\" , & \"SUITABLE\" , & \"SUM\" , & \"SUMMER\" , & \"SUN\" , & \"SUPPLY\" , & \"SUPPORT\" , & \"SUPPOSE\" , & \"SURE\" , & \"SURELY\" , & \"SURFACE\" , & \"SURPRISE\" , & \"SURROUND\" , & \"SURVEY\" , & \"SURVIVE\" , & \"SWITCH\" , & \"SYSTEM\" , & \"TABLE\" , & \"TAKE\" , & \"TALK\" , & \"TALL\" , & \"TAPE\" , & \"TARGET\" , & \"TASK\" , & \"TAX\" , & \"TEA\" , & \"TEACH\" , & \"TEACHER\" , & \"TEACHING\" , & \"TEAM\" , & \"TEAR\" , & \"TECHNICAL\" , & \"TECHNIQUE\" , & \"TECHNOLOGY\" , & \"TELEPHONE\" , & \"TELEVISION\" , & \"TELL\" , & \"TEMPERATURE\" , & \"TEND\" , & \"TERM\" , & \"TERMS\" , & \"TERRIBLE\" , & \"TEST\" , & \"TEXT\" , & \"THAN\" , & \"THANK\" , & \"THANKS\" , & \"THAT\" , & \"THE\" , & \"THEATRE\" , & \"THEIR\" , & \"THEM\" , & \"THEME\" , & \"THEMSELVES\" , & \"THEN\" , & \"THEORY\" , & \"THERE\" , & \"THEREFORE\" , & \"THESE\" , & \"THEY\" , & \"THIN\" , & \"THING\" , & \"THINK\" , & \"THIS\" , & \"THOSE\" , & \"THOUGH\" , & \"THOUGHT\" , & \"THREAT\" , & \"THREATEN\" , & \"THROUGH\" , & \"THROUGHOUT\" , & \"THROW\" , & \"THUS\" , & \"TICKET\" , & \"TIME\" , & \"TINY\" , & \"TITLE\" , & \"TO\" , & \"TODAY\" , & \"TOGETHER\" , & \"TOMORROW\" , & \"TONE\" , & \"TONIGHT\" , & \"TOO\" , & \"TOOL\" , & \"TOOTH\" , & \"TOP\" , & \"TOTAL\" , & \"TOTALLY\" , & \"TOUCH\" , & \"TOUR\" , & \"TOWARDS\" , & \"TOWN\" , & \"TRACK\" , & \"TRADE\" , & \"TRADITION\" , & \"TRADITIONAL\" , & \"TRAFFIC\" , & \"TRAIN\" , & \"TRAINING\" , & \"TRANSFER\" , & \"TRANSPORT\" , & \"TRAVEL\" , & \"TREAT\" , & \"TREATMENT\" , & \"TREATY\" , & \"TREE\" , & \"TREND\" , & \"TRIAL\" , & \"TRIP\" , & \"TROOP\" , & \"TROUBLE\" , & \"TRUE\" , & \"TRUST\" , & \"TRUTH\" , & \"TRY\" , & \"TURN\" , & \"TWICE\" , & \"TYPE\" , & \"TYPICAL\" , & \"UNABLE\" , & \"UNDER\" , & \"UNDERSTAND\" , & \"UNDERSTANDING\" , & \"UNDERTAKE\" , & \"UNEMPLOYMENT\" , & \"UNFORTUNATELY\" , & \"UNION\" , & \"UNIT\" , & \"UNITED\" , & \"UNIVERSITY\" , & \"UNLESS\" , & \"UNLIKELY\" , & \"UNTIL\" , & \"UP\" , & \"UPON\" , & \"UPPER\" , & \"URBAN\" , & \"US\" , & \"USE\" , & \"USED\" , & \"USEFUL\" , & \"USER\" , & \"USUAL\" , & \"USUALLY\" , & \"VALUE\" , & \"VARIATION\" , & \"VARIETY\" , & \"VARIOUS\" , & \"VARY\" , & \"VAST\" , & \"VEHICLE\" , & \"VERSION\" , & \"VERY\" , & \"VIA\" , & \"VICTIM\" , & \"VICTORY\" , & \"VIDEO\" , & \"VIEW\" , & \"VILLAGE\" , & \"VIOLENCE\" , & \"VISION\" , & \"VISIT\" , & \"VISITOR\" , & \"VITAL\" , & \"VOICE\" , & \"VOLUME\" , & \"VOTE\" , & \"WAGE\" , & \"WAIT\" , & \"WALK\" , & \"WALL\" , & \"WANT\" , & \"WAR\" , & \"WARM\" , & \"WARN\" , & \"WASH\" , & \"WATCH\" , & \"WATER\" , & \"WAVE\" , & \"WAY\" , & \"WE\" , & \"WEAK\" , & \"WEAPON\" , & \"WEAR\" , & \"WEATHER\" , & \"WEEK\" , & \"WEEKEND\" , & \"WEIGHT\" , & \"WELCOME\" , & \"WELFARE\" , & \"WELL\" , & \"WEST\" , & \"WESTERN\" , & \"WHAT\" , & \"WHATEVER\" , & \"WHEN\" , & \"WHERE\" , & \"WHEREAS\" , & \"WHETHER\" , & \"WHICH\" , & \"WHILE\" , & \"WHILST\" , & \"WHITE\" , & \"WHO\" , & \"WHOLE\" , & \"WHOM\" , & \"WHOSE\" , & \"WHY\" , & \"WIDE\" , & \"WIDELY\" , & \"WIFE\" , & \"WILD\" , & \"WILL\" , & \"WIN\" , & \"WIND\" , & \"WINDOW\" , & \"WINE\" , & \"WING\" , & \"WINNER\" , & \"WINTER\" , & \"WISH\" , & \"WITH\" , & \"WITHDRAW\" , & \"WITHIN\" , & \"WITHOUT\" , & \"WOMAN\" , & \"WONDER\" , & \"WONDERFUL\" , & \"WOOD\" , & \"WORD\" , & \"WORK\" , & \"WORKER\" , & \"WORKING\" , & \"WORKS\" , & \"WORLD\" , & \"WORRY\" , & \"WORTH\" , & \"WOULD\" , & \"WRITE\" , & \"WRITER\" , & \"WRITING\" , & \"WRONG\" , & \"YARD\" , & \"YEAH\" , & \"YEAR\" , & \"YES\" , & \"YESTERDAY\" , & \"YET\" , & \"YOU\" , & \"YOUNG\" , & \"YOUR\" , & \"YOURSELF\" , & \"YOUTH\" ] end subroutine get_euler_data_0042 subroutine get_euler_data_0054 ( euler_data ) character ( len = :), allocatable , intent ( out ) :: euler_data (:) euler_data = & [ character ( len = 30 ) :: & \"8C TS KC 9H 4S 7D 2S 5D 3S AC\" , & \"5C AD 5D AC 9C 7C 5H 8D TD KS\" , & \"3H 7H 6S KC JS QH TD JC 2D 8S\" , & \"TH 8H 5C QS TC 9H 4D JC KS JS\" , & \"7C 5H KC QH JD AS KH 4C AD 4S\" , & \"5H KS 9C 7D 9H 8D 3S 5D 5C AH\" , & \"6H 4H 5C 3H 2H 3S QH 5S 6S AS\" , & \"TD 8C 4H 7C TC KC 4C 3H 7S KS\" , & \"7C 9C 6D KD 3H 4C QS QC AC KH\" , & \"JC 6S 5H 2H 2D KD 9D 7C AS JS\" , & \"AD QH TH 9D 8H TS 6D 3S AS AC\" , & \"2H 4S 5C 5S TC KC JD 6C TS 3C\" , & \"QD AS 6H JS 2C 3D 9H KC 4H 8S\" , & \"KD 8S 9S 7C 2S 3S 6D 6S 4H KC\" , & \"3C 8C 2D 7D 4D 9S 4S QH 4H JD\" , & \"8C KC 7S TC 2D TS 8H QD AC 5C\" , & \"3D KH QD 6C 6S AD AS 8H 2H QS\" , & \"6S 8D 4C 8S 6C QH TC 6D 7D 9D\" , & \"2S 8D 8C 4C TS 9S 9D 9C AC 3D\" , & \"3C QS 2S 4H JH 3D 2D TD 8S 9H\" , & \"5H QS 8S 6D 3C 8C JD AS 7H 7D\" , & \"6H TD 9D AS JH 6C QC 9S KD JC\" , & \"AH 8S QS 4D TH AC TS 3C 3D 5C\" , & \"5S 4D JS 3D 8H 6C TS 3S AD 8C\" , & \"6D 7C 5D 5H 3S 5C JC 2H 5S 3D\" , & \"5H 6H 2S KS 3D 5D JD 7H JS 8H\" , & \"KH 4H AS JS QS QC TC 6D 7C KS\" , & \"3D QS TS 2H JS 4D AS 9S JC KD\" , & \"QD 5H 4D 5D KH 7H 3D JS KD 4H\" , & \"2C 9H 6H 5C 9D 6C JC 2D TH 9S\" , & \"7D 6D AS QD JH 4D JS 7C QS 5C\" , & \"3H KH QD AD 8C 8H 3S TH 9D 5S\" , & \"AH 9S 4D 9D 8S 4H JS 3C TC 8D\" , & \"2C KS 5H QD 3S TS 9H AH AD 8S\" , & \"5C 7H 5D KD 9H 4D 3D 2D KS AD\" , & \"KS KC 9S 6D 2C QH 9D 9H TS TC\" , & \"9C 6H 5D QH 4D AD 6D QC JS KH\" , & \"9S 3H 9D JD 5C 4D 9H AS TC QH\" , & \"2C 6D JC 9C 3C AD 9S KH 9D 7D\" , & \"KC 9C 7C JC JS KD 3H AS 3C 7D\" , & \"QD KH QS 2C 3S 8S 8H 9H 9C JC\" , & \"QH 8D 3C KC 4C 4H 6D AD 9H 9D\" , & \"3S KS QS 7H KH 7D 5H 5D JD AD\" , & \"2H 2C 6H TH TC 7D 8D 4H 8C AS\" , & \"4S 2H AC QC 3S 6D TH 4D 4C KH\" , & \"4D TC KS AS 7C 3C 6D 2D 9H 6C\" , & \"8C TD 5D QS 2C 7H 4C 9C 3H 9H\" , & \"5H JH TS 7S TD 6H AD QD 8H 8S\" , & \"5S AD 9C 8C 7C 8D 5H 9D 8S 2S\" , & \"4H KH KS 9S 2S KC 5S AD 4S 7D\" , & \"QS 9C QD 6H JS 5D AC 8D 2S AS\" , & \"KH AC JC 3S 9D 9S 3C 9C 5S JS\" , & \"AD 3C 3D KS 3S 5C 9C 8C TS 4S\" , & \"JH 8D 5D 6H KD QS QD 3D 6C KC\" , & \"8S JD 6C 3S 8C TC QC 3C QH JS\" , & \"KC JC 8H 2S 9H 9C JH 8S 8C 9S\" , & \"8S 2H QH 4D QC 9D KC AS TH 3C\" , & \"8S 6H TH 7C 2H 6S 3C 3H AS 7S\" , & \"QH 5S JS 4H 5H TS 8H AH AC JC\" , & \"9D 8H 2S 4S TC JC 3C 7H 3H 5C\" , & \"3D AD 3C 3S 4C QC AS 5D TH 8C\" , & \"6S 9D 4C JS KH AH TS JD 8H AD\" , & \"4C 6S 9D 7S AC 4D 3D 3S TC JD\" , & \"AD 7H 6H 4H JH KC TD TS 7D 6S\" , & \"8H JH TC 3S 8D 8C 9S 2C 5C 4D\" , & \"2C 9D KC QH TH QS JC 9C 4H TS\" , & \"QS 3C QD 8H KH 4H 8D TD 8S AC\" , & \"7C 3C TH 5S 8H 8C 9C JD TC KD\" , & \"QC TC JD TS 8C 3H 6H KD 7C TD\" , & \"JH QS KS 9C 6D 6S AS 9H KH 6H\" , & \"2H 4D AH 2D JH 6H TD 5D 4H JD\" , & \"KD 8C 9S JH QD JS 2C QS 5C 7C\" , & \"4S TC 7H 8D 2S 6H 7S 9C 7C KC\" , & \"8C 5D 7H 4S TD QC 8S JS 4H KS\" , & \"AD 8S JH 6D TD KD 7C 6C 2D 7D\" , & \"JC 6H 6S JS 4H QH 9H AH 4C 3C\" , & \"6H 5H AS 7C 7S 3D KH KC 5D 5C\" , & \"JC 3D TD AS 4D 6D 6S QH JD KS\" , & \"8C 7S 8S QH 2S JD 5C 7H AH QD\" , & \"8S 3C 6H 6C 2C 8D TD 7D 4C 4D\" , & \"5D QH KH 7C 2S 7H JS 6D QC QD\" , & \"AD 6C 6S 7D TH 6H 2H 8H KH 4H\" , & \"KS JS KD 5D 2D KH 7D 9C 8C 3D\" , & \"9C 6D QD 3C KS 3S 7S AH JD 2D\" , & \"AH QH AS JC 8S 8H 4C KC TH 7D\" , & \"JC 5H TD 7C 5D KD 4C AD 8H JS\" , & \"KC 2H AC AH 7D JH KH 5D 7S 6D\" , & \"9S 5S 9C 6H 8S TD JD 9H 6C AC\" , & \"7D 8S 6D TS KD 7H AC 5S 7C 5D\" , & \"AH QC JC 4C TC 8C 2H TS 2C 7D\" , & \"KD KC 6S 3D 7D 2S 8S 3H 5S 5C\" , & \"8S 5D 8H 4C 6H KC 3H 7C 5S KD\" , & \"JH 8C 3D 3C 6C KC TD 7H 7C 4C\" , & \"JC KC 6H TS QS TD KS 8H 8C 9S\" , & \"6C 5S 9C QH 7D AH KS KC 9S 2C\" , & \"4D 4S 8H TD 9C 3S 7D 9D AS TH\" , & \"6S 7D 3C 6H 5D KD 2C 5C 9D 9C\" , & \"2H KC 3D AD 3H QD QS 8D JC 4S\" , & \"8C 3H 9C 7C AD 5D JC 9D JS AS\" , & \"5D 9H 5C 7H 6S 6C QC JC QD 9S\" , & \"JC QS JH 2C 6S 9C QC 3D 4S TC\" , & \"4H 5S 8D 3D 4D 2S KC 2H JS 2C\" , & \"TD 3S TH KD 4D 7H JH JS KS AC\" , & \"7S 8C 9S 2D 8S 7D 5C AD 9D AS\" , & \"8C 7H 2S 6C TH 3H 4C 3S 8H AC\" , & \"KD 5H JC 8H JD 2D 4H TD JH 5C\" , & \"3D AS QH KS 7H JD 8S 5S 6D 5H\" , & \"9S 6S TC QS JC 5C 5D 9C TH 8C\" , & \"5H 3S JH 9H 2S 2C 6S 7S AS KS\" , & \"8C QD JC QS TC QC 4H AC KH 6C\" , & \"TC 5H 7D JH 4H 2H 8D JC KS 4D\" , & \"5S 9C KH KD 9H 5C TS 3D 7D 2D\" , & \"5H AS TC 4D 8C 2C TS 9D 3H 8D\" , & \"6H 8D 2D 9H JD 6C 4S 5H 5S 6D\" , & \"AD 9C JC 7D 6H 9S 6D JS 9H 3C\" , & \"AD JH TC QS 4C 5D 9S 7C 9C AH\" , & \"KD 6H 2H TH 8S QD KS 9D 9H AS\" , & \"4H 8H 8D 5H 6C AH 5S AS AD 8S\" , & \"QS 5D 4S 2H TD KS 5H AC 3H JC\" , & \"9C 7D QD KD AC 6D 5H QH 6H 5S\" , & \"KC AH QH 2H 7D QS 3H KS 7S JD\" , & \"6C 8S 3H 6D KS QD 5D 5C 8H TC\" , & \"9H 4D 4S 6S 9D KH QC 4H 6C JD\" , & \"TD 2D QH 4S 6H JH KD 3C QD 8C\" , & \"4S 6H 7C QD 9D AS AH 6S AD 3C\" , & \"2C KC TH 6H 8D AH 5C 6D 8S 5D\" , & \"TD TS 7C AD JC QD 9H 3C KC 7H\" , & \"5D 4D 5S 8H 4H 7D 3H JD KD 2D\" , & \"JH TD 6H QS 4S KD 5C 8S 7D 8H\" , & \"AC 3D AS 8C TD 7H KH 5D 6C JD\" , & \"9D KS 7C 6D QH TC JD KD AS KC\" , & \"JH 8S 5S 7S 7D AS 2D 3D AD 2H\" , & \"2H 5D AS 3C QD KC 6H 9H 9S 2C\" , & \"9D 5D TH 4C JH 3H 8D TC 8H 9H\" , & \"6H KD 2C TD 2H 6C 9D 2D JS 8C\" , & \"KD 7S 3C 7C AS QH TS AD 8C 2S\" , & \"QS 8H 6C JS 4C 9S QC AD TD TS\" , & \"2H 7C TS TC 8C 3C 9H 2D 6D JC\" , & \"TC 2H 8D JH KS 6D 3H TD TH 8H\" , & \"9D TD 9H QC 5D 6C 8H 8C KC TS\" , & \"2H 8C 3D AH 4D TH TC 7D 8H KC\" , & \"TS 5C 2D 8C 6S KH AH 5H 6H KC\" , & \"5S 5D AH TC 4C JD 8D 6H 8C 6C\" , & \"KC QD 3D 8H 2D JC 9H 4H AD 2S\" , & \"TD 6S 7D JS KD 4H QS 2S 3S 8C\" , & \"4C 9H JH TS 3S 4H QC 5S 9S 9C\" , & \"2C KD 9H JS 9S 3H JC TS 5D AC\" , & \"AS 2H 5D AD 5H JC 7S TD JS 4C\" , & \"2D 4S 8H 3D 7D 2C AD KD 9C TS\" , & \"7H QD JH 5H JS AC 3D TH 4C 8H\" , & \"6D KH KC QD 5C AD 7C 2D 4H AC\" , & \"3D 9D TC 8S QD 2C JC 4H JD AH\" , & \"6C TD 5S TC 8S AH 2C 5D AS AC\" , & \"TH 7S 3D AS 6C 4C 7H 7D 4H AH\" , & \"5C 2H KS 6H 7S 4H 5H 3D 3C 7H\" , & \"3C 9S AC 7S QH 2H 3D 6S 3S 3H\" , & \"2D 3H AS 2C 6H TC JS 6S 9C 6C\" , & \"QH KD QD 6D AC 6H KH 2C TS 8C\" , & \"8H 7D 3S 9H 5D 3H 4S QC 9S 5H\" , & \"2D 9D 7H 6H 3C 8S 5H 4D 3S 4S\" , & \"KD 9S 4S TC 7S QC 3S 8S 2H 7H\" , & \"TC 3D 8C 3H 6C 2H 6H KS KD 4D\" , & \"KC 3D 9S 3H JS 4S 8H 2D 6C 8S\" , & \"6H QS 6C TC QD 9H 7D 7C 5H 4D\" , & \"TD 9D 8D 6S 6C TC 5D TS JS 8H\" , & \"4H KC JD 9H TC 2C 6S 5H 8H AS\" , & \"JS 9C 5C 6S 9D JD 8H KC 4C 6D\" , & \"4D 8D 8S 6C 7C 6H 7H 8H 5C KC\" , & \"TC 3D JC 6D KS 9S 6H 7S 9C 2C\" , & \"6C 3S KD 5H TS 7D 9H 9S 6H KH\" , & \"3D QD 4C 6H TS AC 3S 5C 2H KD\" , & \"4C AS JS 9S 7C TS 7H 9H JC KS\" , & \"4H 8C JD 3H 6H AD 9S 4S 5S KS\" , & \"4C 2C 7D 3D AS 9C 2S QS KC 6C\" , & \"8S 5H 3D 2S AC 9D 6S 3S 4D TD\" , & \"QD TH 7S TS 3D AC 7H 6C 5D QC\" , & \"TC QD AD 9C QS 5C 8D KD 3D 3C\" , & \"9D 8H AS 3S 7C 8S JD 2D 8D KC\" , & \"4C TH AC QH JS 8D 7D 7S 9C KH\" , & \"9D 8D 4C JH 2C 2S QD KD TS 4H\" , & \"4D 6D 5D 2D JH 3S 8S 3H TC KH\" , & \"AD 4D 2C QS 8C KD JH JD AH 5C\" , & \"5C 6C 5H 2H JH 4H KS 7C TC 3H\" , & \"3C 4C QC 5D JH 9C QD KH 8D TC\" , & \"3H 9C JS 7H QH AS 7C 9H 5H JC\" , & \"2D 5S QD 4S 3C KC 6S 6C 5C 4C\" , & \"5D KH 2D TS 8S 9C AS 9S 7C 4C\" , & \"7C AH 8C 8D 5S KD QH QS JH 2C\" , & \"8C 9D AH 2H AC QC 5S 8H 7H 2C\" , & \"QD 9H 5S QS QC 9C 5H JC TH 4H\" , & \"6C 6S 3H 5H 3S 6H KS 8D AC 7S\" , & \"AC QH 7H 8C 4S KC 6C 3D 3S TC\" , & \"9D 3D JS TH AC 5H 3H 8S 3S TC\" , & \"QD KH JS KS 9S QC 8D AH 3C AC\" , & \"5H 6C KH 3S 9S JH 2D QD AS 8C\" , & \"6C 4D 7S 7H 5S JC 6S 9H 4H JH\" , & \"AH 5S 6H 9S AD 3S TH 2H 9D 8C\" , & \"4C 8D 9H 7C QC AD 4S 9C KC 5S\" , & \"9D 6H 4D TC 4C JH 2S 5D 3S AS\" , & \"2H 6C 7C KH 5C AD QS TH JD 8S\" , & \"3S 4S 7S AH AS KC JS 2S AD TH\" , & \"JS KC 2S 7D 8C 5C 9C TS 5H 9D\" , & \"7S 9S 4D TD JH JS KH 6H 5D 2C\" , & \"JD JS JC TH 2D 3D QD 8C AC 5H\" , & \"7S KH 5S 9D 5D TD 4S 6H 3C 2D\" , & \"4S 5D AC 8D 4D 7C AD AS AH 9C\" , & \"6S TH TS KS 2C QC AH AS 3C 4S\" , & \"2H 8C 3S JC 5C 7C 3H 3C KH JH\" , & \"7S 3H JC 5S 6H 4C 2S 4D KC 7H\" , & \"4D 7C 4H 9S 8S 6S AD TC 6C JC\" , & \"KH QS 3S TC 4C 8H 8S AC 3C TS\" , & \"QD QS TH 3C TS 7H 7D AH TD JC\" , & \"TD JD QC 4D 9S 7S TS AD 7D AC\" , & \"AH 7H 4S 6D 7C 2H 9D KS JC TD\" , & \"7C AH JD 4H 6D QS TS 2H 2C 5C\" , & \"TC KC 8C 9S 4C JS 3C JC 6S AH\" , & \"AS 7D QC 3D 5S JC JD 9D TD KH\" , & \"TH 3C 2S 6H AH AC 5H 5C 7S 8H\" , & \"QC 2D AC QD 2S 3S JD QS 6S 8H\" , & \"KC 4H 3C 9D JS 6H 3S 8S AS 8C\" , & \"7H KC 7D JD 2H JC QH 5S 3H QS\" , & \"9H TD 3S 8H 7S AC 5C 6C AH 7C\" , & \"8D 9H AH JD TD QS 7D 3S 9C 8S\" , & \"AH QH 3C JD KC 4S 5S 5D TD KS\" , & \"9H 7H 6S JH TH 4C 7C AD 5C 2D\" , & \"7C KD 5S TC 9D 6S 6C 5D 2S TH\" , & \"KC 9H 8D 5H 7H 4H QC 3D 7C AS\" , & \"6S 8S QC TD 4S 5C TH QS QD 2S\" , & \"8S 5H TH QC 9H 6S KC 7D 7C 5C\" , & \"7H KD AH 4D KH 5C 4S 2D KC QH\" , & \"6S 2C TD JC AS 4D 6C 8C 4H 5S\" , & \"JC TC JD 5S 6S 8D AS 9D AD 3S\" , & \"6D 6H 5D 5S TC 3D 7D QS 9D QD\" , & \"4S 6C 8S 3S 7S AD KS 2D 7D 7C\" , & \"KC QH JC AC QD 5D 8D QS 7H 7D\" , & \"JS AH 8S 5H 3D TD 3H 4S 6C JH\" , & \"4S QS 7D AS 9H JS KS 6D TC 5C\" , & \"2D 5C 6H TC 4D QH 3D 9H 8S 6C\" , & \"6D 7H TC TH 5S JD 5C 9C KS KD\" , & \"8D TD QH 6S 4S 6C 8S KC 5C TC\" , & \"5S 3D KS AC 4S 7D QD 4C TH 2S\" , & \"TS 8H 9S 6S 7S QH 3C AH 7H 8C\" , & \"4C 8C TS JS QC 3D 7D 5D 7S JH\" , & \"8S 7S 9D QC AC 7C 6D 2H JH KC\" , & \"JS KD 3C 6S 4S 7C AH QC KS 5H\" , & \"KS 6S 4H JD QS TC 8H KC 6H AS\" , & \"KH 7C TC 6S TD JC 5C 7D AH 3S\" , & \"3H 4C 4H TC TH 6S 7H 6D 9C QH\" , & \"7D 5H 4S 8C JS 4D 3D 8S QH KC\" , & \"3H 6S AD 7H 3S QC 8S 4S 7S JS\" , & \"3S JD KH TH 6H QS 9C 6C 2D QD\" , & \"4S QH 4D 5H KC 7D 6D 8D TH 5S\" , & \"TD AD 6S 7H KD KH 9H 5S KC JC\" , & \"3H QC AS TS 4S QD KS 9C 7S KC\" , & \"TS 6S QC 6C TH TC 9D 5C 5D KD\" , & \"JS 3S 4H KD 4C QD 6D 9S JC 9D\" , & \"8S JS 6D 4H JH 6H 6S 6C KS KH\" , & \"AC 7D 5D TC 9S KH 6S QD 6H AS\" , & \"AS 7H 6D QH 8D TH 2S KH 5C 5H\" , & \"4C 7C 3D QC TC 4S KH 8C 2D JS\" , & \"6H 5D 7S 5H 9C 9H JH 8S TH 7H\" , & \"AS JS 2S QD KH 8H 4S AC 8D 8S\" , & \"3H 4C TD KD 8C JC 5C QS 2D JD\" , & \"TS 7D 5D 6C 2C QS 2H 3C AH KS\" , & \"4S 7C 9C 7D JH 6C 5C 8H 9D QD\" , & \"2S TD 7S 6D 9C 9S QS KH QH 5C\" , & \"JC 6S 9C QH JH 8D 7S JS KH 2H\" , & \"8D 5H TH KC 4D 4S 3S 6S 3D QS\" , & \"2D JD 4C TD 7C 6D TH 7S JC AH\" , & \"QS 7S 4C TH 9D TS AD 4D 3H 6H\" , & \"2D 3H 7D JD 3D AS 2S 9C QC 8S\" , & \"4H 9H 9C 2C 7S JH KD 5C 5D 6H\" , & \"TC 9H 8H JC 3C 9S 8D KS AD KC\" , & \"TS 5H JD QS QH QC 8D 5D KH AH\" , & \"5D AS 8S 6S 4C AH QC QD TH 7H\" , & \"3H 4H 7D 6S 4S 9H AS 8H JS 9D\" , & \"JD 8C 2C 9D 7D 5H 5S 9S JC KD\" , & \"KD 9C 4S QD AH 7C AD 9D AC TD\" , & \"6S 4H 4S 9C 8D KS TC 9D JH 7C\" , & \"5S JC 5H 4S QH AC 2C JS 2S 9S\" , & \"8C 5H AS QD AD 5C 7D 8S QC TD\" , & \"JC 4C 8D 5C KH QS 4D 6H 2H 2C\" , & \"TH 4S 2D KC 3H QD AC 7H AD 9D\" , & \"KH QD AS 8H TH KC 8D 7S QH 8C\" , & \"JC 6C 7D 8C KH AD QS 2H 6S 2D\" , & \"JC KH 2D 7D JS QC 5H 4C 5D AD\" , & \"TS 3S AD 4S TD 2D TH 6S 9H JH\" , & \"9H 2D QS 2C 4S 3D KH AS AC 9D\" , & \"KH 6S 8H 4S KD 7D 9D TS QD QC\" , & \"JH 5H AH KS AS AD JC QC 5S KH\" , & \"5D 7D 6D KS KD 3D 7C 4D JD 3S\" , & \"AC JS 8D 5H 9C 3H 4H 4D TS 2C\" , & \"6H KS KH 9D 7C 2S 6S 8S 2H 3D\" , & \"6H AC JS 7S 3S TD 8H 3H 4H TH\" , & \"9H TC QC KC 5C KS 6H 4H AC 8S\" , & \"TC 7D QH 4S JC TS 6D 6C AC KH\" , & \"QH 7D 7C JH QS QD TH 3H 5D KS\" , & \"3D 5S 8D JS 4C 2C KS 7H 9C 4H\" , & \"5H 8S 4H TD 2C 3S QD QC 3H KC\" , & \"QC JS KD 9C AD 5S 9D 7D 7H TS\" , & \"8C JC KH 7C 7S 6C TS 2C QD TH\" , & \"5S 9D TH 3C 7S QH 8S 9C 2H 5H\" , & \"5D 9H 6H 2S JS KH 3H 7C 2H 5S\" , & \"JD 5D 5S 2C TC 2S 6S 6C 3C 8S\" , & \"4D KH 8H 4H 2D KS 3H 5C 2S 9H\" , & \"3S 2D TD 7H 8S 6H JD KC 9C 8D\" , & \"6S QD JH 7C 9H 5H 8S 8H TH TD\" , & \"QS 7S TD 7D TS JC KD 7C 3C 2C\" , & \"3C JD 8S 4H 2D 2S TD AS 4D AC\" , & \"AH KS 6C 4C 4S 7D 8C 9H 6H AS\" , & \"5S 3C 9S 2C QS KD 4D 4S AC 5D\" , & \"2D TS 2C JS KH QH 5D 8C AS KC\" , & \"KD 3H 6C TH 8S 7S KH 6H 9S AC\" , & \"6H 7S 6C QS AH 2S 2H 4H 5D 5H\" , & \"5H JC QD 2C 2S JD AS QC 6S 7D\" , & \"6C TC AS KD 8H 9D 2C 7D JH 9S\" , & \"2H 4C 6C AH 8S TD 3H TH 7C TS\" , & \"KD 4S TS 6C QH 8D 9D 9C AH 7D\" , & \"6D JS 5C QD QC 9C 5D 8C 2H KD\" , & \"3C QH JH AD 6S AH KC 8S 6D 6H\" , & \"3D 7C 4C 7S 5S 3S 6S 5H JC 3C\" , & \"QH 7C 5H 3C 3S 8C TS 4C KD 9C\" , & \"QD 3S 7S 5H 7H QH JC 7C 8C KD\" , & \"3C KD KH 2S 4C TS AC 6S 2C 7C\" , & \"2C KH 3C 4C 6H 4D 5H 5S 7S QD\" , & \"4D 7C 8S QD TS 9D KS 6H KD 3C\" , & \"QS 4D TS 7S 4C 3H QD 8D 9S TC\" , & \"TS QH AC 6S 3C 9H 9D QS 8S 6H\" , & \"3S 7S 5D 4S JS 2D 6C QH 6S TH\" , & \"4C 4H AS JS 5D 3D TS 9C AC 8S\" , & \"6S 9C 7C 3S 5C QS AD AS 6H 3C\" , & \"9S 8C 7H 3H 6S 7C AS 9H JD KH\" , & \"3D 3H 7S 4D 6C 7C AC 2H 9C TH\" , & \"4H 5S 3H AC TC TH 9C 9H 9S 8D\" , & \"8D 9H 5H 4D 6C 2H QD 6S 5D 3S\" , & \"4C 5C JD QS 4D 3H TH AC QH 8C\" , & \"QC 5S 3C 7H AD 4C KS 4H JD 6D\" , & \"QS AH 3H KS 9H 2S JS JH 5H 2H\" , & \"2H 5S TH 6S TS 3S KS 3C 5H JS\" , & \"2D 9S 7H 3D KC JH 6D 7D JS TD\" , & \"AC JS 8H 2C 8C JH JC 2D TH 7S\" , & \"5D 9S 8H 2H 3D TC AH JC KD 9C\" , & \"9D QD JC 2H 6D KH TS 9S QH TH\" , & \"2C 8D 4S JD 5H 3H TH TC 9C KC\" , & \"AS 3D 9H 7D 4D TH KH 2H 7S 3H\" , & \"4H 7S KS 2S JS TS 8S 2H QD 8D\" , & \"5S 6H JH KS 8H 2S QC AC 6S 3S\" , & \"JC AS AD QS 8H 6C KH 4C 4D QD\" , & \"2S 3D TS TD 9S KS 6S QS 5C 8D\" , & \"3C 6D 4S QC KC JH QD TH KH AD\" , & \"9H AH 4D KS 2S 8D JH JC 7C QS\" , & \"2D 6C TH 3C 8H QD QH 2S 3S KS\" , & \"6H 5D 9S 4C TS TD JS QD 9D JD\" , & \"5H 8H KH 8S KS 7C TD AD 4S KD\" , & \"2C 7C JC 5S AS 6C 7D 8S 5H 9C\" , & \"6S QD 9S TS KH QS 5S QH 3C KC\" , & \"7D 3H 3C KD 5C AS JH 7H 6H JD\" , & \"9D 5C 9H KC 8H KS 4S AD 4D 2S\" , & \"3S JD QD 8D 2S 7C 5S 6S 5H TS\" , & \"6D 9S KC TD 3S 6H QD JD 5C 8D\" , & \"5H 9D TS KD 8D 6H TD QC 4C 7D\" , & \"6D 4S JD 9D AH 9S AS TD 9H QD\" , & \"2D 5S 2H 9C 6H 9S TD QC 7D TC\" , & \"3S 2H KS TS 2C 9C 8S JS 9D 7D\" , & \"3C KC 6D 5D 6C 6H 8S AS 7S QS\" , & \"JH 9S 2H 8D 4C 8H 9H AD TH KH\" , & \"QC AS 2S JS 5C 6H KD 3H 7H 2C\" , & \"QD 8H 2S 8D 3S 6D AH 2C TC 5C\" , & \"JD JS TS 8S 3H 5D TD KC JC 6H\" , & \"6S QS TC 3H 5D AH JC 7C 7D 4H\" , & \"7C 5D 8H 9C 2H 9H JH KH 5S 2C\" , & \"9C 7H 6S TH 3S QC QD 4C AC JD\" , & \"2H 5D 9S 7D KC 3S QS 2D AS KH\" , & \"2S 4S 2H 7D 5C TD TH QH 9S 4D\" , & \"6D 3S TS 6H 4H KS 9D 8H 5S 2D\" , & \"9H KS 4H 3S 5C 5D KH 6H 6S JS\" , & \"KC AS 8C 4C JC KH QC TH QD AH\" , & \"6S KH 9S 2C 5H TC 3C 7H JC 4D\" , & \"JD 4S 6S 5S 8D 7H 7S 4D 4C 2H\" , & \"7H 9H 5D KH 9C 7C TS TC 7S 5H\" , & \"4C 8D QC TS 4S 9H 3D AD JS 7C\" , & \"8C QS 5C 5D 3H JS AH KC 4S 9D\" , & \"TS JD 8S QS TH JH KH 2D QD JS\" , & \"JD QC 5D 6S 9H 3S 2C 8H 9S TS\" , & \"2S 4C AD 7H JC 5C 2D 6D 4H 3D\" , & \"7S JS 2C 4H 8C AD QD 9C 3S TD\" , & \"JD TS 4C 6H 9H 7D QD 6D 3C AS\" , & \"AS 7C 4C 6S 5D 5S 5C JS QC 4S\" , & \"KD 6S 9S 7C 3C 5S 7D JH QD JS\" , & \"4S 7S JH 2C 8S 5D 7H 3D QH AD\" , & \"TD 6H 2H 8D 4H 2D 7C AD KH 5D\" , & \"TS 3S 5H 2C QD AH 2S 5C KH TD\" , & \"KC 4D 8C 5D AS 6C 2H 2S 9H 7C\" , & \"KD JS QC TS QS KH JH 2C 5D AD\" , & \"3S 5H KC 6C 9H 3H 2H AD 7D 7S\" , & \"7S JS JH KD 8S 7D 2S 9H 7C 2H\" , & \"9H 2D 8D QC 6S AD AS 8H 5H 6C\" , & \"2S 7H 6C 6D 7D 8C 5D 9D JC 3C\" , & \"7C 9C 7H JD 2H KD 3S KH AD 4S\" , & \"QH AS 9H 4D JD KS KD TS KH 5H\" , & \"4C 8H 5S 3S 3D 7D TD AD 7S KC\" , & \"JS 8S 5S JC 8H TH 9C 4D 5D KC\" , & \"7C 5S 9C QD 2C QH JS 5H 8D KH\" , & \"TD 2S KS 3D AD KC 7S TC 3C 5D\" , & \"4C 2S AD QS 6C 9S QD TH QH 5C\" , & \"8C AD QS 2D 2S KC JD KS 6C JC\" , & \"8D 4D JS 2H 5D QD 7S 7D QH TS\" , & \"6S 7H 3S 8C 8S 9D QS 8H 6C 9S\" , & \"4S TC 2S 5C QD 4D QS 6D TH 6S\" , & \"3S 5C 9D 6H 8D 4C 7D TC 7C TD\" , & \"AH 6S AS 7H 5S KD 3H 5H AC 4C\" , & \"8D 8S AH KS QS 2C AD 6H 7D 5D\" , & \"6H 9H 9S 2H QS 8S 9C 5D 2D KD\" , & \"TS QC 5S JH 7D 7S TH 9S 9H AC\" , & \"7H 3H 6S KC 4D 6D 5C 4S QD TS\" , & \"TD 2S 7C QD 3H JH 9D 4H 7S 7H\" , & \"KS 3D 4H 5H TC 2S AS 2D 6D 7D\" , & \"8H 3C 7H TD 3H AD KC TH 9C KH\" , & \"TC 4C 2C 9S 9D 9C 5C 2H JD 3C\" , & \"3H AC TS 5D AD 8D 6H QC 6S 8C\" , & \"2S TS 3S JD 7H 8S QH 4C 5S 8D\" , & \"AC 4S 6C 3C KH 3D 7C 2D 8S 2H\" , & \"4H 6C 8S TH 2H 4S 8H 9S 3H 7S\" , & \"7C 4C 9C 2C 5C AS 5D KD 4D QH\" , & \"9H 4H TS AS 7D 8D 5D 9S 8C 2H\" , & \"QC KD AC AD 2H 7S AS 3S 2D 9S\" , & \"2H QC 8H TC 6D QD QS 5D KH 3C\" , & \"TH JD QS 4C 2S 5S AD 7H 3S AS\" , & \"7H JS 3D 6C 3S 6D AS 9S AC QS\" , & \"9C TS AS 8C TC 8S 6H 9D 8D 6C\" , & \"4D JD 9C KC 7C 6D KS 3S 8C AS\" , & \"3H 6S TC 8D TS 3S KC 9S 7C AS\" , & \"8C QC 4H 4S 8S 6C 3S TC AH AC\" , & \"4D 7D 5C AS 2H 6S TS QC AD TC\" , & \"QD QC 8S 4S TH 3D AH TS JH 4H\" , & \"5C 2D 9S 2C 3H 3C 9D QD QH 7D\" , & \"KC 9H 6C KD 7S 3C 4D AS TC 2D\" , & \"3D JS 4D 9D KS 7D TH QC 3H 3C\" , & \"8D 5S 2H 9D 3H 8C 4C 4H 3C TH\" , & \"JC TH 4S 6S JD 2D 4D 6C 3D 4C\" , & \"TS 3S 2D 4H AC 2C 6S 2H JH 6H\" , & \"TD 8S AD TC AH AC JH 9S 6S 7S\" , & \"6C KC 4S JD 8D 9H 5S 7H QH AH\" , & \"KD 8D TS JH 5C 5H 3H AD AS JS\" , & \"2D 4H 3D 6C 8C 7S AD 5D 5C 8S\" , & \"TD 5D 7S 9C 4S 5H 6C 8C 4C 8S\" , & \"JS QH 9C AS 5C QS JC 3D QC 7C\" , & \"JC 9C KH JH QS QC 2C TS 3D AD\" , & \"5D JH AC 5C 9S TS 4C JD 8C KS\" , & \"KC AS 2D KH 9H 2C 5S 4D 3D 6H\" , & \"TH AH 2D 8S JC 3D 8C QH 7S 3S\" , & \"8H QD 4H JC AS KH KS 3C 9S 6D\" , & \"9S QH 7D 9C 4S AC 7H KH 4D KD\" , & \"AH AD TH 6D 9C 9S KD KS QH 4H\" , & \"QD 6H 9C 7C QS 6D 6S 9D 5S JH\" , & \"AH 8D 5H QD 2H JC KS 4H KH 5S\" , & \"5C 2S JS 8D 9C 8C 3D AS KC AH\" , & \"JD 9S 2H QS 8H 5S 8C TH 5C 4C\" , & \"QC QS 8C 2S 2C 3S 9C 4C KS KH\" , & \"2D 5D 8S AH AD TD 2C JS KS 8C\" , & \"TC 5S 5H 8H QC 9H 6H JD 4H 9S\" , & \"3C JH 4H 9H AH 4S 2H 4C 8D AC\" , & \"8S TH 4D 7D 6D QD QS 7S TC 7C\" , & \"KH 6D 2D JD 5H JS QD JH 4H 4S\" , & \"9C 7S JH 4S 3S TS QC 8C TC 4H\" , & \"QH 9D 4D JH QS 3S 2C 7C 6C 2D\" , & \"4H 9S JD 5C 5H AH 9D TS 2D 4C\" , & \"KS JH TS 5D 2D AH JS 7H AS 8D\" , & \"JS AH 8C AD KS 5S 8H 2C 6C TH\" , & \"2H 5D AD AC KS 3D 8H TS 6H QC\" , & \"6D 4H TS 9C 5H JS JH 6S JD 4C\" , & \"JH QH 4H 2C 6D 3C 5D 4C QS KC\" , & \"6H 4H 6C 7H 6S 2S 8S KH QC 8C\" , & \"3H 3D 5D KS 4H TD AD 3S 4D TS\" , & \"5S 7C 8S 7D 2C KS 7S 6C 8C JS\" , & \"5D 2H 3S 7C 5C QD 5H 6D 9C 9H\" , & \"JS 2S KD 9S 8D TD TS AC 8C 9D\" , & \"5H QD 2S AC 8C 9H KS 7C 4S 3C\" , & \"KH AS 3H 8S 9C JS QS 4S AD 4D\" , & \"AS 2S TD AD 4D 9H JC 4C 5H QS\" , & \"5D 7C 4H TC 2D 6C JS 4S KC 3S\" , & \"4C 2C 5D AC 9H 3D JD 8S QS QH\" , & \"2C 8S 6H 3C QH 6D TC KD AC AH\" , & \"QC 6C 3S QS 4S AC 8D 5C AD KH\" , & \"5S 4C AC KH AS QC 2C 5C 8D 9C\" , & \"8H JD 3C KH 8D 5C 9C QD QH 9D\" , & \"7H TS 2C 8C 4S TD JC 9C 5H QH\" , & \"JS 4S 2C 7C TH 6C AS KS 7S JD\" , & \"JH 7C 9H 7H TC 5H 3D 6D 5D 4D\" , & \"2C QD JH 2H 9D 5S 3D TD AD KS\" , & \"JD QH 3S 4D TH 7D 6S QS KS 4H\" , & \"TC KS 5S 8D 8H AD 2S 2D 4C JH\" , & \"5S JH TC 3S 2D QS 9D 4C KD 9S\" , & \"AC KH 3H AS 9D KC 9H QD 6C 6S\" , & \"9H 7S 3D 5C 7D KC TD 8H 4H 6S\" , & \"3C 7H 8H TC QD 4D 7S 6S QH 6C\" , & \"6D AD 4C QD 6C 5D 7D 9D KS TS\" , & \"JH 2H JD 9S 7S TS KH 8D 5D 8H\" , & \"2D 9S 4C 7D 9D 5H QD 6D AC 6S\" , & \"7S 6D JC QD JH 4C 6S QS 2H 7D\" , & \"8C TD JH KD 2H 5C QS 2C JS 7S\" , & \"TC 5H 4H JH QD 3S 5S 5D 8S KH\" , & \"KS KH 7C 2C 5D JH 6S 9C 6D JC\" , & \"5H AH JD 9C JS KC 2H 6H 4D 5S\" , & \"AS 3C TH QC 6H 9C 8S 8C TD 7C\" , & \"KC 2C QD 9C KH 4D 7S 3C TS 9H\" , & \"9C QC 2S TS 8C TD 9S QD 3S 3C\" , & \"4D 9D TH JH AH 6S 2S JD QH JS\" , & \"QD 9H 6C KD 7D 7H 5D 6S 8H AH\" , & \"8H 3C 4S 2H 5H QS QH 7S 4H AC\" , & \"QS 3C 7S 9S 4H 3S AH KS 9D 7C\" , & \"AD 5S 6S 2H 2D 5H TC 4S 3C 8C\" , & \"QH TS 6S 4D JS KS JH AS 8S 6D\" , & \"2C 8S 2S TD 5H AS TC TS 6C KC\" , & \"KC TS 8H 2H 3H 7C 4C 5S TH TD\" , & \"KD AD KH 7H 7S 5D 5H 5S 2D 9C\" , & \"AD 9S 3D 7S 8C QC 7C 9C KD KS\" , & \"3C QC 9S 8C 4D 5C AS QD 6C 2C\" , & \"2H KC 8S JD 7S AC 8D 5C 2S 4D\" , & \"9D QH 3D 2S TC 3S KS 3C 9H TD\" , & \"KD 6S AC 2C 7H 5H 3S 6C 6H 8C\" , & \"QH TC 8S 6S KH TH 4H 5D TS 4D\" , & \"8C JS 4H 6H 2C 2H 7D AC QD 3D\" , & \"QS KC 6S 2D 5S 4H TD 3H JH 4C\" , & \"7S 5H 7H 8H KH 6H QS TH KD 7D\" , & \"5H AD KD 7C KH 5S TD 6D 3C 6C\" , & \"8C 9C 5H JD 7C KC KH 7H 2H 3S\" , & \"7S 4H AD 4D 8S QS TH 3D 7H 5S\" , & \"8D TC KS KD 9S 6D AD JD 5C 2S\" , & \"7H 8H 6C QD 2H 6H 9D TC 9S 7C\" , & \"8D 6D 4C 7C 6C 3C TH KH JS JH\" , & \"5S 3S 8S JS 9H AS AD 8H 7S KD\" , & \"JH 7C 2C KC 5H AS AD 9C 9S JS\" , & \"AD AC 2C 6S QD 7C 3H TH KS KD\" , & \"9D JD 4H 8H 4C KH 7S TS 8C KC\" , & \"3S 5S 2H 7S 6H 7D KS 5C 6D AD\" , & \"5S 8C 9H QS 7H 7S 2H 6C 7D TD\" , & \"QS 5S TD AC 9D KC 3D TC 2D 4D\" , & \"TD 2H 7D JD QD 4C 7H 5D KC 3D\" , & \"4C 3H 8S KD QH 5S QC 9H TC 5H\" , & \"9C QD TH 5H TS 5C 9H AH QH 2C\" , & \"4D 6S 3C AC 6C 3D 2C 2H TD TH\" , & \"AC 9C 5D QC 4D AD 8D 6D 8C KC\" , & \"AD 3C 4H AC 8D 8H 7S 9S TD JC\" , & \"4H 9H QH JS 2D TH TD TC KD KS\" , & \"5S 6S 9S 8D TH AS KH 5H 5C 8S\" , & \"JD 2S 9S 6S 5S 8S 5D 7S 7H 9D\" , & \"5D 8C 4C 9D AD TS 2C 7D KD TC\" , & \"8S QS 4D KC 5C 8D 4S KH JD KD\" , & \"AS 5C AD QH 7D 2H 9S 7H 7C TC\" , & \"2S 8S JD KH 7S 6C 6D AD 5D QC\" , & \"9H 6H 3S 8C 8H AH TC 4H JS TD\" , & \"2C TS 4D 7H 2D QC 9C 5D TH 7C\" , & \"6C 8H QC 5D TS JH 5C 5H 9H 4S\" , & \"2D QC 7H AS JS 8S 2H 4C 4H 8D\" , & \"JS 6S AC KD 3D 3C 4S 7H TH KC\" , & \"QH KH 6S QS 5S 4H 3C QD 3S 3H\" , & \"7H AS KH 8C 4H 9C 5S 3D 6S TS\" , & \"9C 7C 3H 5S QD 2C 3D AD AC 5H\" , & \"JH TD 2D 4C TS 3H KH AD 3S 7S\" , & \"AS 4C 5H 4D 6S KD JC 3C 6H 2D\" , & \"3H 6S 8C 2D TH 4S AH QH AD 5H\" , & \"7C 2S 9H 7H KC 5C 6D 5S 3H JC\" , & \"3C TC 9C 4H QD TD JH 6D 9H 5S\" , & \"7C 6S 5C 5D 6C 4S 7H 9H 6H AH\" , & \"AD 2H 7D KC 2C 4C 2S 9S 7H 3S\" , & \"TH 4C 8S 6S 3S AD KS AS JH TD\" , & \"5C TD 4S 4D AD 6S 5D TC 9C 7D\" , & \"8H 3S 4D 4S 5S 6H 5C AC 3H 3D\" , & \"9H 3C AC 4S QS 8S 9D QH 5H 4D\" , & \"JC 6C 5H TS AC 9C JD 8C 7C QD\" , & \"8S 8H 9C JD 2D QC QH 6H 3C 8D\" , & \"KS JS 2H 6H 5H QH QS 3H 7C 6D\" , & \"TC 3H 4S 7H QC 2H 3S 8C JS KH\" , & \"AH 8H 5S 4C 9H JD 3H 7S JC AC\" , & \"3C 2D 4C 5S 6C 4S QS 3S JD 3D\" , & \"5H 2D TC AH KS 6D 7H AD 8C 6H\" , & \"6C 7S 3C JD 7C 8H KS KH AH 6D\" , & \"AH 7D 3H 8H 8S 7H QS 5H 9D 2D\" , & \"JD AC 4H 7S 8S 9S KS AS 9D QH\" , & \"7S 2C 8S 5S JH QS JC AH KD 4C\" , & \"AH 2S 9H 4H 8D TS TD 6H QH JD\" , & \"4H JC 3H QS 6D 7S 9C 8S 9D 8D\" , & \"5H TD 4S 9S 4C 8C 8D 7H 3H 3D\" , & \"QS KH 3S 2C 2S 3C 7S TD 4S QD\" , & \"7C TD 4D 5S KH AC AS 7H 4C 6C\" , & \"2S 5H 6D JD 9H QS 8S 2C 2H TD\" , & \"2S TS 6H 9H 7S 4H JC 4C 5D 5S\" , & \"2C 5H 7D 4H 3S QH JC JS 6D 8H\" , & \"4C QH 7C QD 3S AD TH 8S 5S TS\" , & \"9H TC 2S TD JC 7D 3S 3D TH QH\" , & \"7D 4C 8S 5C JH 8H 6S 3S KC 3H\" , & \"JC 3H KH TC QH TH 6H 2C AC 5H\" , & \"QS 2H 9D 2C AS 6S 6C 2S 8C 8S\" , & \"9H 7D QC TH 4H KD QS AC 7S 3C\" , & \"4D JH 6S 5S 8H KS 9S QC 3S AS\" , & \"JD 2D 6S 7S TC 9H KC 3H 7D KD\" , & \"2H KH 7C 4D 4S 3H JS QD 7D KC\" , & \"4C JC AS 9D 3C JS 6C 8H QD 4D\" , & \"AH JS 3S 6C 4C 3D JH 6D 9C 9H\" , & \"9H 2D 8C 7H 5S KS 6H 9C 2S TC\" , & \"6C 8C AD 7H 6H 3D KH AS 5D TH\" , & \"KS 8C 3S TS 8S 4D 5S 9S 6C 4H\" , & \"9H 4S 4H 5C 7D KC 2D 2H 9D JH\" , & \"5C JS TC 9D 9H 5H 7S KH JC 6S\" , & \"7C 9H 8H 4D JC KH JD 2H TD TC\" , & \"8H 6C 2H 2C KH 6H 9D QS QH 5H\" , & \"AC 7D 2S 3D QD JC 2D 8D JD JH\" , & \"2H JC 2D 7H 2C 3C 8D KD TD 4H\" , & \"3S 4H 6D 8D TS 3H TD 3D 6H TH\" , & \"JH JC 3S AC QH 9H 7H 8S QC 2C\" , & \"7H TD QS 4S 8S 9C 2S 5D 4D 2H\" , & \"3D TS 3H 2S QC 8H 6H KC JC KS\" , & \"5D JD 7D TC 8C 6C 9S 3D 8D AC\" , & \"8H 6H JH 6C 5D 8D 8S 4H AD 2C\" , & \"9D 4H 2D 2C 3S TS AS TC 3C 5D\" , & \"4D TH 5H KS QS 6C 4S 2H 3D AD\" , & \"5C KC 6H 2C 5S 3C 4D 2D 9H 9S\" , & \"JD 4C 3H TH QH 9H 5S AH 8S AC\" , & \"7D 9S 6S 2H TD 9C 4H 8H QS 4C\" , & \"3C 6H 5D 4H 8C 9C KC 6S QD QS\" , & \"3S 9H KD TC 2D JS 8C 6S 4H 4S\" , & \"2S 4C 8S QS 6H KH 3H TH 8C 5D\" , & \"2C KH 5S 3S 7S 7H 6C 9D QD 8D\" , & \"8H KS AC 2D KH TS 6C JS KC 7H\" , & \"9C KS 5C TD QC AH 6C 5H 9S 7C\" , & \"5D 4D 3H 4H 6S 7C 7S AH QD TD\" , & \"2H 7D QC 6S TC TS AH 7S 9D 3H\" , & \"TH 5H QD 9S KS 7S 7C 6H 8C TD\" , & \"TH 2D 4D QC 5C 7D JD AH 9C 4H\" , & \"4H 3H AH 8D 6H QC QH 9H 2H 2C\" , & \"2D AD 4C TS 6H 7S TH 4H QS TD\" , & \"3C KD 2H 3H QS JD TC QC 5D 8H\" , & \"KS JC QD TH 9S KD 8D 8C 2D 9C\" , & \"3C QD KD 6D 4D 8D AH AD QC 8S\" , & \"8H 3S 9D 2S 3H KS 6H 4C 7C KC\" , & \"TH 9S 5C 3D 7D 6H AC 7S 4D 2C\" , & \"5C 3D JD 4D 2D 6D 5H 9H 4C KH\" , & \"AS 7H TD 6C 2H 3D QD KS 4C 4S\" , & \"JC 3C AC 7C JD JS 8H 9S QC 5D\" , & \"JD 6S 5S 2H AS 8C 7D 5H JH 3D\" , & \"8D TC 5S 9S 8S 3H JC 5H 7S AS\" , & \"5C TD 3D 7D 4H 8D 7H 4D 5D JS\" , & \"QS 9C KS TD 2S 8S 5C 2H 4H AS\" , & \"TH 7S 4H 7D 3H JD KD 5D 2S KC\" , & \"JD 7H 4S 8H 4C JS 6H QH 5S 4H\" , & \"2C QS 8C 5S 3H QC 2S 6C QD AD\" , & \"8C 3D JD TC 4H 2H AD 5S AC 2S\" , & \"5D 2C JS 2D AD 9D 3D 4C 4S JH\" , & \"8D 5H 5D 6H 7S 4D KS 9D TD JD\" , & \"3D 6D 9C 2S AS 7D 5S 5C 8H JD\" , & \"7C 8S 3S 6S 5H JD TC AD 7H 7S\" , & \"2S 9D TS 4D AC 8D 6C QD JD 3H\" , & \"9S KH 2C 3C AC 3D 5H 6H 8D 5D\" , & \"KS 3D 2D 6S AS 4C 2S 7C 7H KH\" , & \"AC 2H 3S JC 5C QH 4D 2D 5H 7S\" , & \"TS AS JD 8C 6H JC 8S 5S 2C 5D\" , & \"7S QH 7H 6C QC 8H 2D 7C JD 2S\" , & \"2C QD 2S 2H JC 9C 5D 2D JD JH\" , & \"7C 5C 9C 8S 7D 6D 8D 6C 9S JH\" , & \"2C AD 6S 5H 3S KS 7S 9D KH 4C\" , & \"7H 6C 2C 5C TH 9D 8D 3S QC AH\" , & \"5S KC 6H TC 5H 8S TH 6D 3C AH\" , & \"9C KD 4H AD TD 9S 4S 7D 6H 5D\" , & \"7H 5C 5H 6D AS 4C KD KH 4H 9D\" , & \"3C 2S 5C 6C JD QS 2H 9D 7D 3H\" , & \"AC 2S 6S 7S JS QD 5C QS 6H AD\" , & \"5H TH QC 7H TC 3S 7C 6D KC 3D\" , & \"4H 3D QC 9S 8H 2C 3S JC KS 5C\" , & \"4S 6S 2C 6H 8S 3S 3D 9H 3H JS\" , & \"4S 8C 4D 2D 8H 9H 7D 9D AH TS\" , & \"9S 2C 9H 4C 8D AS 7D 3D 6D 5S\" , & \"6S 4C 7H 8C 3H 5H JC AH 9D 9C\" , & \"2S 7C 5S JD 8C 3S 3D 4D 7D 6S\" , & \"3C KC 4S 5D 7D 3D JD 7H 3H 4H\" , & \"9C 9H 4H 4D TH 6D QD 8S 9S 7S\" , & \"2H AC 8S 4S AD 8C 2C AH 7D TC\" , & \"TS 9H 3C AD KS TC 3D 8C 8H JD\" , & \"QC 8D 2C 3C 7D 7C JD 9H 9C 6C\" , & \"AH 6S JS JH 5D AS QC 2C JD TD\" , & \"9H KD 2H 5D 2D 3S 7D TC AH TS\" , & \"TD 8H AS 5D AH QC AC 6S TC 5H\" , & \"KS 4S 7H 4D 8D 9C TC 2H 6H 3H\" , & \"3H KD 4S QD QH 3D 8H 8C TD 7S\" , & \"8S JD TC AH JS QS 2D KH KS 4D\" , & \"3C AD JC KD JS KH 4S TH 9H 2C\" , & \"QC 5S JS 9S KS AS 7C QD 2S JD\" , & \"KC 5S QS 3S 2D AC 5D 9H 8H KS\" , & \"6H 9C TC AD 2C 6D 5S JD 6C 7C\" , & \"QS KH TD QD 2C 3H 8S 2S QC AH\" , & \"9D 9H JH TC QH 3C 2S JS 5C 7H\" , & \"6C 3S 3D 2S 4S QD 2D TH 5D 2C\" , & \"2D 6H 6D 2S JC QH AS 7H 4H KH\" , & \"5H 6S KS AD TC TS 7C AC 4S 4H\" , & \"AD 3C 4H QS 8C 9D KS 2H 2D 4D\" , & \"4S 9D 6C 6D 9C AC 8D 3H 7H KD\" , & \"JC AH 6C TS JD 6D AD 3S 5D QD\" , & \"JC JH JD 3S 7S 8S JS QC 3H 4S\" , & \"JD TH 5C 2C AD JS 7H 9S 2H 7S\" , & \"8D 3S JH 4D QC AS JD 2C KC 6H\" , & \"2C AC 5H KD 5S 7H QD JH AH 2D\" , & \"JC QH 8D 8S TC 5H 5C AH 8C 6C\" , & \"3H JS 8S QD JH 3C 4H 6D 5C 3S\" , & \"6D 4S 4C AH 5H 5S 3H JD 7C 8D\" , & \"8H AH 2H 3H JS 3C 7D QC 4H KD\" , & \"6S 2H KD 5H 8H 2D 3C 8S 7S QD\" , & \"2S 7S KC QC AH TC QS 6D 4C 8D\" , & \"5S 9H 2C 3S QD 7S 6C 2H 7C 9D\" , & \"3C 6C 5C 5S JD JC KS 3S 5D TS\" , & \"7C KS 6S 5S 2S 2D TC 2H 5H QS\" , & \"AS 7H 6S TS 5H 9S 9D 3C KD 2H\" , & \"4S JS QS 3S 4H 7C 2S AC 6S 9D\" , & \"8C JH 2H 5H 7C 5D QH QS KH QC\" , & \"3S TD 3H 7C KC 8D 5H 8S KH 8C\" , & \"4H KH JD TS 3C 7H AS QC JS 5S\" , & \"AH 9D 2C 8D 4D 2D 6H 6C KC 6S\" , & \"2S 6H 9D 3S 7H 4D KH 8H KD 3D\" , & \"9C TC AC JH KH 4D JD 5H TD 3S\" , & \"7S 4H 9D AS 4C 7D QS 9S 2S KH\" , & \"3S 8D 8S KS 8C JC 5C KH 2H 5D\" , & \"8S QH 2C 4D KC JS QC 9D AC 6H\" , & \"8S 8C 7C JS JD 6S 4C 9C AC 4S\" , & \"QH 5D 2C 7D JC 8S 2D JS JH 4C\" , & \"JS 4C 7S TS JH KC KH 5H QD 4S\" , & \"QD 8C 8D 2D 6S TD 9D AC QH 5S\" , & \"QH QC JS 3D 3C 5C 4H KH 8S 7H\" , & \"7C 2C 5S JC 8S 3H QC 5D 2H KC\" , & \"5S 8D KD 6H 4H QD QH 6D AH 3D\" , & \"7S KS 6C 2S 4D AC QS 5H TS JD\" , & \"7C 2D TC 5D QS AC JS QC 6C KC\" , & \"2C KS 4D 3H TS 8S AD 4H 7S 9S\" , & \"QD 9H QH 5H 4H 4D KH 3S JC AD\" , & \"4D AC KC 8D 6D 4C 2D KH 2C JD\" , & \"2C 9H 2D AH 3H 6D 9C 7D TC KS\" , & \"8C 3H KD 7C 5C 2S 4S 5H AS AH\" , & \"TH JD 4H KD 3H TC 5C 3S AC KH\" , & \"6D 7H AH 7S QC 6H 2D TD JD AS\" , & \"JH 5D 7H TC 9S 7D JC AS 5S KH\" , & \"2H 8C AD TH 6H QD KD 9H 6S 6C\" , & \"QH KC 9D 4D 3S JS JH 4H 2C 9H\" , & \"TC 7H KH 4H JC 7D 9S 3H QS 7S\" , & \"AD 7D JH 6C 7H 4H 3S 3H 4D QH\" , & \"JD 2H 5C AS 6C QC 4D 3C TC JH\" , & \"AC JD 3H 6H 4C JC AD 7D 7H 9H\" , & \"4H TC TS 2C 8C 6S KS 2H JD 9S\" , & \"4C 3H QS QC 9S 9H 6D KC 9D 9C\" , & \"5C AD 8C 2C QH TH QD JC 8D 8H\" , & \"QC 2C 2S QD 9C 4D 3S 8D JH QS\" , & \"9D 3S 2C 7S 7C JC TD 3C TC 9H\" , & \"3C TS 8H 5C 4C 2C 6S 8D 7C 4H\" , & \"KS 7H 2H TC 4H 2C 3S AS AH QS\" , & \"8C 2D 2H 2C 4S 4C 6S 7D 5S 3S\" , & \"TH QC 5D TD 3C QS KD KC KS AS\" , & \"4D AH KD 9H KS 5C 4C 6H JC 7S\" , & \"KC 4H 5C QS TC 2H JC 9S AH QH\" , & \"4S 9H 3H 5H 3C QD 2H QC JH 8H\" , & \"5D AS 7H 2C 3D JH 6H 4C 6S 7D\" , & \"9C JD 9H AH JS 8S QH 3H KS 8H\" , & \"3S AC QC TS 4D AD 3D AH 8S 9H\" , & \"7H 3H QS 9C 9S 5H JH JS AH AC\" , & \"8D 3C JD 2H AC 9C 7H 5S 4D 8H\" , & \"7C JH 9H 6C JS 9S 7H 8C 9D 4H\" , & \"2D AS 9S 6H 4D JS JH 9H AD QD\" , & \"6H 7S JH KH AH 7H TD 5S 6S 2C\" , & \"8H JH 6S 5H 5S 9D TC 4C QC 9S\" , & \"7D 2C KD 3H 5H AS QD 7H JS 4D\" , & \"TS QH 6C 8H TH 5H 3C 3H 9C 9D\" , & \"AD KH JS 5D 3H AS AC 9S 5C KC\" , & \"2C KH 8C JC QS 6D AH 2D KC TC\" , & \"9D 3H 2S 7C 4D 6D KH KS 8D 7D\" , & \"9H 2S TC JH AC QC 3H 5S 3S 8H\" , & \"3S AS KD 8H 4C 3H 7C JH QH TS\" , & \"7S 6D 7H 9D JH 4C 3D 3S 6C AS\" , & \"4S 2H 2C 4C 8S 5H KC 8C QC QD\" , & \"3H 3S 6C QS QC 2D 6S 5D 2C 9D\" , & \"2H 8D JH 2S 3H 2D 6C 5C 7S AD\" , & \"9H JS 5D QH 8S TS 2H 7S 6S AD\" , & \"6D QC 9S 7H 5H 5C 7D KC JD 4H\" , & \"QC 5S 9H 9C 4D 6S KS 2S 4C 7C\" , & \"9H 7C 4H 8D 3S 6H 5C 8H JS 7S\" , & \"2D 6H JS TD 4H 4D JC TH 5H KC\" , & \"AC 7C 8D TH 3H 9S 2D 4C KC 4D\" , & \"KD QS 9C 7S 3D KS AD TS 4C 4H\" , & \"QH 9C 8H 2S 7D KS 7H 5D KD 4C\" , & \"9C 2S 2H JC 6S 6C TC QC JH 5C\" , & \"7S AC 8H KC 8S 6H QS JC 3D 6S\" , & \"JS 2D JH 8C 4S 6H 8H 6D 5D AD\" , & \"6H 7D 2S 4H 9H 7C AS AC 8H 5S\" , & \"3C JS 4S 6D 5H 2S QH 6S 9C 2C\" , & \"3D 5S 6S 9S 4C QS 8D QD 8S TC\" , & \"9C 3D AH 9H 5S 2C 7D AD JC 3S\" , & \"7H TC AS 3C 6S 6D 7S KH KC 9H\" , & \"3S TC 8H 6S 5H JH 8C 7D AC 2S\" , & \"QD 9D 9C 3S JC 8C KS 8H 5D 4D\" , & \"JS AH JD 6D 9D 8C 9H 9S 8H 3H\" , & \"2D 6S 4C 4D 8S AD 4S TC AH 9H\" , & \"TS AC QC TH KC 6D 4H 7S 8C 2H\" , & \"3C QD JS 9D 5S JC AH 2H TS 9H\" , & \"3H 4D QH 5D 9C 5H 7D 4S JC 3S\" , & \"8S TH 3H 7C 2H JD JS TS AC 8D\" , & \"9C 2H TD KC JD 2S 8C 5S AD 2C\" , & \"3D KD 7C 5H 4D QH QD TC 6H 7D\" , & \"7H 2C KC 5S KD 6H AH QC 7S QH\" , & \"6H 5C AC 5H 2C 9C 2D 7C TD 2S\" , & \"4D 9D AH 3D 7C JD 4H 8C 4C KS\" , & \"TH 3C JS QH 8H 4C AS 3D QS QC\" , & \"4D 7S 5H JH 6D 7D 6H JS KH 3C\" , & \"QD 8S 7D 2H 2C 7C JC 2S 5H 8C\" , & \"QH 8S 9D TC 2H AD 7C 8D QD 6S\" , & \"3S 7C AD 9H 2H 9S JD TS 4C 2D\" , & \"3S AS 4H QC 2C 8H 8S 7S TD TC\" , & \"JH TH TD 3S 4D 4H 5S 5D QS 2C\" , & \"8C QD QH TC 6D 4S 9S 9D 4H QC\" , & \"8C JS 9D 6H JD 3H AD 6S TD QC\" , & \"KC 8S 3D 7C TD 7D 8D 9H 4S 3S\" , & \"6C 4S 3D 9D KD TC KC KS AC 5S\" , & \"7C 6S QH 3D JS KD 6H 6D 2D 8C\" , & \"JD 2S 5S 4H 8S AC 2D 6S TS 5C\" , & \"5H 8C 5S 3C 4S 3D 7C 8D AS 3H\" , & \"AS TS 7C 3H AD 7D JC QS 6C 6H\" , & \"3S 9S 4C AC QH 5H 5D 9H TS 4H\" , & \"6C 5C 7H 7S TD AD JD 5S 2H 2S\" , & \"7D 6C KC 3S JD 8D 8S TS QS KH\" , & \"8S QS 8D 6C TH AC AH 2C 8H 9S\" , & \"7H TD KH QH 8S 3D 4D AH JD AS\" , & \"TS 3D 2H JC 2S JH KH 6C QC JS\" , & \"KC TH 2D 6H 7S 2S TC 8C 9D QS\" , & \"3C 9D 6S KH 8H 6D 5D TH 2C 2H\" , & \"6H TC 7D AD 4D 8S TS 9H TD 7S\" , & \"JS 6D JD JC 2H AC 6C 3D KH 8D\" , & \"KH JD 9S 5D 4H 4C 3H 7S QS 5C\" , & \"4H JD 5D 3S 3C 4D KH QH QS 7S\" , & \"JD TS 8S QD AH 4C 6H 3S 5S 2C\" , & \"QS 3D JD AS 8D TH 7C 6S QC KS\" , & \"7S 2H 8C QC 7H AC 6D 2D TH KH\" , & \"5S 6C 7H KH 7D AH 8C 5C 7S 3D\" , & \"3C KD AD 7D 6C 4D KS 2D 8C 4S\" , & \"7C 8D 5S 2D 2S AH AD 2C 9D TD\" , & \"3C AD 4S KS JH 7C 5C 8C 9C TH\" , & \"AS TD 4D 7C JD 8C QH 3C 5H 9S\" , & \"3H 9C 8S 9S 6S QD KS AH 5H JH\" , & \"QC 9C 5S 4H 2H TD 7D AS 8C 9D\" , & \"8C 2C 9D KD TC 7S 3D KH QC 3C\" , & \"4D AS 4C QS 5S 9D 6S JD QH KS\" , & \"6D AH 6C 4C 5H TS 9H 7D 3D 5S\" , & \"QS JD 7C 8D 9C AC 3S 6S 6C KH\" , & \"8H JH 5D 9S 6D AS 6S 3S QC 7H\" , & \"QD AD 5C JH 2H AH 4H AS KC 2C\" , & \"JH 9C 2C 6H 2D JS 5D 9H KC 6D\" , & \"7D 9D KD TH 3H AS 6S QC 6H AD\" , & \"JD 4H 7D KC 3H JS 3C TH 3D QS\" , & \"4C 3H 8C QD 5H 6H AS 8H AD JD\" , & \"TH 8S KD 5D QC 7D JS 5S 5H TS\" , & \"7D KC 9D QS 3H 3C 6D TS 7S AH\" , & \"7C 4H 7H AH QC AC 4D 5D 6D TH\" , & \"3C 4H 2S KD 8H 5H JH TC 6C JD\" , & \"4S 8C 3D 4H JS TD 7S JH QS KD\" , & \"7C QC KD 4D 7H 6S AD TD TC KH\" , & \"5H 9H KC 3H 4D 3D AD 6S QD 6H\" , & \"TH 7C 6H TS QH 5S 2C KC TD 6S\" , & \"7C 4D 5S JD JH 7D AC KD KH 4H\" , & \"7D 6C 8D 8H 5C JH 8S QD TH JD\" , & \"8D 7D 6C 7C 9D KD AS 5C QH JH\" , & \"9S 2C 8C 3C 4C KS JH 2D 8D 4H\" , & \"7S 6C JH KH 8H 3H 9D 2D AH 6D\" , & \"4D TC 9C 8D 7H TD KS TH KD 3C\" , & \"JD 9H 8D QD AS KD 9D 2C 2S 9C\" , & \"8D 3H 5C 7H KS 5H QH 2D 8C 9H\" , & \"2D TH 6D QD 6C KC 3H 3S AD 4C\" , & \"4H 3H JS 9D 3C TC 5H QH QC JC\" , & \"3D 5C 6H 3S 3C JC 5S 7S 2S QH\" , & \"AC 5C 8C 4D 5D 4H 2S QD 3C 3H\" , & \"2C TD AH 9C KD JS 6S QD 4C QC\" , & \"QS 8C 3S 4H TC JS 3H 7C JC AD\" , & \"5H 4D 9C KS JC TD 9S TS 8S 9H\" , & \"QD TS 7D AS AC 2C TD 6H 8H AH\" , & \"6S AD 8C 4S 9H 8D 9D KH 8S 3C\" , & \"QS 4D 2D 7S KH JS JC AD 4C 3C\" , & \"QS 9S 7H KC TD TH 5H JS AC JH\" , & \"6D AC 2S QS 7C AS KS 6S KH 5S\" , & \"6D 8H KH 3C QS 2H 5C 9C 9D 6C\" , & \"JS 2C 4C 6H 7D JC AC QD TD 3H\" , & \"4H QC 8H JD 4C KD KS 5C KC 7S\" , & \"6D 2D 3H 2S QD 5S 7H AS TH 6S\" , & \"AS 6D 8D 2C 8S TD 8H QD JC AH\" , & \"9C 9H 2D TD QH 2H 5C TC 3D 8H\" , & \"KC 8S 3D KH 2S TS TC 6S 4D JH\" , & \"9H 9D QS AC KC 6H 5D 4D 8D AH\" , & \"9S 5C QS 4H 7C 7D 2H 8S AD JS\" , & \"3D AC 9S AS 2C 2D 2H 3H JC KH\" , & \"7H QH KH JD TC KS 5S 8H 4C 8D\" , & \"2H 7H 3S 2S 5H QS 3C AS 9H KD\" , & \"AD 3D JD 6H 5S 9C 6D AC 9S 3S\" , & \"3D 5D 9C 2D AC 4S 2S AD 6C 6S\" , & \"QC 4C 2D 3H 6S KC QH QD 2H JH\" , & \"QC 3C 8S 4D 9S 2H 5C 8H QS QD\" , & \"6D KD 6S 7H 3S KH 2H 5C JC 6C\" , & \"3S 9S TC 6S 8H 2D AD 7S 8S TS\" , & \"3C 6H 9C 3H 5C JC 8H QH TD QD\" , & \"3C JS QD 5D TD 2C KH 9H TH AS\" , & \"9S TC JD 3D 5C 5H AD QH 9H KC\" , & \"TC 7H 4H 8H 3H TD 6S AC 7C 2S\" , & \"QS 9D 5D 3C JC KS 4D 6C JH 2S\" , & \"9S 6S 3C 7H TS 4C KD 6D 3D 9C\" , & \"2D 9H AH AC 7H 2S JH 3S 7C QC\" , & \"QD 9H 3C 2H AC AS 8S KD 8C KH\" , & \"2D 7S TD TH 6D JD 8D 4D 2H 5S\" , & \"8S QH KD JD QS JH 4D KC 5H 3S\" , & \"3C KH QC 6D 8H 3S AH 7D TD 2D\" , & \"5S 9H QH 4S 6S 6C 6D TS TH 7S\" , & \"6C 4C 6D QS JS 9C TS 3H 8D 8S\" , & \"JS 5C 7S AS 2C AH 2H AD 5S TC\" , & \"KD 6C 9C 9D TS 2S JC 4H 2C QD\" , & \"QS 9H TC 3H KC KS 4H 3C AD TH\" , & \"KH 9C 2H KD 9D TC 7S KC JH 2D\" , & \"7C 3S KC AS 8C 5D 9C 9S QH 3H\" , & \"2D 8C TD 4C 2H QC 5D TC 2C 7D\" , & \"KS 4D 6C QH TD KH 5D 7C AD 8D\" , & \"2S 9S 8S 4C 8C 3D 6H QD 7C 7H\" , & \"6C 8S QH 5H TS 5C 3C 4S 2S 2H\" , & \"8S 6S 2H JC 3S 3H 9D 8C 2S 7H\" , & \"QC 2C 8H 9C AC JD 4C 4H 6S 3S\" , & \"3H 3S 7D 4C 9S 5H 8H JC 3D TC\" , & \"QH 2S 2D 9S KD QD 9H AD 6D 9C\" , & \"8D 2D KS 9S JC 4C JD KC 4S TH\" , & \"KH TS 6D 4D 5C KD 5H AS 9H AD\" , & \"QD JS 7C 6D 5D 5C TH 5H QH QS\" , & \"9D QH KH 5H JH 4C 4D TC TH 6C\" , & \"KH AS TS 9D KD 9C 7S 4D 8H 5S\" , & \"KH AS 2S 7D 9D 4C TS TH AH 7C\" , & \"KS 4D AC 8S 9S 8D TH QH 9D 5C\" , & \"5D 5C 8C QS TC 4C 3D 3S 2C 8D\" , & \"9D KS 2D 3C KC 4S 8C KH 6C JC\" , & \"8H AH 6H 7D 7S QD 3C 4C 6C KC\" , & \"3H 2C QH 8H AS 7D 4C 8C 4H KC\" , & \"QD 5S 4H 2C TD AH JH QH 4C 8S\" , & \"3H QS 5S JS 8H 2S 9H 9C 3S 2C\" , & \"6H TS 7S JC QD AC TD KC 5S 3H\" , & \"QH AS QS 7D JC KC 2C 4C 5C 5S\" , & \"QH 3D AS JS 4H 8D 7H JC 2S 9C\" , & \"5D 4D 2S 4S 9D 9C 2D QS 8H 7H\" , & \"6D 7H 3H JS TS AC 2D JH 7C 8S\" , & \"JH 5H KC 3C TC 5S 9H 4C 8H 9D\" , & \"8S KC 5H 9H AD KS 9D KH 8D AH\" , & \"JC 2H 9H KS 6S 3H QC 5H AH 9C\" , & \"5C KH 5S AD 6C JC 9H QC 9C TD\" , & \"5S 5D JC QH 2D KS 8H QS 2H TS\" , & \"JH 5H 5S AH 7H 3C 8S AS TD KH\" , & \"6H 3D JD 2C 4C KC 7S AH 6C JH\" , & \"4C KS 9D AD 7S KC 7D 8H 3S 9C\" , & \"7H 5C 5H 3C 8H QC 3D KH 6D JC\" , & \"2D 4H 5D 7D QC AD AH 9H QH 8H\" , & \"KD 8C JS 9D 3S 3C 2H 5D 6D 2S\" , & \"8S 6S TS 3C 6H 8D 5S 3H TD 6C\" , & \"KS 3D JH 9C 7C 9S QS 5S 4H 6H\" , & \"7S 6S TH 4S KC KD 3S JC JH KS\" , & \"7C 3C 2S 6D QH 2C 7S 5H 8H AH\" , & \"KC 8D QD 6D KH 5C 7H 9D 3D 9C\" , & \"6H 2D 8S JS 9S 2S 6D KC 7C TC\" , & \"KD 9C JH 7H KC 8S 2S 7S 3D 6H\" , & \"4H 9H 2D 4C 8H 7H 5S 8S 2H 8D\" , & \"AD 7C 3C 7S 5S 4D 9H 3D JC KH\" , & \"5D AS 7D 6D 9C JC 4C QH QS KH\" , & \"KD JD 7D 3D QS QC 8S 6D JS QD\" , & \"6S 8C 5S QH TH 9H AS AC 2C JD\" , & \"QC KS QH 7S 3C 4C 5C KC 5D AH\" , & \"6C 4H 9D AH 2C 3H KD 3D TS 5C\" , & \"TD 8S QS AS JS 3H KD AC 4H KS\" , & \"7D 5D TS 9H 4H 4C 9C 2H 8C QC\" , & \"2C 7D 9H 4D KS 4C QH AD KD JS\" , & \"QD AD AH KH 9D JS 9H JC KD JD\" , & \"8S 3C 4S TS 7S 4D 5C 2S 6H 7C\" , & \"JS 7S 5C KD 6D QH 8S TD 2H 6S\" , & \"QH 6C TC 6H TD 4C 9D 2H QC 8H\" , & \"3D TS 4D 2H 6H 6S 2C 7H 8S 6C\" , & \"9H 9D JD JH 3S AH 2C 6S 3H 8S\" , & \"2C QS 8C 5S 3H 2S 7D 3C AD 4S\" , & \"5C QC QH AS TS 4S 6S 4C 5H JS\" , & \"JH 5C TD 4C 6H JS KD KH QS 4H\" , & \"TC KH JC 4D 9H 9D 8D KC 3C 8H\" , & \"2H TC 8S AD 9S 4H TS 7H 2C 5C\" , & \"4H 2S 6C 5S KS AH 9C 7C 8H KD\" , & \"TS QH TD QS 3C JH AH 2C 8D 7D\" , & \"5D KC 3H 5S AC 4S 7H QS 4C 2H\" , & \"3D 7D QC KH JH 6D 6C TD TH KD\" , & \"5S 8D TH 6C 9D 7D KH 8C 9S 6D\" , & \"JD QS 7S QC 2S QH JC 4S KS 8D\" , & \"7S 5S 9S JD KD 9C JC AD 2D 7C\" , & \"4S 5H AH JH 9C 5D TD 7C 2D 6S\" , & \"KC 6C 7H 6S 9C QD 5S 4H KS TD\" , & \"6S 8D KS 2D TH TD 9H JD TS 3S\" , & \"KH JS 4H 5D 9D TC TD QC JD TS\" , & \"QS QD AC AD 4C 6S 2D AS 3H KC\" , & \"4C 7C 3C TD QS 9C KC AS 8D AD\" , & \"KC 7H QC 6D 8H 6S 5S AH 7S 8C\" , & \"3S AD 9H JC 6D JD AS KH 6S JH\" , & \"AD 3D TS KS 7H JH 2D JS QD AC\" , & \"9C JD 7C 6D TC 6H 6C JC 3D 3S\" , & \"QC KC 3S JC KD 2C 8D AH QS TS\" , & \"AS KD 3D JD 8H 7C 8C 5C QD 6C\" ] end subroutine get_euler_data_0054 subroutine get_euler_data_0059 ( euler_data ) integer , allocatable , intent ( out ) :: euler_data (:) euler_data = & [ integer :: & 36 , & 22 , & 80 , & 0 , & 0 , & 4 , & 23 , & 25 , & 19 , & 17 , & 88 , & 4 , & 4 , & 19 , & 21 , & 11 , & 88 , & 22 , & 23 , & 23 , & 29 , & 69 , & 12 , & 24 , & 0 , & 88 , & 25 , & 11 , & 12 , & 2 , & 10 , & 28 , & 5 , & 6 , & 12 , & 25 , & 10 , & 22 , & 80 , & 10 , & 30 , & 80 , & 10 , & 22 , & 21 , & 69 , & 23 , & 22 , & 69 , & 61 , & 5 , & 9 , & 29 , & 2 , & 66 , & 11 , & 80 , & 8 , & 23 , & 3 , & 17 , & 88 , & 19 , & 0 , & 20 , & 21 , & 7 , & 10 , & 17 , & 17 , & 29 , & 20 , & 69 , & 8 , & 17 , & 21 , & 29 , & 2 , & 22 , & 84 , & 80 , & 71 , & 60 , & 21 , & 69 , & 11 , & 5 , & 8 , & 21 , & 25 , & 22 , & 88 , & 3 , & 0 , & 10 , & 25 , & 0 , & 10 , & 5 , & 8 , & 88 , & 2 , & 0 , & 27 , & 25 , & 21 , & 10 , & 31 , & 6 , & 25 , & 2 , & 16 , & 21 , & 82 , & 69 , & 35 , & 63 , & 11 , & 88 , & 4 , & 13 , & 29 , & 80 , & 22 , & 13 , & 29 , & 22 , & 88 , & 31 , & 3 , & 88 , & 3 , & 0 , & 10 , & 25 , & 0 , & 11 , & 80 , & 10 , & 30 , & 80 , & 23 , & 29 , & 19 , & 12 , & 8 , & 2 , & 10 , & 27 , & 17 , & 9 , & 11 , & 45 , & 95 , & 88 , & 57 , & 69 , & 16 , & 17 , & 19 , & 29 , & 80 , & 23 , & 29 , & 19 , & 0 , & 22 , & 4 , & 9 , & 1 , & 80 , & 3 , & 23 , & 5 , & 11 , & 28 , & 92 , & 69 , & 9 , & 5 , & 12 , & 12 , & 21 , & 69 , & 13 , & 30 , & 0 , & 0 , & 0 , & 0 , & 27 , & 4 , & 0 , & 28 , & 28 , & 28 , & 84 , & 80 , & 4 , & 22 , & 80 , & 0 , & 20 , & 21 , & 2 , & 25 , & 30 , & 17 , & 88 , & 21 , & 29 , & 8 , & 2 , & 0 , & 11 , & 3 , & 12 , & 23 , & 30 , & 69 , & 30 , & 31 , & 23 , & 88 , & 4 , & 13 , & 29 , & 80 , & 0 , & 22 , & 4 , & 12 , & 10 , & 21 , & 69 , & 11 , & 5 , & 8 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 17 , & 3 , & 69 , & 11 , & 21 , & 23 , & 17 , & 21 , & 22 , & 88 , & 65 , & 69 , & 83 , & 80 , & 84 , & 87 , & 68 , & 69 , & 83 , & 80 , & 84 , & 87 , & 73 , & 69 , & 83 , & 80 , & 84 , & 87 , & 65 , & 83 , & 88 , & 91 , & 69 , & 29 , & 4 , & 6 , & 86 , & 92 , & 69 , & 15 , & 24 , & 12 , & 27 , & 24 , & 69 , & 28 , & 21 , & 21 , & 29 , & 30 , & 1 , & 11 , & 80 , & 10 , & 22 , & 80 , & 17 , & 16 , & 21 , & 69 , & 9 , & 5 , & 4 , & 28 , & 2 , & 4 , & 12 , & 5 , & 23 , & 29 , & 80 , & 10 , & 30 , & 80 , & 17 , & 16 , & 21 , & 69 , & 27 , & 25 , & 23 , & 27 , & 28 , & 0 , & 84 , & 80 , & 22 , & 23 , & 80 , & 17 , & 16 , & 17 , & 17 , & 88 , & 25 , & 3 , & 88 , & 4 , & 13 , & 29 , & 80 , & 17 , & 10 , & 5 , & 0 , & 88 , & 3 , & 16 , & 21 , & 80 , & 10 , & 30 , & 80 , & 17 , & 16 , & 25 , & 22 , & 88 , & 3 , & 0 , & 10 , & 25 , & 0 , & 11 , & 80 , & 12 , & 11 , & 80 , & 10 , & 26 , & 4 , & 4 , & 17 , & 30 , & 0 , & 28 , & 92 , & 69 , & 30 , & 2 , & 10 , & 21 , & 80 , & 12 , & 12 , & 80 , & 4 , & 12 , & 80 , & 10 , & 22 , & 19 , & 0 , & 88 , & 4 , & 13 , & 29 , & 80 , & 20 , & 13 , & 17 , & 1 , & 10 , & 17 , & 17 , & 13 , & 2 , & 0 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 29 , & 80 , & 6 , & 17 , & 2 , & 6 , & 20 , & 21 , & 69 , & 30 , & 31 , & 9 , & 20 , & 31 , & 18 , & 11 , & 94 , & 69 , & 54 , & 17 , & 8 , & 29 , & 28 , & 28 , & 84 , & 80 , & 44 , & 88 , & 24 , & 4 , & 14 , & 21 , & 69 , & 30 , & 31 , & 16 , & 22 , & 20 , & 69 , & 12 , & 24 , & 4 , & 12 , & 80 , & 17 , & 16 , & 21 , & 69 , & 11 , & 5 , & 8 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 17 , & 3 , & 69 , & 11 , & 21 , & 23 , & 17 , & 21 , & 22 , & 88 , & 25 , & 22 , & 88 , & 17 , & 69 , & 11 , & 25 , & 29 , & 12 , & 24 , & 69 , & 8 , & 17 , & 23 , & 12 , & 80 , & 10 , & 30 , & 80 , & 17 , & 16 , & 21 , & 69 , & 11 , & 1 , & 16 , & 25 , & 2 , & 0 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 29 , & 80 , & 21 , & 29 , & 2 , & 12 , & 21 , & 21 , & 17 , & 29 , & 2 , & 69 , & 23 , & 22 , & 69 , & 12 , & 24 , & 0 , & 88 , & 19 , & 12 , & 10 , & 19 , & 9 , & 29 , & 80 , & 18 , & 16 , & 31 , & 22 , & 29 , & 80 , & 1 , & 17 , & 17 , & 8 , & 29 , & 4 , & 0 , & 10 , & 80 , & 12 , & 11 , & 80 , & 84 , & 67 , & 80 , & 10 , & 10 , & 80 , & 7 , & 1 , & 80 , & 21 , & 13 , & 4 , & 17 , & 17 , & 30 , & 2 , & 88 , & 4 , & 13 , & 29 , & 80 , & 22 , & 13 , & 29 , & 69 , & 23 , & 22 , & 69 , & 12 , & 24 , & 12 , & 11 , & 80 , & 22 , & 29 , & 2 , & 12 , & 29 , & 3 , & 69 , & 29 , & 1 , & 16 , & 25 , & 28 , & 69 , & 12 , & 31 , & 69 , & 11 , & 92 , & 69 , & 17 , & 4 , & 69 , & 16 , & 17 , & 22 , & 88 , & 4 , & 13 , & 29 , & 80 , & 23 , & 25 , & 4 , & 12 , & 23 , & 80 , & 22 , & 9 , & 2 , & 17 , & 80 , & 70 , & 76 , & 88 , & 29 , & 16 , & 20 , & 4 , & 12 , & 8 , & 28 , & 12 , & 29 , & 20 , & 69 , & 26 , & 9 , & 69 , & 11 , & 80 , & 17 , & 23 , & 80 , & 84 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 29 , & 80 , & 21 , & 29 , & 2 , & 12 , & 21 , & 21 , & 17 , & 29 , & 2 , & 69 , & 12 , & 31 , & 69 , & 12 , & 24 , & 0 , & 88 , & 20 , & 12 , & 25 , & 29 , & 0 , & 12 , & 21 , & 23 , & 86 , & 80 , & 44 , & 88 , & 7 , & 12 , & 20 , & 28 , & 69 , & 11 , & 31 , & 10 , & 22 , & 80 , & 22 , & 16 , & 31 , & 18 , & 88 , & 4 , & 13 , & 25 , & 4 , & 69 , & 12 , & 24 , & 0 , & 88 , & 3 , & 16 , & 21 , & 80 , & 10 , & 30 , & 80 , & 17 , & 16 , & 25 , & 22 , & 88 , & 3 , & 0 , & 10 , & 25 , & 0 , & 11 , & 80 , & 17 , & 23 , & 80 , & 7 , & 29 , & 80 , & 4 , & 8 , & 0 , & 23 , & 23 , & 8 , & 12 , & 21 , & 17 , & 17 , & 29 , & 28 , & 28 , & 88 , & 65 , & 75 , & 78 , & 68 , & 81 , & 65 , & 67 , & 81 , & 72 , & 70 , & 83 , & 64 , & 68 , & 87 , & 74 , & 70 , & 81 , & 75 , & 70 , & 81 , & 67 , & 80 , & 4 , & 22 , & 20 , & 69 , & 30 , & 2 , & 10 , & 21 , & 80 , & 8 , & 13 , & 28 , & 17 , & 17 , & 0 , & 9 , & 1 , & 25 , & 11 , & 31 , & 80 , & 17 , & 16 , & 25 , & 22 , & 88 , & 30 , & 16 , & 21 , & 18 , & 0 , & 10 , & 80 , & 7 , & 1 , & 80 , & 22 , & 17 , & 8 , & 73 , & 88 , & 17 , & 11 , & 28 , & 80 , & 17 , & 16 , & 21 , & 11 , & 88 , & 4 , & 4 , & 19 , & 25 , & 11 , & 31 , & 80 , & 17 , & 16 , & 21 , & 69 , & 11 , & 1 , & 16 , & 25 , & 2 , & 0 , & 88 , & 2 , & 10 , & 23 , & 4 , & 73 , & 88 , & 4 , & 13 , & 29 , & 80 , & 11 , & 13 , & 29 , & 7 , & 29 , & 2 , & 69 , & 75 , & 94 , & 84 , & 76 , & 65 , & 80 , & 65 , & 66 , & 83 , & 77 , & 67 , & 80 , & 64 , & 73 , & 82 , & 65 , & 67 , & 87 , & 75 , & 72 , & 69 , & 17 , & 3 , & 69 , & 17 , & 30 , & 1 , & 29 , & 21 , & 1 , & 88 , & 0 , & 23 , & 23 , & 20 , & 16 , & 27 , & 21 , & 1 , & 84 , & 80 , & 18 , & 16 , & 25 , & 6 , & 16 , & 80 , & 0 , & 0 , & 0 , & 23 , & 29 , & 3 , & 22 , & 29 , & 3 , & 69 , & 12 , & 24 , & 0 , & 88 , & 0 , & 0 , & 10 , & 25 , & 8 , & 29 , & 4 , & 0 , & 10 , & 80 , & 10 , & 30 , & 80 , & 4 , & 88 , & 19 , & 12 , & 10 , & 19 , & 9 , & 29 , & 80 , & 18 , & 16 , & 31 , & 22 , & 29 , & 80 , & 1 , & 17 , & 17 , & 8 , & 29 , & 4 , & 0 , & 10 , & 80 , & 12 , & 11 , & 80 , & 84 , & 86 , & 80 , & 35 , & 23 , & 28 , & 9 , & 23 , & 7 , & 12 , & 22 , & 23 , & 69 , & 25 , & 23 , & 4 , & 17 , & 30 , & 69 , & 12 , & 24 , & 0 , & 88 , & 3 , & 4 , & 21 , & 21 , & 69 , & 11 , & 4 , & 0 , & 8 , & 3 , & 69 , & 26 , & 9 , & 69 , & 15 , & 24 , & 12 , & 27 , & 24 , & 69 , & 49 , & 80 , & 13 , & 25 , & 20 , & 69 , & 25 , & 2 , & 23 , & 17 , & 6 , & 0 , & 28 , & 80 , & 4 , & 12 , & 80 , & 17 , & 16 , & 25 , & 22 , & 88 , & 3 , & 16 , & 21 , & 92 , & 69 , & 49 , & 80 , & 13 , & 25 , & 6 , & 0 , & 88 , & 20 , & 12 , & 11 , & 19 , & 10 , & 14 , & 21 , & 23 , & 29 , & 20 , & 69 , & 12 , & 24 , & 4 , & 12 , & 80 , & 17 , & 16 , & 21 , & 69 , & 11 , & 5 , & 8 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 29 , & 80 , & 22 , & 29 , & 2 , & 12 , & 29 , & 3 , & 69 , & 73 , & 80 , & 78 , & 88 , & 65 , & 74 , & 73 , & 70 , & 69 , & 83 , & 80 , & 84 , & 87 , & 72 , & 84 , & 88 , & 91 , & 69 , & 73 , & 95 , & 87 , & 77 , & 70 , & 69 , & 83 , & 80 , & 84 , & 87 , & 70 , & 87 , & 77 , & 80 , & 78 , & 88 , & 21 , & 17 , & 27 , & 94 , & 69 , & 25 , & 28 , & 22 , & 23 , & 80 , & 1 , & 29 , & 0 , & 0 , & 22 , & 20 , & 22 , & 88 , & 31 , & 11 , & 88 , & 4 , & 13 , & 29 , & 80 , & 20 , & 13 , & 17 , & 1 , & 10 , & 17 , & 17 , & 13 , & 2 , & 0 , & 88 , & 31 , & 3 , & 88 , & 4 , & 13 , & 29 , & 80 , & 6 , & 17 , & 2 , & 6 , & 20 , & 21 , & 75 , & 88 , & 62 , & 4 , & 21 , & 21 , & 9 , & 1 , & 92 , & 69 , & 12 , & 24 , & 0 , & 88 , & 3 , & 16 , & 21 , & 80 , & 10 , & 30 , & 80 , & 17 , & 16 , & 25 , & 22 , & 88 , & 29 , & 16 , & 20 , & 4 , & 12 , & 8 , & 28 , & 12 , & 29 , & 20 , & 69 , & 26 , & 9 , & 69 , & 65 , & 64 , & 69 , & 31 , & 25 , & 19 , & 29 , & 3 , & 69 , & 12 , & 24 , & 0 , & 88 , & 18 , & 12 , & 9 , & 5 , & 4 , & 28 , & 2 , & 4 , & 12 , & 21 , & 69 , & 80 , & 22 , & 10 , & 13 , & 2 , & 17 , & 16 , & 80 , & 21 , & 23 , & 7 , & 0 , & 10 , & 89 , & 69 , & 23 , & 22 , & 69 , & 12 , & 24 , & 0 , & 88 , & 19 , & 12 , & 10 , & 19 , & 16 , & 21 , & 22 , & 0 , & 10 , & 21 , & 11 , & 27 , & 21 , & 69 , & 23 , & 22 , & 69 , & 12 , & 24 , & 0 , & 88 , & 0 , & 0 , & 10 , & 25 , & 8 , & 29 , & 4 , & 0 , & 10 , & 80 , & 10 , & 30 , & 80 , & 4 , & 88 , & 19 , & 12 , & 10 , & 19 , & 9 , & 29 , & 80 , & 18 , & 16 , & 31 , & 22 , & 29 , & 80 , & 1 , & 17 , & 17 , & 8 , & 29 , & 4 , & 0 , & 10 , & 80 , & 12 , & 11 , & 80 , & 84 , & 86 , & 80 , & 36 , & 22 , & 20 , & 69 , & 26 , & 9 , & 69 , & 11 , & 25 , & 8 , & 17 , & 28 , & 4 , & 10 , & 80 , & 23 , & 29 , & 17 , & 22 , & 23 , & 30 , & 12 , & 22 , & 23 , & 69 , & 49 , & 80 , & 13 , & 25 , & 6 , & 0 , & 88 , & 28 , & 12 , & 19 , & 21 , & 18 , & 17 , & 3 , & 0 , & 88 , & 18 , & 0 , & 29 , & 30 , & 69 , & 25 , & 18 , & 9 , & 29 , & 80 , & 17 , & 23 , & 80 , & 1 , & 29 , & 4 , & 0 , & 10 , & 29 , & 12 , & 22 , & 21 , & 69 , & 12 , & 24 , & 0 , & 88 , & 3 , & 16 , & 21 , & 3 , & 69 , & 23 , & 22 , & 69 , & 12 , & 24 , & 0 , & 88 , & 3 , & 16 , & 26 , & 3 , & 0 , & 9 , & 5 , & 0 , & 22 , & 4 , & 69 , & 11 , & 21 , & 23 , & 17 , & 21 , & 22 , & 88 , & 25 , & 11 , & 88 , & 7 , & 13 , & 17 , & 19 , & 13 , & 88 , & 4 , & 13 , & 29 , & 80 , & 0 , & 0 , & 0 , & 10 , & 22 , & 21 , & 11 , & 12 , & 3 , & 69 , & 25 , & 2 , & 0 , & 88 , & 21 , & 19 , & 29 , & 30 , & 69 , & 22 , & 5 , & 8 , & 26 , & 21 , & 23 , & 11 , & 94 ] end subroutine get_euler_data_0059 end module euler_data_m","tags":"","loc":"sourcefile/euler_data_m.f90.html"},{"title":"euler_multiprecision_m.f90 – PE Fortran","text":"This file depends on sourcefile~~euler_multiprecision_m.f90~~EfferentGraph sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~euler_multiprecision_m.f90~~AfferentGraph sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~prob_0013_m.f90 prob_0013_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0055_m.f90 prob_0055_m.f90 sourcefile~prob_0055_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0057_m.f90 prob_0057_m.f90 sourcefile~prob_0057_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0063_m.f90 prob_0063_m.f90 sourcefile~prob_0063_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~prob_0056_m.f90 prob_0056_m.f90 sourcefile~prob_0056_m.f90->sourcefile~euler_multiprecision_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_multiprecision_m Source Code euler_multiprecision_m.f90 Source Code module euler_multiprecision_m use euler_multiprecision_util_m implicit none private type , public :: multiprecision_int_t !! Muliple precision integer type for Project Euler !! !!### Usage !!#### Addition !!``` fortran !!  type(multiprecision_int_t) :: a, b, c !!  integer(int32) :: d !!  integer(int32), dimension(4) :: e !! !!  a = '29348579238475928347592345' !!  b = '49587394758345983423486928347' !!  ! Add two multiprecision integer types together !!  c = a + b !!  ! Add a multiprecision integer type with an 32bit integer !!  ! (every time the assignment '=' appears the allocatable array !!  ! will be re-allocated) !!  d = 2394 !!  c = a + d !!  ! One could also do something like the following, the array !!  ! will be treated like an integer. !!  e = [2, 3, 9, 4] !!  c = a + e !!``` !! !!#### Subtraction !!``` fortran !!  type(multiprecision_int_t) :: a, b, c !!  a = '29348579238475928347592345' !!  b = '49587394758345983423486928347' !! !!  c = a - b !!``` !! !!#### Multiplication !!``` fortran !!  type(multiprecision_int_t) :: a, b, c !!  a = '29348579238475928347592345' !!  b = '49587394758345983423486928347' !! !!  c = a*b !!``` !! !!#### Power !!``` fortran !!  type(multiprecision_int_t) :: a, b !! !!  b = a**2345 !!``` !! !!#### Comparison !!``` fortran !!  type(multiprecision_int_t) :: a, b, c !! !!  a = '29348579238475928347592345' !!  b = '49587394758345983423486928347' !!  print *, a >= b, a == b, a <= b !!``` !! !!### To-do list !! * Print the value !! * Floor division (for Miller-rabin) !! * Power (Partially done) !! * Factorial integer , allocatable :: arr (:) character ( len = 1 ) :: sgn contains procedure :: re_alloc => re_alloc_sub procedure , private :: init_char_sub , init_int_sub , init_arr_sub generic :: assignment ( = ) => init_char_sub , init_int_sub , init_arr_sub procedure , private :: eq_func , eq_int_func , eq_char_func generic :: operator ( == ) => eq_func , eq_int_func , eq_char_func procedure , private :: gt_func , gt_int_func , gt_char_func generic :: operator ( > ) => gt_func , gt_int_func , gt_char_func procedure , private :: lt_func , lt_int_func , lt_char_func generic :: operator ( < ) => lt_func , lt_int_func , lt_char_func procedure , private :: ge_func , ge_int_func , ge_char_func generic :: operator ( >= ) => ge_func , ge_int_func , ge_char_func procedure , private :: le_func , le_int_func , le_char_func generic :: operator ( <= ) => le_func , le_int_func , le_char_func procedure , private :: add_func , add_int_func , add_char_func generic :: operator ( + ) => add_func , add_int_func , add_char_func procedure , private :: sub_func , sub_int_func , sub_char_func generic :: operator ( - ) => sub_func , sub_int_func , sub_char_func procedure , private :: mul_func , mul_int_func , mul_char_func generic :: operator ( * ) => mul_func , mul_int_func , mul_char_func ! procedure, private :: div_func, div_int_func, div_char_func ! generic :: operator(/) => div_func, div_int_func, div_char_func procedure , private :: pow_int_func generic :: operator ( ** ) => pow_int_func ! procedure, private :: fac_func, fac_int_func, fac_char_func ! generic :: operator(.fac.) => fac_func, fac_int_func, fac_char_func end type multiprecision_int_t public :: to_long interface to_long !! A generic interface that converts an integer or a string !! into a multiple precision integer type. !! !!### Usage !!```fortran !!  type(multiprecision_int_t) :: a, b !!  a = '23405982034958034850495098430294850293485' !!  b = a + to_long('93845734958') !!``` module procedure to_long_char , to_long_int end interface public :: digits_of interface digits_of !! A generic interface that returns the length(digits) of a multiple !! precision integer, essentially that is !! !!### Usage !!```fortran !!  type(multiprecision_int_t) :: a !!  a = '23405982034958034850495098430294850293485' !!  print *, size(a%arr) == digits_of(a) ! T !!``` module procedure digits_of_func end interface digits_of contains subroutine re_alloc_sub ( this , n ) class ( multiprecision_int_t ), intent ( inout ) :: this integer , intent ( in ) :: n if ( allocated ( this % arr )) deallocate ( this % arr ) allocate ( this % arr ( n )) end subroutine re_alloc_sub subroutine init_char_sub ( this , chars ) class ( multiprecision_int_t ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: chars integer :: i select case ( chars ( 1 : 1 )) case ( '+' ) this % sgn = '+' call this % re_alloc ( len ( chars ) - 1 ) do i = 2 , len ( chars ) read ( chars ( i : i ), * ) this % arr ( i - 1 ) end do case ( '-' ) this % sgn = '-' call this % re_alloc ( len ( chars ) - 1 ) do i = 2 , len ( chars ) read ( chars ( i : i ), * ) this % arr ( i - 1 ) end do case default this % sgn = '+' call this % re_alloc ( len ( chars )) do i = 1 , len ( chars ) read ( chars ( i : i ), * ) this % arr ( i ) end do end select end subroutine init_char_sub subroutine init_arr_sub ( this , arr ) class ( multiprecision_int_t ), intent ( inout ) :: this integer , allocatable , intent ( in ) :: arr (:) this % arr = arr (:) this % sgn = '+' end subroutine init_arr_sub subroutine init_int_sub ( this , val ) class ( multiprecision_int_t ), intent ( inout ) :: this integer , intent ( in ) :: val integer :: tmp , i , digs if ( val >= 0 ) then this % sgn = '+' else this % sgn = '-' end if tmp = abs ( val ) digs = floor ( log10 ( real ( tmp ))) + 1 call this % re_alloc ( digs ) do i = digs , 1 , - 1 this % arr ( i ) = int ( mod ( tmp , 10 )) tmp = tmp / 10 end do end subroutine init_int_sub function to_long_char ( chars ) result ( ret ) character ( len =* ), intent ( in ) :: chars type ( multiprecision_int_t ) :: ret ret = chars end function to_long_char function to_long_int ( val ) result ( ret ) integer , intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = val end function to_long_int function digits_of_func ( val ) result ( ret ) type ( multiprecision_int_t ), intent ( in ) :: val integer :: ret ret = size ( val % arr ) end function digits_of_func logical function eq_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val eq_func = . false . if ( compare ( this % arr , val % arr ) == 0 . and . & this % sgn == val % sgn ) eq_func = . true . end function eq_func logical function eq_int_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val eq_int_func = this % eq_func ( to_long ( val )) end function eq_int_func logical function eq_char_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val eq_char_func = this % eq_func ( to_long ( val )) end function eq_char_func logical function gt_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val gt_func = . false . if ( this % sgn == '+' . and . val % sgn == '-' ) then gt_func = . true . else if ( compare ( this % arr , val % arr ) == 1 . and . & this % sgn == '+' . and . val % sgn == '+' ) then gt_func = . true . else if ( compare ( this % arr , val % arr ) == - 1 . and . & this % sgn == '-' . and . val % sgn == '-' ) then gt_func = . true . end if end function gt_func logical function gt_int_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val gt_int_func = this % gt_func ( to_long ( val )) end function gt_int_func logical function gt_char_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val gt_char_func = this % gt_func ( to_long ( val )) end function gt_char_func logical function lt_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val lt_func = . false . if ( this % sgn == '-' . and . val % sgn == '+' ) then lt_func = . true . else if ( compare ( this % arr , val % arr ) == - 1 . and . & this % sgn == '+' . and . val % sgn == '+' ) then lt_func = . true . else if ( compare ( this % arr , val % arr ) == 1 . and . & this % sgn == '-' . and . val % sgn == '-' ) then lt_func = . true . end if end function lt_func logical function lt_int_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val lt_int_func = this % lt_func ( to_long ( val )) end function lt_int_func logical function lt_char_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val lt_char_func = this % lt_func ( to_long ( val )) end function lt_char_func logical function ge_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val ge_func = . false . if ( this % gt_func ( val ) . or . this % eq_func ( val )) ge_func = . true . end function ge_func logical function ge_int_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val ge_int_func = this % ge_func ( to_long ( val )) end function ge_int_func logical function ge_char_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val ge_char_func = this % ge_func ( to_long ( val )) end function ge_char_func logical function le_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val le_func = . false . if ( this % lt_func ( val ) . or . this % eq_func ( val )) le_func = . true . end function le_func logical function le_int_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val le_int_func = this % le_func ( to_long ( val )) end function le_int_func logical function le_char_func ( this , val ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val le_char_func = this % le_func ( to_long ( val )) end function le_char_func function add_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret if ( compare ( this % arr , val % arr ) == 0 . and . & this % sgn /= val % sgn ) then ret = '0' else if ( this % sgn == '+' . and . val % sgn == '+' ) then ret % arr = add ( this % arr , val % arr ) ret % sgn = '+' else if ( this % sgn == '-' . and . val % sgn == '-' ) then ret % arr = add ( this % arr , val % arr ) ret % sgn = '-' else if ( this % sgn == '+' . and . val % sgn == '-' ) then if ( compare ( this % arr , val % arr ) == 1 ) then ret % arr = sub ( this % arr , val % arr ) ret % sgn = '+' else ret % arr = sub ( val % arr , this % arr ) ret % sgn = '-' end if else if ( this % sgn == '-' . and . val % sgn == '+' ) then if ( compare ( this % arr , val % arr ) == 1 ) then ret % arr = sub ( this % arr , val % arr ) ret % sgn = '-' else ret % arr = sub ( val % arr , this % arr ) ret % sgn = '+' end if end if end function function add_int_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = this % add_func ( to_long ( val )) end function add_int_func function add_char_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = this % add_func ( to_long ( val )) end function add_char_func function sub_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret if ( this == val ) then ret = '0' else if ( this % sgn == '+' . and . val % sgn == '+' ) then if ( compare ( this % arr , val % arr ) == 1 ) then ret % arr = sub ( this % arr , val % arr ) ret % sgn = '+' else ret % arr = sub ( val % arr , this % arr ) ret % sgn = '-' end if else if ( this % sgn == '+' . and . val % sgn == '-' ) then ret % arr = add ( this % arr , val % arr ) ret % sgn = '+' else if ( this % sgn == '-' . and . val % sgn == '+' ) then ret % arr = add ( this % arr , val % arr ) ret % sgn = '-' else if ( this % sgn == '-' . and . val % sgn == '-' ) then if ( compare ( this % arr , val % arr ) == 1 ) then ret % arr = sub ( this % arr , val % arr ) ret % sgn = '-' else ret % arr = sub ( val % arr , this % arr ) ret % sgn = '+' end if end if end function sub_func function sub_int_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = this % sub_func ( to_long ( val )) end function sub_int_func function sub_char_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = this % sub_func ( to_long ( val )) end function sub_char_func function mul_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this type ( multiprecision_int_t ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret if ( this == 0 . or . val == 0 ) then ret % sgn = '+' ret % arr = [ 0 ] else if ( this % sgn == val % sgn ) then ret % sgn = '+' ret % arr = mul ( this % arr , val % arr ) else if ( this % sgn /= val % sgn ) then ret % sgn = '-' ret % arr = mul ( this % arr , val % arr ) end if end function mul_func function mul_int_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = this % mul_func ( to_long ( val )) end function mul_int_func function mul_char_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this character ( len =* ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret ret = this % mul_func ( to_long ( val )) end function mul_char_func function pow_int_func ( this , val ) result ( ret ) class ( multiprecision_int_t ), intent ( in ) :: this integer , intent ( in ) :: val type ( multiprecision_int_t ) :: ret if ( this % sgn == '+' ) then ret % sgn = '+' ret % arr = pow2 ( this % arr , val ) else if ( mod ( val , 2 ) == 0 ) then ret % sgn = '+' else if ( mod ( val , 2 ) /= 0 ) then ret % sgn = '-' end if ret % arr = pow2 ( this % arr , val ) end if end function pow_int_func end module euler_multiprecision_m","tags":"","loc":"sourcefile/euler_multiprecision_m.f90.html"},{"title":"euler_main_m.f90 – PE Fortran","text":"This file depends on sourcefile~~euler_main_m.f90~~EfferentGraph sourcefile~euler_main_m.f90 euler_main_m.f90 sourcefile~euler_prob_api_m.f90 euler_prob_api_m.f90 sourcefile~euler_main_m.f90->sourcefile~euler_prob_api_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~euler_prob_api_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_main_m Source Code euler_main_m.f90 Source Code module euler_main_m use iso_fortran_env , only : compiler_options , compiler_version use euler_prob_api_m implicit none private character ( len = 20 ), parameter :: failed = repeat ( ' ' , 19 ) // 'x' character ( len = :), allocatable :: help_messages (:), version_messages (:) public :: get_arguments contains subroutine print_allocatable_character_array ( character_array ) character ( len = :), allocatable , intent ( in ) :: character_array (:) integer :: i do i = 1 , size ( character_array ) print '(a)' , character_array ( i ) end do end subroutine print_allocatable_character_array subroutine get_version_messages () version_messages = & [ character ( len = 80 ) :: & 'Project Name: PE-Fortran' , & 'Version: 0.0.1' , & 'License: MIT' , & 'Copyright: Copyright 2019 - 2021, Han Tang' , & 'Homepage: https://github.com/han190/PE-Fortran' , & ' ' ] end subroutine get_version_messages subroutine print_version_messages () call get_version_messages () call print_allocatable_character_array ( version_messages ) end subroutine print_version_messages subroutine get_help_messages () help_messages = & [ character ( len = 80 ) :: & 'PE Fortran Solution' , & 'Arguments:' , & '   -v, --version          Print version.' , & '   -h, --help             Pop up this message.' , & '   -f, --fancy            (optional) Use emojis to express ' , & '                          relative difficulties.' , & '   -a N, --all N          Compute problem 1 through N.' , & '   -p N, --problem N      Compute problem N.' , & ' ' , & 'Usage:' , & '   (1) Compute problem 1 through 50:' , & '       PE-Fortran --all 50' , & '   (2) Compute problem 1 through 50 with emoji output:' , & '       PE-Fortran --fancy --all 50' , & '   (3) Compute problem 50:' , & '       PE-Fortran --problem 50' , & ' ' ] end subroutine get_help_messages subroutine print_help_messages () call get_help_messages () call print_allocatable_character_array ( help_messages ) end subroutine print_help_messages subroutine print_error_msg ( msg ) character ( len =* ), intent ( in ) :: msg print \"(a)\" , \"[SYNTAX ERROR] \" // trim ( msg ) call print_help_messages () stop end subroutine print_error_msg subroutine get_levels ( x , levels , fancy_style ) real , intent ( in ) :: x (:) character ( len = 25 ), intent ( out ) :: levels ( size ( x )) logical , intent ( in ) :: fancy_style real :: norm , min_x , max_x integer :: i , j character ( len = :), allocatable :: level_names (:) if ( fancy_style ) then level_names = & [ character ( len = 25 ) :: & \":smiling_imp:\" , & \":frowning_face:\" , & \":slightly_frowning_face:\" , & \":confused:\" , & \":neutral_face:\" , \"\" ] else level_names = & [ character ( len = 25 ) :: & \"_Lv1_\" , \"_Lv2_\" , \"_Lv3_\" , \"_Lv4_\" , \"_Lv5_\" , \"\" ] end if min_x = minval ( x ) max_x = maxval ( x ) levels = \"\" ! Initilization outer : do i = 1 , size ( x ) norm = ( x ( i ) - min_x ) / ( max_x - min_x ) inner : do j = 5 , 1 , - 1 if ( norm >= 1 0. ** ( - j ) . and . norm <= 1 0. ** ( - j + 1 )) then levels ( i ) = trim ( level_names ( j )) exit inner end if end do inner end do outer if ( fancy_style ) then levels ( maxloc ( x )) = \":skull:\" else levels ( maxloc ( x )) = \"_MAX_\" end if end subroutine get_levels subroutine get_answers ( problem_numbers , answer , time_span ) integer , intent ( in ) :: problem_numbers character ( len = 20 ), allocatable , intent ( out ) :: answer (:) real , allocatable , intent ( out ) :: time_span (:) type ( euler_probs_t ), allocatable :: euler_problem (:) real :: t_f , t_i integer :: i call euler_init ( euler_problem ) allocate ( answer ( problem_numbers ), time_span ( problem_numbers )) time_span = 0. do i = 1 , problem_numbers call cpu_time ( t_i ) answer ( i ) = euler_problem ( i )% answer () call cpu_time ( t_f ) if ( answer ( i ) /= failed ) time_span ( i ) = t_f - t_i end do end subroutine get_answers subroutine get_answer ( problem_number , answer , time_span ) integer , intent ( in ) :: problem_number character ( len = 20 ), intent ( out ) :: answer real , intent ( out ) :: time_span type ( euler_probs_t ), allocatable :: euler_problem (:) real :: time_final , time_initial call euler_init ( euler_problem ) time_span = 0. call cpu_time ( time_initial ) answer = euler_problem ( problem_number )% answer () call cpu_time ( time_final ) if ( answer /= failed ) then time_span = time_final - time_initial else print \"(a)\" , \"[ERROR] The author hasn't finish this problem yet!\" stop end if end subroutine get_answer subroutine print_answers ( problem_numbers , ext , fancy_style ) integer , intent ( in ) :: problem_numbers character ( len =* ), intent ( in ) :: ext logical , optional , intent ( in ) :: fancy_style character ( len = 20 ), allocatable :: answer (:) real , allocatable :: tspan (:) real :: tsum , nslv character ( len = 7 ), parameter :: md_table = \"|:\" // repeat ( '-' , 4 ) // \":\" character ( len = 100 ) :: fmt integer , parameter :: iunit = 1120 character ( len = 25 ), allocatable :: levels (:) integer :: i logical :: is_fancy if ( present ( fancy_style )) then is_fancy = fancy_style else is_fancy = . false . end if call get_answers ( problem_numbers , answer , tspan ) tsum = sum ( tspan , dim = 1 ) nslv = real ( count ( answer /= failed , dim = 1 )) allocate ( levels ( size ( tspan ))) call get_levels ( tspan / ( tsum / size ( tspan )), levels , fancy_style ) select case ( ext ) case ( 'markdown' ) open ( unit = iunit , file = 'ANSWER.md' ) write ( iunit , '(a)' ) '# Fortran PE Solutions' // new_line ( 'a' ) write ( iunit , '(a)' ) '## Summary' // new_line ( 'a' ) write ( iunit , '(a)' ) '|Benchmarks|Results|' write ( iunit , '(a)' ) repeat ( md_table , 2 ) // '|' write ( iunit , \"('|Problems solved|', i4, '|')\" ) int ( nslv ) write ( iunit , \"('|Time spent|', f9.2, '(s)|')\" ) tsum write ( iunit , \"('|Time spent/problem|', f9.2, '(s)|')\" ) tsum / nslv write ( iunit , '(a)' ) new_line ( 'a' ) // '## Answers' // new_line ( 'a' ) write ( iunit , '(a)' ) '|Prob|Answer|Tspan(s)|Difficulty|' write ( iunit , '(a)' ) repeat ( md_table , 4 ) // '|' fmt = \"('|', i6, '|', a20, '|', f10.6, '|', a25, '|')\" do i = 1 , size ( tspan ) write ( iunit , trim ( fmt )) i , answer ( i ), tspan ( i ), levels ( i ) end do close ( iunit ) case ( 'text' ) open ( unit = iunit , file = 'ANSWER.txt' ) write ( iunit , '(a)' ) 'Fortran PE Solutions' write ( iunit , '(a)' ) new_line ( 'a' ) // 'Summary' write ( iunit , '(a)' ) '-------' write ( iunit , \"('Problems solved   ', i9)\" ) int ( nslv ) write ( iunit , \"('Time spent        ', f9.2, '(s)')\" ) tsum write ( iunit , \"('Time spent/problem', f9.2, '(s)')\" ) tsum / nslv write ( iunit , '(a)' ) new_line ( 'a' ) // 'Answers' write ( iunit , '(a)' ) '-------' fmt = \"(a6, a20, a10, a13)\" write ( iunit , trim ( fmt )) 'Prob' , 'Answer' , 'Tspan(s)' , 'Difficulty' fmt = \"(i6, a20, f10.6, a13)\" do i = 1 , size ( tspan ) write ( iunit , trim ( fmt )) i , answer ( i ), tspan ( i ), trim ( levels ( i )) end do close ( iunit ) case default error stop 'File extension not supported.' end select write ( * , \"(26('-'), 1x, 20('-'))\" ) write ( * , \"('PE Fortran Solutions')\" ) fmt = \"('Problems solved/tried:', t27, 1x, i15.4, '/', i4.4)\" write ( * , fmt ) int ( nslv ), size ( tspan ) write ( * , \"('Total time spent (s):', t27, 1x, f20.2)\" ) tsum write ( * , \"('Time spent/problem (s):', t27, 1x, f20.2)\" ) tsum / nslv end subroutine print_answers subroutine print_answer ( problem_number , ext ) integer , intent ( in ) :: problem_number character ( len =* ), intent ( in ) :: ext character ( len = 20 ) :: answer real :: time_span call get_answer ( problem_number , answer , time_span ) write ( * , \"(26('-'), 1x, 20('-'))\" ) write ( * , \"('PE Fortran Solution')\" ) write ( * , \"('Problem Number:', t27, 1x, i20)\" ) problem_number write ( * , \"('Problem Answer:', t27, 1x, a20)\" ) trim ( answer ) write ( * , \"('Total time spent (s):', t27, 1x, f20.10)\" ) time_span end subroutine print_answer subroutine get_arguments () character ( len = 100 ), allocatable :: arguments (:) integer :: argument_count , idx , problem_number logical :: compute_all , compute_single , is_fancy argument_count = command_argument_count () if ( argument_count >= 5 . or . argument_count < 1 ) then call print_error_msg ( \"Invalid argument count!\" ) end if allocate ( arguments ( argument_count )) do idx = 1 , argument_count call get_command_argument ( idx , arguments ( idx )) end do if ( argument_count == 1 ) then select case ( trim ( arguments ( 1 ))) case ( \"-h\" , \"--help\" ) call print_help_messages () return case ( \"-v\" , \"--version\" ) call print_version_messages () return case default call print_error_msg ( \"Invalid argument syntax!\" ) end select else if ( argument_count >= 2 ) then compute_single = . false . compute_all = . false . is_fancy = . false . idx = 1 do while ( idx <= argument_count ) select case ( trim ( arguments ( idx ))) case ( \"-a\" , \"--all\" ) read ( arguments ( idx + 1 ), * ) problem_number compute_all = . true . idx = idx + 2 case ( \"-p\" , \"--problem\" ) read ( arguments ( idx + 1 ), * ) problem_number compute_single = . true . idx = idx + 2 case ( \"-f\" , \"--fancy\" ) is_fancy = . true . idx = idx + 1 case default call print_error_msg ( \"Invalid argument syntax!\" ) end select end do else call print_error_msg ( \"Invalid argument count!\" ) end if if ( compute_single ) then call print_answer ( problem_number , \"markdown\" ) else if ( compute_all ) then call print_answers ( problem_number , \"markdown\" , is_fancy ) else call print_error_msg ( \"Invalid argument syntax!\" ) end if end subroutine get_arguments end module euler_main_m","tags":"","loc":"sourcefile/euler_main_m.f90.html"},{"title":"euler_var_arr_m.f90 – PE Fortran","text":"Files dependent on this one sourcefile~~euler_var_arr_m.f90~~AfferentGraph sourcefile~euler_var_arr_m.f90 euler_var_arr_m.f90 sourcefile~prob_0018_m.f90 prob_0018_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_var_arr_m.f90 sourcefile~prob_0061_m.f90 prob_0061_m.f90 sourcefile~prob_0061_m.f90->sourcefile~euler_var_arr_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_var_arr_m Source Code euler_var_arr_m.f90 Source Code module euler_var_arr_m implicit none type :: var_arr_t integer , allocatable :: arr (:) end type var_arr_t end module euler_var_arr_m","tags":"","loc":"sourcefile/euler_var_arr_m.f90.html"},{"title":"euler_prob_api_m.f90 – PE Fortran","text":"This file depends on sourcefile~~euler_prob_api_m.f90~~EfferentGraph sourcefile~euler_prob_api_m.f90 euler_prob_api_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~euler_prob_api_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~euler_prob_api_m.f90~~AfferentGraph sourcefile~euler_prob_api_m.f90 euler_prob_api_m.f90 sourcefile~euler_main_m.f90 euler_main_m.f90 sourcefile~euler_main_m.f90->sourcefile~euler_prob_api_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules euler_prob_api_m Source Code euler_prob_api_m.f90 Source Code module euler_prob_api_m use euler_interface_m implicit none type :: euler_probs_t procedure ( euler_prob_x ), nopass , pointer :: answer end type euler_probs_t abstract interface character ( len = 20 ) function euler_prob_x () end function euler_prob_x end interface contains subroutine euler_init ( probs ) type ( euler_probs_t ), allocatable , intent ( out ) :: probs (:) allocate ( probs ( 63 )) probs ( 1 )% answer => euler0001 probs ( 2 )% answer => euler0002 probs ( 3 )% answer => euler0003 probs ( 4 )% answer => euler0004 probs ( 5 )% answer => euler0005 probs ( 6 )% answer => euler0006 probs ( 7 )% answer => euler0007 probs ( 8 )% answer => euler0008 probs ( 9 )% answer => euler0009 probs ( 10 )% answer => euler0010 probs ( 11 )% answer => euler0011 probs ( 12 )% answer => euler0012 probs ( 13 )% answer => euler0013 probs ( 14 )% answer => euler0014 probs ( 15 )% answer => euler0015 probs ( 16 )% answer => euler0016 probs ( 17 )% answer => euler0017 probs ( 18 )% answer => euler0018 probs ( 19 )% answer => euler0019 probs ( 20 )% answer => euler0020 probs ( 21 )% answer => euler0021 probs ( 22 )% answer => euler0022 probs ( 23 )% answer => euler0023 probs ( 24 )% answer => euler0024 probs ( 25 )% answer => euler0025 probs ( 26 )% answer => euler0026 probs ( 27 )% answer => euler0027 probs ( 28 )% answer => euler0028 probs ( 29 )% answer => euler0029 probs ( 30 )% answer => euler0030 probs ( 31 )% answer => euler0031 probs ( 32 )% answer => euler0032 probs ( 33 )% answer => euler0033 probs ( 34 )% answer => euler0034 probs ( 35 )% answer => euler0035 probs ( 36 )% answer => euler0036 probs ( 37 )% answer => euler0037 probs ( 38 )% answer => euler0038 probs ( 39 )% answer => euler0039 probs ( 40 )% answer => euler0040 probs ( 41 )% answer => euler0041 probs ( 42 )% answer => euler0042 probs ( 43 )% answer => euler0043 probs ( 44 )% answer => euler0044 probs ( 45 )% answer => euler0045 probs ( 46 )% answer => euler0046 probs ( 47 )% answer => euler0047 probs ( 48 )% answer => euler0048 probs ( 49 )% answer => euler0049 probs ( 50 )% answer => euler0050 probs ( 51 )% answer => euler0051 probs ( 52 )% answer => euler0052 probs ( 53 )% answer => euler0053 probs ( 54 )% answer => euler0054 probs ( 55 )% answer => euler0055 probs ( 56 )% answer => euler0056 probs ( 57 )% answer => euler0057 probs ( 58 )% answer => euler0058 probs ( 59 )% answer => euler0059 probs ( 60 )% answer => euler0060 probs ( 61 )% answer => euler0061 probs ( 62 )% answer => euler0062 probs ( 63 )% answer => euler0063 end subroutine euler_init end module euler_prob_api_m","tags":"","loc":"sourcefile/euler_prob_api_m.f90.html"},{"title":"prob_0025_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0025_m.f90~~EfferentGraph sourcefile~prob_0025_m.f90 prob_0025_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0025_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0025_m Source Code prob_0025_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0025_m implicit none contains module character ( len = 20 ) function euler0025 () write ( euler0025 , \"(i20)\" ) ans ( 1000 ) end function euler0025 integer function ans ( n ) integer , intent ( in ) :: n integer :: int_arr1 ( n ), int_arr2 ( n ) integer :: tmp ( n ), j , k int_arr1 = 0 ; int_arr2 = 0 int_arr1 ( n ) = 1 ; int_arr2 ( n ) = 1 k = 3 loop_1 : do tmp = int_arr1 + int_arr2 loop_3 : do j = n , 2 , - 1 call carry ( tmp ( j - 1 : j )) end do loop_3 int_arr1 = tmp if ( int_arr1 ( 1 ) /= 0 ) exit loop_1 k = k + 1 tmp = int_arr1 + int_arr2 loop_6 : do j = n , 2 , - 1 call carry ( tmp ( j - 1 : j )) end do loop_6 int_arr2 = tmp if ( int_arr2 ( 1 ) /= 0 ) exit loop_1 k = k + 1 end do loop_1 ans = k end function ans subroutine carry ( a ) integer , intent ( inout ) :: a ( 2 ) integer :: tmp tmp = a ( 2 ) a ( 2 ) = a ( 2 ) - a ( 2 ) / 10 * 10 a ( 1 ) = a ( 1 ) + ( tmp - a ( 2 )) / 10 end subroutine carry end submodule euler_prob_0025_m","tags":"","loc":"sourcefile/prob_0025_m.f90.html"},{"title":"prob_0010_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0010_m.f90~~EfferentGraph sourcefile~prob_0010_m.f90 prob_0010_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0010_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0010_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0010_m Source Code prob_0010_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0010_m implicit none contains module character ( len = 20 ) function euler0010 () write ( euler0010 , \"(i20)\" ) ans ( 2000000_int64 ) end function euler0010 integer ( int64 ) function ans ( n ) use euler_primes_m , only : sieve_of_eratosthenes implicit none integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: i , tmp logical , allocatable :: is_prime (:) tmp = 0_int64 call sieve_of_eratosthenes ( n , is_prime ) ! ans = sum( pack([ (i, i = 0_int64, n) ], is_prime) ) do i = 0_int64 , n if ( is_prime ( i )) then tmp = tmp + i end if end do ans = tmp end function ans end submodule euler_prob_0010_m","tags":"","loc":"sourcefile/prob_0010_m.f90.html"},{"title":"prob_0016_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0016_m.f90~~EfferentGraph sourcefile~prob_0016_m.f90 prob_0016_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0016_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0016_m Source Code prob_0016_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0016_m implicit none contains module character ( len = 20 ) function euler0016 () write ( euler0016 , \"(i20)\" ) ans ( 1000 ) end function euler0016 integer function ans ( n ) integer , intent ( in ) :: n integer , allocatable :: iarr (:) integer :: i , j , l l = floor ( real ( n ) * log10 ( 2.0 ) + 1.0 ) allocate ( iarr ( l )) iarr = 0 iarr ( l ) = 1 do i = 1 , n iarr = iarr * 2 do j = l , 2 , - 1 iarr ( j - 1 ) = iarr ( j - 1 ) + iarr ( j ) / 10 iarr ( j ) = mod ( iarr ( j ), 10 ) end do end do ans = sum ( iarr , dim = 1 ) end function ans end submodule euler_prob_0016_m","tags":"","loc":"sourcefile/prob_0016_m.f90.html"},{"title":"prob_0052_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0052_m.f90~~EfferentGraph sourcefile~prob_0052_m.f90 prob_0052_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0052_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0052_m Source Code prob_0052_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0052_m implicit none contains module character ( len = 20 ) function euler0052 () write ( euler0052 , \"(i20)\" ) ans () end function euler0052 integer function ans () integer :: i , j logical , dimension ( 0 : 9 ) :: arr , arr_tmp i = 1 outer : do call digs_used_in_num ( i , arr ) inner : do j = 2 , 6 call digs_used_in_num ( i * j , arr_tmp ) if ( all ( arr . eqv . arr_tmp )) then if ( j == 6 ) exit outer else exit inner end if end do inner i = i + 1 end do outer ans = i end function ans subroutine digs_used_in_num ( n , arr ) integer , intent ( in ) :: n logical , intent ( out ) :: arr ( 0 : 9 ) integer , allocatable :: int_arr (:) integer :: i call int_2_arr ( n , int_arr ) arr = . false . do i = 1 , digs_of_int ( n ) arr ( int_arr ( i )) = . true . end do end subroutine digs_used_in_num end submodule euler_prob_0052_m","tags":"","loc":"sourcefile/prob_0052_m.f90.html"},{"title":"prob_0019_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0019_m.f90~~EfferentGraph sourcefile~prob_0019_m.f90 prob_0019_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0019_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0019_m Source Code prob_0019_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0019_m implicit none contains module character ( len = 20 ) function euler0019 () write ( euler0019 , \"(i20)\" ) ans ( 1901 , 2000 ) end function euler0019 integer function ans ( from , to ) integer , intent ( in ) :: from , to integer :: month ( 12 ), dow integer :: tmp , i , j month = [ 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ] tmp = 0 dow = 1 outer : do i = from , to if ( is_leap ( i )) then month ( 2 ) = 29 end if inner : do j = 1 , size ( month ) dow = dow + mod ( month ( j ), 7 ) - 1 if ( mod ( dow , 7 ) == 0 ) then tmp = tmp + 1 end if end do inner end do outer ans = tmp end function ans logical function is_leap ( n ) integer , intent ( in ) :: n is_leap = . false . if ((( mod ( n , 4 ) == 0 ) . and . ( mod ( n , 100 ) /= 0 )) . or . & ( mod ( n , 400 ) == 0 )) is_leap = . true . end function is_leap end submodule euler_prob_0019_m","tags":"","loc":"sourcefile/prob_0019_m.f90.html"},{"title":"prob_0018_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0018_m.f90~~EfferentGraph sourcefile~prob_0018_m.f90 prob_0018_m.f90 sourcefile~euler_var_arr_m.f90 euler_var_arr_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_var_arr_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0018_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0018_m Source Code prob_0018_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0018_m implicit none contains module character ( len = 20 ) function euler0018 () write ( euler0018 , \"(i20)\" ) ans ( 15 ) end function euler0018 integer function ans ( n ) use euler_var_arr_m , only : var_arr_t use euler_data_m , only : get_euler_data_0018 implicit none integer , intent ( in ) :: n type ( var_arr_t ), allocatable :: var_arr (:) integer :: i , j , x character ( len = :), allocatable :: euler_data (:) allocate ( var_arr ( n )) do i = 1 , n allocate ( var_arr ( i )% arr ( i )) end do call get_euler_data_0018 ( euler_data ) do i = 1 , n read ( euler_data ( i ), * ) var_arr ( i )% arr end do do j = n - 1 , 1 , - 1 do i = 1 , j x = max ( var_arr ( j + 1 )% arr ( i ), var_arr ( j + 1 )% arr ( i + 1 )) var_arr ( j )% arr ( i ) = x + var_arr ( j )% arr ( i ) end do end do ans = var_arr ( 1 )% arr ( 1 ) end function ans end submodule euler_prob_0018_m","tags":"","loc":"sourcefile/prob_0018_m.f90.html"},{"title":"prob_0032_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0032_m.f90~~EfferentGraph sourcefile~prob_0032_m.f90 prob_0032_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0032_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0032_m Source Code prob_0032_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0032_m implicit none contains module character ( len = 20 ) function euler0032 () write ( euler0032 , \"(i20)\" ) ans () end function euler0032 integer ( int64 ) function ans () integer ( int64 ) :: temp , i , j , k , arr_of_prods ( 9 ) integer ( int64 ), allocatable :: arr_of_nonrepeats (:) k = 1 do i = 1 , 9 do j = 1234 , 9876 if ( digs_of_int ( i * j ) > 4 ) cycle temp = i * 10 ** 8 + j * 10 ** 4 + i * j if ( is_pandigital ( temp , digs_of_int ( temp ))) then arr_of_prods ( k ) = i * j k = k + 1 end if end do end do do i = 12 , 98 do j = 123 , 987 if ( digs_of_int ( i * j ) > 4 ) cycle temp = i * 10 ** 7 + j * 10 ** 4 + i * j if ( is_pandigital ( temp , digs_of_int ( temp ))) then arr_of_prods ( k ) = i * j k = k + 1 end if end do end do call remove_duplicates ( arr_of_prods , arr_of_nonrepeats ) ans = sum ( arr_of_nonrepeats , dim = 1 ) end function ans subroutine remove_duplicates ( i_arr , o_arr ) integer ( int64 ), intent ( in ) :: i_arr (:) integer ( int64 ), allocatable , intent ( out ) :: o_arr (:) integer ( int64 ) :: i , k , tmp_arr ( size ( i_arr )) tmp_arr = 0 k = 1 tmp_arr ( 1 ) = i_arr ( 1 ) do i = 2 , size ( i_arr ) if ( any ( tmp_arr == i_arr ( i ))) cycle k = k + 1 tmp_arr ( k ) = i_arr ( i ) end do allocate ( o_arr ( k )) o_arr (:) = tmp_arr ( 1 : k ) end subroutine remove_duplicates end submodule euler_prob_0032_m","tags":"","loc":"sourcefile/prob_0032_m.f90.html"},{"title":"prob_0024_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0024_m.f90~~EfferentGraph sourcefile~prob_0024_m.f90 prob_0024_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0024_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0024_m Source Code prob_0024_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0024_m implicit none contains module character ( len = 20 ) function euler0024 () write ( euler0024 , \"(i20)\" ) ans () end function euler0024 integer ( int64 ) function ans () integer ( int64 ) :: factor_array ( 10 ) integer ( int64 ), allocatable :: arr1 (:), arr2 (:) integer ( int64 ) :: n , i , j , k , tmp factor_array = [ 1 , 1 , 2 , 6 , 24 , 120 , 720 , 5040 , 40320 , 362880 ] allocate ( arr1 ( 10 )) arr1 = [( i , i = 0 , 9 )] n = 999999 tmp = 0 do i = 10 , 1 , - 1 j = n / factor_array ( i ) n = mod ( n , factor_array ( i )) k = arr1 ( j + 1 ) allocate ( arr2 ( count ( arr1 /= k ))) arr2 = pack ( arr1 , arr1 /= k ) deallocate ( arr1 ) allocate ( arr1 ( size ( arr2 ))) arr1 = arr2 deallocate ( arr2 ) tmp = tmp + k * 10 ** ( i - 1 ) end do ans = tmp end function ans end submodule euler_prob_0024_m","tags":"","loc":"sourcefile/prob_0024_m.f90.html"},{"title":"prob_0059_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0059_m.f90~~EfferentGraph sourcefile~prob_0059_m.f90 prob_0059_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0059_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0059_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0059_m Source Code prob_0059_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0059_m implicit none contains module character ( len = 20 ) function euler0059 () write ( euler0059 , \"(i20)\" ) answer () end function euler0059 function answer () result ( ret ) use euler_data_m , only : get_euler_data_0059 implicit none integer :: ret integer , allocatable :: encrypted (:), decrypted (:) integer , parameter :: n = 26 , k = 3 integer :: letters ( n ), idx ( k ), idx2 ( 2 * k , k ), key ( k ), i , j logical :: next_permutation_avail integer :: large_number next_permutation_avail = . true . call get_euler_data_0059 ( encrypted ) large_number = size ( encrypted ) letters = [( i , i = 97 , 122 )] allocate ( decrypted ( size ( encrypted ))) idx = [ 1 , 2 , 3 ] idx2 ( 1 , :) = [ 1 , 2 , 3 ] idx2 ( 2 , :) = [ 1 , 3 , 2 ] idx2 ( 3 , :) = [ 2 , 1 , 3 ] idx2 ( 4 , :) = [ 2 , 3 , 1 ] idx2 ( 5 , :) = [ 3 , 1 , 2 ] idx2 ( 6 , :) = [ 3 , 2 , 1 ] ret = 0 outer : do while ( next_permutation_avail ) inner : do i = 1 , size ( idx2 (:, 1 )) innermost : do j = 1 , 3 key ( j ) = letters ( idx ( idx2 ( i , j ))) end do innermost call decrypt ( encrypted , key , decrypted ) if ( is_english ( decrypted )) then ret = sum ( decrypted ) return end if end do inner next_permutation_avail = next_permutation ( k , n , idx ) end do outer end function answer subroutine decrypt ( encrypted , key , decrypted ) integer , intent ( in ) :: encrypted (:), key (:) integer , intent ( out ) :: decrypted (:) integer :: i , k do i = 1 , size ( encrypted ) k = mod ( i , 3 ) if ( k == 0 ) k = 3 decrypted ( i ) = ieor ( encrypted ( i ), key ( k )) end do end subroutine decrypt function is_english ( decrypted ) result ( ret ) integer , intent ( in ) :: decrypted (:) logical :: ret character ( len = 1 ) :: check_ ( 8 ) integer :: i , knt ( 8 ) check_ = [ \"e\" , \"t\" , \"a\" , \"o\" , \"i\" , \"n\" , \"s\" , \"h\" ] do i = 1 , size ( check_ ) knt ( i ) = count ( decrypted == iachar ( check_ ( i ))) end do ret = . false . if ( sum ( knt ) / real ( size ( decrypted )) * 10 0. > 4 5. . and . & maxloc ( knt , dim = 1 ) == 1 ) ret = . true . end function is_english end submodule euler_prob_0059_m","tags":"","loc":"sourcefile/prob_0059_m.f90.html"},{"title":"prob_0006_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0006_m.f90~~EfferentGraph sourcefile~prob_0006_m.f90 prob_0006_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0006_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0006_m Source Code prob_0006_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0006_m implicit none contains module character ( len = 20 ) function euler0006 () write ( euler0006 , \"(i20)\" ) ans ( 100 ) end function euler0006 integer function ans ( n ) integer , intent ( in ) :: n integer :: i , sum_square , square_sum sum_square = 0 ; square_sum = 0 do i = 1 , n sum_square = sum_square + i ** 2 end do square_sum = (( 1 + n ) * n / 2 ) ** 2 ans = square_sum - sum_square end function ans end submodule euler_prob_0006_m","tags":"","loc":"sourcefile/prob_0006_m.f90.html"},{"title":"prob_0049_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0049_m.f90~~EfferentGraph sourcefile~prob_0049_m.f90 prob_0049_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0049_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0049_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0049_m Source Code prob_0049_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0049_m implicit none contains module character ( len = 20 ) function euler0049 () write ( euler0049 , \"(a20)\" ) trim ( ans ()) end function euler0049 character ( len = 20 ) function ans () use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer :: i , a , b , c character ( 4 ) :: str1 , str2 , str3 logical :: cond logical , allocatable :: is_prime (:) call sieve_of_Eratosthenes ( 10000 , is_prime ) do i = 9973 , 7661 , - 1 a = i b = a - 3330 c = b - 3330 cond = is_prime ( a ) . and . is_prime ( b ) . and . is_prime ( c ) if (. not . cond ) cycle call sort_int ( a ) call sort_int ( b ) call sort_int ( c ) if ( a == b . and . a == c ) exit end do write ( str1 , \"(i4)\" ) i write ( str2 , \"(i4)\" ) i - 3330 write ( str3 , \"(i4)\" ) i - 6660 ans = str3 // str2 // str1 end function ans subroutine sort_int ( n ) integer , intent ( inout ) :: n character ( 4 ) :: str write ( str , \"(i4)\" ) n call sort_str4 ( str ) read ( str , \"(i4)\" ) n end subroutine sort_int subroutine sort_str4 ( str ) character ( 4 ), intent ( inout ) :: str integer :: i , j do i = 1 , 4 do j = i + 1 , 4 if ( str ( i : i ) > str ( j : j )) then call swap ( str ( i : i ), str ( j : j )) end if end do end do end subroutine sort_str4 end submodule euler_prob_0049_m","tags":"","loc":"sourcefile/prob_0049_m.f90.html"},{"title":"prob_0020_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0020_m.f90~~EfferentGraph sourcefile~prob_0020_m.f90 prob_0020_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0020_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0020_m Source Code prob_0020_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0020_m implicit none contains module character ( len = 20 ) function euler0020 () write ( euler0020 , \"(i20)\" ) ans ( 100 ) end function euler0020 integer function ans ( n ) integer , intent ( in ) :: n integer , allocatable :: iarr (:) integer :: l , i , j real ( sp ) :: lr lr = 0._sp do i = 1 , n lr = lr + log10 ( real ( i , sp )) end do l = floor ( lr + 1. ) allocate ( iarr ( l )) iarr = 0 iarr ( l ) = 1 do i = 1 , n iarr = iarr * i do j = l , 2 , - 1 iarr ( j - 1 ) = iarr ( j - 1 ) + iarr ( j ) / 10 iarr ( j ) = mod ( iarr ( j ), 10 ) end do end do ans = sum ( iarr , dim = 1 ) end function ans end submodule euler_prob_0020_m","tags":"","loc":"sourcefile/prob_0020_m.f90.html"},{"title":"prob_0029_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0029_m.f90~~EfferentGraph sourcefile~prob_0029_m.f90 prob_0029_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0029_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0029_m Source Code prob_0029_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0029_m implicit none contains module character ( len = 20 ) function euler0029 () write ( euler0029 , \"(i20)\" ) ans ( 99 ) end function euler0029 integer function ans ( n ) integer , intent ( in ) :: n integer , dimension ( 2 , n , n ) :: arr_of_nums integer , dimension ( 2 , n * n ) :: res , arr integer :: i , j , k do i = 2 , n + 1 do j = 2 , n + 1 arr_of_nums ( 1 , j - 1 , i - 1 ) = j arr_of_nums ( 2 , j - 1 , i - 1 ) = i call simplify_powers ( arr_of_nums (:, j - 1 , i - 1 )) end do end do call reshape_to_2_by_99_x_99 ( arr_of_nums , arr ) res ( 1 : 2 , 1 ) = arr ( 1 : 2 , 1 ); k = 1 outer : do i = 2 , n * n inner : do j = 1 , k if ( res ( 1 , j ) == arr ( 1 , i ) . and . & res ( 2 , j ) == arr ( 2 , i )) cycle outer end do inner k = k + 1 res ( 1 : 2 , k ) = arr ( 1 : 2 , i ) end do outer ans = k end function ans subroutine simplify_powers ( arr1 ) integer , intent ( inout ) :: arr1 ( 2 ) select case ( arr1 ( 1 )) case ( 4 , 9 , 25 , 36 , 49 , 100 ) arr1 ( 1 ) = int ( sqrt ( real ( arr1 ( 1 ), sp ))) arr1 ( 2 ) = arr1 ( 2 ) * 2 case ( 8 ) arr1 ( 1 ) = 2 arr1 ( 2 ) = arr1 ( 2 ) * 3 case ( 27 ) arr1 ( 1 ) = 3 arr1 ( 2 ) = arr1 ( 2 ) * 3 case ( 16 ) arr1 ( 1 ) = 2 arr1 ( 2 ) = arr1 ( 2 ) * 4 case ( 81 ) arr1 ( 1 ) = 3 arr1 ( 2 ) = arr1 ( 2 ) * 4 case ( 32 ) arr1 ( 1 ) = 2 arr1 ( 2 ) = arr1 ( 2 ) * 5 case ( 64 ) arr1 ( 1 ) = 2 arr1 ( 2 ) = arr1 ( 2 ) * 6 case default arr1 ( 1 : 2 ) = arr1 ( 1 : 2 ) end select end subroutine simplify_powers subroutine reshape_to_2_by_99_x_99 ( arr_in , arr_out ) integer , intent ( in ) :: arr_in (:, :, :) integer , intent ( out ) :: arr_out (:, :) arr_out = reshape ( arr_in , [ 2 , 99 * 99 ]) end subroutine reshape_to_2_by_99_x_99 end submodule euler_prob_0029_m","tags":"","loc":"sourcefile/prob_0029_m.f90.html"},{"title":"prob_0002_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0002_m.f90~~EfferentGraph sourcefile~prob_0002_m.f90 prob_0002_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0002_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0002_m Source Code prob_0002_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0002_m implicit none contains module character ( len = 20 ) function euler0002 () write ( euler0002 , \"(i20)\" ) answer ( 4000000 ) end function euler0002 function answer ( n ) result ( ret ) integer , intent ( in ) :: n integer :: ret , i i = 0 ; ret = 0 do while ( fibonacci ( i ) <= n ) ret = ret + fibonacci ( i ) i = i + 3 end do end function answer end submodule euler_prob_0002_m","tags":"","loc":"sourcefile/prob_0002_m.f90.html"},{"title":"prob_0055_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0055_m.f90~~EfferentGraph sourcefile~prob_0055_m.f90 prob_0055_m.f90 sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~prob_0055_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0055_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0055_m Source Code prob_0055_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0055_m use euler_multiprecision_m implicit none contains module character ( len = 20 ) function euler0055 () write ( euler0055 , \"(i20)\" ) ans ( 10000 ) end function euler0055 integer function ans ( upper_bound ) integer , intent ( in ) :: upper_bound type ( multiprecision_int_t ) :: num integer :: i , k k = 0 do i = 1 , upper_bound num = i if ( is_lychrel ( num )) then k = k + 1 end if end do ans = k end function ans logical function is_lychrel ( num ) type ( multiprecision_int_t ), intent ( in ) :: num type ( multiprecision_int_t ) :: tmp , tmp2 integer :: i i = 0 is_lychrel = . true . tmp = num do while ( i <= 50 ) tmp2 = reverse_long ( tmp ) + tmp if ( is_palindromic_long ( tmp2 )) then is_lychrel = . false . return end if tmp = tmp2 i = i + 1 end do end function is_lychrel logical function is_palindromic_long ( val ) type ( multiprecision_int_t ), intent ( in ) :: val type ( multiprecision_int_t ) :: tmp tmp = reverse_long ( val ) if ( tmp == val ) then is_palindromic_long = . true . else is_palindromic_long = . false . end if end function is_palindromic_long function reverse_long ( val ) result ( ret ) type ( multiprecision_int_t ), intent ( in ) :: val type ( multiprecision_int_t ) :: ret allocate ( ret % arr ( size ( val % arr ))) ret % arr ( 1 : size ( val % arr )) = val % arr ( size ( val % arr ): 1 : - 1 ) ret % sgn = '+' end function reverse_long end submodule euler_prob_0055_m","tags":"","loc":"sourcefile/prob_0055_m.f90.html"},{"title":"prob_0001_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0001_m.f90~~EfferentGraph sourcefile~prob_0001_m.f90 prob_0001_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0001_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0001_m Source Code prob_0001_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0001_m implicit none contains module character ( len = 20 ) function euler0001 () write ( euler0001 , \"(i20)\" ) ans ( 3 , 5 , 1000 ) end function euler0001 function ans ( i , j , n ) result ( ret ) integer , intent ( in ) :: i , j , n integer :: ret ret = sum_divisibly_by ( i , n - 1 ) + & sum_divisibly_by ( j , n - 1 ) - & sum_divisibly_by ( i * j , n - 1 ) end function ans function sum_divisibly_by ( i , j ) result ( ret ) integer , intent ( in ) :: i , j integer :: ret ret = i * ( j / i * ( j / i + 1 )) / 2 end function sum_divisibly_by end submodule euler_prob_0001_m","tags":"","loc":"sourcefile/prob_0001_m.f90.html"},{"title":"prob_0007_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0007_m.f90~~EfferentGraph sourcefile~prob_0007_m.f90 prob_0007_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0007_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0007_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0007_m Source Code prob_0007_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0007_m implicit none contains module character ( len = 20 ) function euler0007 () write ( euler0007 , \"(i20)\" ) ans ( 10000 ) end function euler0007 integer function ans ( n ) use euler_primes_m , only : is_prime implicit none integer , intent ( in ) :: n integer :: i , j i = 0 ; j = 0 loop_1 : do if ( j == n + 1 ) exit loop_1 i = i + 1 if ( mod ( i , 2 ) == 2 . and . i /= 2 ) then cycle loop_1 else if ( is_prime ( int ( i ))) then j = j + 1 end if end do loop_1 ans = i end function ans end submodule euler_prob_0007_m","tags":"","loc":"sourcefile/prob_0007_m.f90.html"},{"title":"prob_0047_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0047_m.f90~~EfferentGraph sourcefile~prob_0047_m.f90 prob_0047_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0047_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0047_m Source Code prob_0047_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0047_m implicit none contains module character ( len = 20 ) function euler0047 () write ( euler0047 , \"(i20)\" ) ans ( 1000000 ) end function euler0047 integer function ans ( n ) integer , intent ( in ) :: n integer :: i , j , n_factor ( n ), goal ( 4 ) n_factor = 0 outer : do i = 2 , n - 1 if ( n_factor ( i ) == 0 ) then inner : do j = 2 * i , n - 1 , i n_factor ( j ) = n_factor ( j ) + 1 end do inner end if end do outer goal = [ 4 , 4 , 4 , 4 ] do i = 2 , n - 1 if ( all ( n_factor ( i : i + 3 ) == goal (:))) exit end do ans = i end function ans end submodule euler_prob_0047_m","tags":"","loc":"sourcefile/prob_0047_m.f90.html"},{"title":"prob_0054_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0054_m.f90~~EfferentGraph sourcefile~prob_0054_m.f90 prob_0054_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0054_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0054_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0054_m Source Code prob_0054_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0054_m implicit none contains module character ( len = 20 ) function euler0054 () write ( euler0054 , \"(i20)\" ) answer () end function euler0054 integer function answer () use euler_data_m , only : get_euler_data_0054 implicit none character ( len = 2 ) :: str_arr ( 10 ) integer :: i , j character ( len = :), allocatable :: euler_data (:) call get_euler_data_0054 ( euler_data ) i = 0 do j = 1 , size ( euler_data ) read ( euler_data ( j ), * ) str_arr if ( player_one_win ( str_arr )) i = i + 1 end do answer = i end function answer subroutine to_arrs ( hands , vals , suits ) character ( len = 2 ), intent ( in ) :: hands ( 5 ) integer , intent ( out ) :: vals ( 1 : 14 ), suits ( 1 : 4 ) character ( len = 1 ) :: value_arr ( 1 : 14 ), suit_arr ( 1 : 4 ) integer :: i , v , s value_arr = [ 'A' , '2' , '3' , '4' , '5' , '6' , '7' , & '8' , '9' , 'T' , 'J' , 'Q' , 'K' , 'A' ] suit_arr = [ 'S' , 'H' , 'C' , 'D' ] vals = 0 ; suits = 0 do i = 1 , 5 v = findloc ( value_arr (:), hands ( i ) ( 1 : 1 ), dim = 1 , back = . true .) s = findloc ( suit_arr (:), hands ( i ) ( 2 : 2 ), dim = 1 ) vals ( v ) = vals ( v ) + 1 if ( v == 14 ) vals ( 1 ) = vals ( 1 ) + 1 suits ( s ) = suits ( s ) + 1 end do end subroutine to_arrs subroutine rank ( hands , s_arr ) character ( len = 2 ), intent ( in ) :: hands ( 5 ) integer , intent ( out ) :: s_arr ( 6 ) integer :: vals ( 1 : 14 ), suits ( 1 : 4 ), x , y , z call to_arrs ( hands , vals , suits ) s_arr = 0 ! Royal Flush if ( all ( vals ( 10 : 14 ) == 1 ) . and . any ( suits (:) == 5 )) then x = findloc ( suits , 5 , dim = 1 ) s_arr ( 1 : 2 ) = [ 10 , x ] return end if ! Straight flush if ( any ( suits (:) == 5 )) then do x = 1 , 10 if ( all ( vals ( x : x + 4 ) == 1 )) then y = findloc ( suits , 5 , dim = 1 ) s_arr ( 1 : 3 ) = [ 9 , x , y ] return end if end do end if ! Four of a kind if ( any ( vals (:) == 4 )) then x = findloc ( vals , 4 , dim = 1 , back = . true .) y = findloc ( vals , 1 , dim = 1 , back = . true .) s_arr ( 1 : 3 ) = [ 8 , x , y ] return end if ! Full house if ( any ( vals (:) == 3 ) . and . any ( vals (:) == 2 )) then x = findloc ( vals , 3 , dim = 1 , back = . true .) y = findloc ( vals , 2 , dim = 1 , back = . true .) s_arr ( 1 : 3 ) = [ 7 , x , y ] return end if ! Flush if ( any ( suits (:) == 5 )) then s_arr ( 1 ) = 6 call knt_one_by_one ( 2 , vals , s_arr ) return end if ! Straight do x = 1 , 10 if ( all ( vals ( x : x + 4 ) == 1 )) then s_arr ( 1 : 2 ) = [ 5 , x ] return end if end do ! Three of a kind if ( any ( vals (:) == 3 )) then x = findloc ( vals , 3 , dim = 1 , back = . true .) y = findloc ( vals , 1 , dim = 1 , back = . true .) z = findloc ( vals ( 2 : 14 ), 1 , dim = 1 ) + 1 s_arr ( 1 : 4 ) = [ 4 , x , y , z ] return end if ! Two pairs if ( count ( vals ( 2 : 14 ) == 2 ) == 2 ) then x = findloc ( vals , 2 , dim = 1 , back = . true .) y = findloc ( vals ( 2 : 14 ), 2 , dim = 1 ) + 1 z = findloc ( vals , 1 , dim = 1 , back = . true .) s_arr ( 1 : 4 ) = [ 3 , x , y , z ] return end if ! One pair if ( any ( vals (:) == 2 )) then x = findloc ( vals , 2 , dim = 1 , back = . true .) s_arr ( 1 : 2 ) = [ 2 , x ] call knt_one_by_one ( 3 , vals , s_arr ) return end if ! High card s_arr ( 1 ) = 1 call knt_one_by_one ( 2 , vals , s_arr ) contains subroutine knt_one_by_one ( x_ , val_arr , output_arr ) integer , intent ( in ) :: val_arr (:), x_ integer , intent ( out ) :: output_arr (:) integer :: idx , tmp tmp = x_ do idx = 14 , 2 , - 1 if ( tmp >= 7 ) exit if ( val_arr ( idx ) == 1 ) then output_arr ( tmp ) = idx tmp = tmp + 1 end if end do end subroutine knt_one_by_one end subroutine rank function player_one_win ( str_arr ) result ( ret ) character ( len = 2 ), intent ( in ) :: str_arr ( 10 ) logical :: ret integer :: rank1 ( 6 ), rank2 ( 6 ), i call rank ( str_arr ( 1 : 5 ), rank1 ) call rank ( str_arr ( 6 : 10 ), rank2 ) do i = 1 , 6 if ( rank1 ( i ) > rank2 ( i )) then ret = . true . return else if ( rank1 ( i ) < rank2 ( i )) then ret = . false . return end if end do error stop \"There is no tie.\" end function player_one_win end submodule euler_prob_0054_m","tags":"","loc":"sourcefile/prob_0054_m.f90.html"},{"title":"prob_0035_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0035_m.f90~~EfferentGraph sourcefile~prob_0035_m.f90 prob_0035_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0035_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0035_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0035_m Source Code prob_0035_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0035_m implicit none logical , allocatable :: is_prime (:) contains module character ( len = 20 ) function euler0035 () write ( euler0035 , \"(i20)\" ) ans ( 1000000 ) end function euler0035 integer function ans ( n ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer , intent ( in ) :: n logical :: logical_arr ( n ), is_c integer , allocatable :: arr (:) integer :: i call sieve_of_Eratosthenes ( n , is_prime ) logical_arr = . false . do i = 1 , n if ( logical_arr ( i )) cycle call is_circular_prime ( i , arr , is_c ) if ( is_c ) then logical_arr ( arr ) = . true . end if end do ans = count ( logical_arr ) end function ans subroutine is_circular_prime ( n , arr , is_circular ) integer , intent ( in ) :: n integer , allocatable , intent ( out ) :: arr (:) logical , intent ( out ) :: is_circular integer :: tmp is_circular = . true . if (. not . is_prime ( n )) then is_circular = . false . return end if tmp = rot_int ( n ) loop : do if ( tmp == n ) exit if (. not . is_prime ( tmp )) then is_circular = . false . return end if tmp = rot_int ( tmp ) end do loop call rot_int_arr ( n , arr ) end subroutine is_circular_prime subroutine rot_int_arr ( n , arr ) integer , intent ( in ) :: n integer , allocatable , intent ( out ) :: arr (:) integer :: i , tmp allocate ( arr ( digs_of_int ( n ))) tmp = n ; arr ( 1 ) = tmp do i = 2 , size ( arr ) tmp = rot_int ( tmp ) arr ( i ) = tmp end do end subroutine rot_int_arr integer function rot_int ( n ) integer , intent ( in ) :: n integer :: tmp tmp = 10 ** ( digs_of_int ( n ) - 1 ) rot_int = tmp * unit_digit ( n ) + n / 10 end function rot_int end submodule euler_prob_0035_m","tags":"","loc":"sourcefile/prob_0035_m.f90.html"},{"title":"prob_0013_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0013_m.f90~~EfferentGraph sourcefile~prob_0013_m.f90 prob_0013_m.f90 sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0013_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0013_m Source Code prob_0013_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0013_m use euler_multiprecision_m implicit none contains module character ( len = 20 ) function euler0013 () type ( multiprecision_int_t ) :: val val = answer () write ( euler0013 , \"(10(' '), 10(i1))\" ) val % arr ( 1 : 10 ) end function euler0013 function answer () result ( ret ) use euler_data_m , only : get_euler_data_0013 implicit none integer :: i type ( multiprecision_int_t ) :: tmp , ret character ( len = :), allocatable :: euler_data (:) call get_euler_data_0013 ( euler_data ) tmp % sgn = '+' ; allocate ( tmp % arr ( 50 )); ret = 0 do i = 1 , 100 read ( euler_data ( i ), \"(50(i1))\" ) tmp % arr ret = ret + tmp end do end function answer end submodule euler_prob_0013_m","tags":"","loc":"sourcefile/prob_0013_m.f90.html"},{"title":"prob_0061_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0061_m.f90~~EfferentGraph sourcefile~prob_0061_m.f90 prob_0061_m.f90 sourcefile~euler_var_arr_m.f90 euler_var_arr_m.f90 sourcefile~prob_0061_m.f90->sourcefile~euler_var_arr_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0061_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0061_m Source Code prob_0061_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0061_m use euler_var_arr_m , only : var_arr_t implicit none contains module character ( len = 20 ) function euler0061 () write ( euler0061 , \"(i20)\" ) answer () end function euler0061 function answer () result ( ret ) integer :: k , ret , idx ( 6 ) type ( var_arr_t ) :: polygonals ( 3 : 8 ) type ( var_arr_t ), allocatable :: arr (:) logical :: avail avail = . true .; ret = 0 idx = [ 3 , 4 , 5 , 6 , 7 , 8 ] call get_polygonals ( polygonals ) do while ( avail ) do k = 1 , 6 call get_cyclic_arr ( arr , polygonals ( idx ( k ))% arr ) end do do k = 1 , size ( arr ) associate ( x => arr ( k )% arr , s => size ( arr ( k )% arr )) if ( x ( 1 ) / 100 == mod ( x ( s ), 100 ) . and . s == 6 ) then ret = sum ( x ) return end if end associate end do deallocate ( arr ) avail = next_permutation ( idx ) end do end function answer subroutine get_cyclic_arr ( arr , arr2 ) type ( var_arr_t ), allocatable , intent ( inout ) :: arr (:) integer , intent ( in ) :: arr2 (:) type ( var_arr_t ) :: tmp ( 100 ) integer :: i , j , k if (. not . allocated ( arr )) then allocate ( arr ( size ( arr2 ))) do i = 1 , size ( arr ) arr ( i )% arr = [ arr2 ( i )] end do return end if k = 0 do i = 1 , 100 tmp ( i )% arr = [ 0 ] end do do i = 1 , size ( arr ) do j = 1 , size ( arr2 ) associate ( x => arr ( i )% arr , y => arr2 ( j )) if ( mod ( x ( size ( x )), 100 ) == y / 100 ) then k = k + 1 tmp ( k )% arr = [ x , [ y ]] end if end associate end do end do if ( k /= 0 ) then deallocate ( arr ) allocate ( arr ( k )) do i = 1 , k arr ( i )% arr = tmp ( i )% arr end do end if end subroutine get_cyclic_arr subroutine get_polygonals ( polygonals ) type ( var_arr_t ), intent ( out ) :: polygonals ( 3 : 8 ) integer :: i , j do i = 3 , 8 do j = 1000 , 9999 if ( is_polygonal ( i , j )) then call append ( polygonals ( i )% arr , j ) end if end do end do end subroutine get_polygonals function is_polygonal ( n , val ) result ( ret ) integer , intent ( in ) :: n , val logical :: ret select case ( n ) case ( 3 ) ret = is_triangle ( val ) case ( 4 ) ret = is_square ( val ) case ( 5 ) ret = is_pentagonal ( val ) case ( 6 ) ret = is_hexaonal ( val ) case ( 7 ) ret = is_heptagonal ( val ) case ( 8 ) ret = is_octagonal ( val ) case default error stop \"Not yet supported\" end select end function is_polygonal function is_triangle ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( is_int (. 5 * ( sqrt ( 1. + 8. * real ( val )) - 1. ))) ret = . true . end function is_triangle function is_square ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( is_int ( sqrt ( real ( val )))) ret = . true . end function is_square function is_pentagonal ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( is_int (( sqrt ( 1. + 2 4. * real ( val )) + 1. ) / 6. )) ret = . true . end function is_pentagonal function is_hexaonal ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( is_int (. 25 * ( sqrt ( 1. + 8. * real ( val )) + 1. ))) ret = . true . end function is_hexaonal function is_heptagonal ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( is_int (( sqrt ( 9. + 4 0. * real ( val )) + 3. ) / 1 0. )) ret = . true . end function is_heptagonal function is_octagonal ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( is_int (( sqrt ( 1. + 3. * real ( val )) + 1. ) / 3. )) ret = . true . end function is_octagonal function is_int ( val ) result ( ret ) real , intent ( in ) :: val logical :: ret real , parameter :: eps = tiny ( 0. ) ret = . false . if ( abs ( val - nint ( val )) < eps ) ret = . true . end function is_int end submodule euler_prob_0061_m","tags":"","loc":"sourcefile/prob_0061_m.f90.html"},{"title":"prob_0009_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0009_m.f90~~EfferentGraph sourcefile~prob_0009_m.f90 prob_0009_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0009_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0009_m Source Code prob_0009_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0009_m implicit none contains module character ( len = 20 ) function euler0009 () write ( euler0009 , \"(i20)\" ) ans ( 1000 ) end function euler0009 integer function ans ( n ) integer , intent ( in ) :: n integer :: a , b , c ans = 0 outer : do a = 1 , n inner : do b = a + 1 , n c = n - a - b if ( a ** 2 + b ** 2 == c ** 2 ) then ans = a * b * c return end if end do inner end do outer end function ans end submodule euler_prob_0009_m","tags":"","loc":"sourcefile/prob_0009_m.f90.html"},{"title":"prob_0030_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0030_m.f90~~EfferentGraph sourcefile~prob_0030_m.f90 prob_0030_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0030_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0030_m Source Code prob_0030_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0030_m implicit none contains module character ( len = 20 ) function euler0030 () write ( euler0030 , \"(i20)\" ) ans ( 999999 ) end function euler0030 integer function ans ( n ) integer , intent ( in ) :: n integer , allocatable :: arr (:) integer :: tmp , i tmp = 0 do i = 2 , n call int_2_arr ( i , arr ) if ( sum ( arr ** 5 ) == i ) then tmp = tmp + i end if end do ans = tmp end function ans end submodule euler_prob_0030_m","tags":"","loc":"sourcefile/prob_0030_m.f90.html"},{"title":"prob_0012_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0012_m.f90~~EfferentGraph sourcefile~prob_0012_m.f90 prob_0012_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0012_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0012_m Source Code prob_0012_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0012_m implicit none contains module character ( len = 20 ) function euler0012 () write ( euler0012 , \"(i20)\" ) ans ( 500 ) end function euler0012 function ans ( n ) result ( ret ) integer , intent ( in ) :: n integer :: ret , i i = 0 ret = 0 do i = i + 1 ret = ret + i if ( number_of_divisors ( ret ) > n ) exit end do end function ans function number_of_divisors ( val ) result ( ret ) integer , intent ( in ) :: val integer :: ret , i , x ret = 0 x = int ( sqrt ( real ( val ))) do i = 1 , x - 1 if ( mod ( val , i ) == 0 ) ret = ret + 2 end do if ( mod ( val , x ) == 0 ) ret = ret + 1 end function number_of_divisors end submodule euler_prob_0012_m","tags":"","loc":"sourcefile/prob_0012_m.f90.html"},{"title":"prob_0021_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0021_m.f90~~EfferentGraph sourcefile~prob_0021_m.f90 prob_0021_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0021_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0021_m Source Code prob_0021_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0021_m implicit none contains module character ( len = 20 ) function euler0021 () write ( euler0021 , \"(i20)\" ) ans ( 10000 ) end function euler0021 integer function ans ( n ) integer , intent ( in ) :: n procedure ( sum_of_prop_div ), pointer :: f integer :: p , t t = 0 f => sum_of_prop_div do p = 1 , n if ( f ( f ( p )) == p . and . f ( p ) /= p ) then t = t + p end if end do ans = t end function ans integer function sum_of_prop_div ( n ) integer , intent ( in ) :: n integer :: i , sum sum = 1 do i = 2 , int ( sqrt ( real ( n , sp ))) if ( mod ( n , i ) == 0 ) then sum = sum + i + n / i end if end do sum_of_prop_div = sum end function sum_of_prop_div end submodule euler_prob_0021_m","tags":"","loc":"sourcefile/prob_0021_m.f90.html"},{"title":"prob_0045_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0045_m.f90~~EfferentGraph sourcefile~prob_0045_m.f90 prob_0045_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0045_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0045_m Source Code prob_0045_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0045_m implicit none contains module character ( len = 20 ) function euler0045 () write ( euler0045 , \"(i20)\" ) ans () end function euler0045 integer ( int64 ) function ans () integer ( int64 ) :: x , y call hex_n_pen ( 3 , x , y ) ans = y * ( 2_int64 * y - 1_int64 ) end function ans recursive subroutine hex_n_pen ( i , x , y ) integer , intent ( in ) :: i integer ( int64 ), intent ( out ) :: x , y integer ( int64 ) :: a , b if ( i == 1 ) then x = 1_int64 y = 1_int64 else call hex_n_pen ( i - 1 , a , b ) x = 97_int64 * a + 112_int64 * b - 44_int64 y = 84_int64 * a + 97_int64 * b - 38_int64 end if end subroutine hex_n_pen end submodule euler_prob_0045_m","tags":"","loc":"sourcefile/prob_0045_m.f90.html"},{"title":"prob_0056_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0056_m.f90~~EfferentGraph sourcefile~prob_0056_m.f90 prob_0056_m.f90 sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~prob_0056_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0056_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0056_m Source Code prob_0056_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0056_m use euler_multiprecision_m implicit none contains module character ( len = 20 ) function euler0056 () write ( euler0056 , \"(i20)\" ) answer () end function euler0056 function answer () result ( ret ) integer , parameter :: const = 89 , ubound = 10 type ( multiprecision_int_t ) :: int_arr ( ubound ) integer :: ret , i , j , sum_arr ( ubound , ubound ) int_arr = [( to_long ( const + i ) ** const , i = 1 , ubound )] do j = 1 , ubound do i = 1 , ubound int_arr ( i ) = to_long ( const + i ) * int_arr ( i ) sum_arr ( i , j ) = sum ( int_arr ( i )% arr ) end do end do ret = maxval ( sum_arr ) end function answer end submodule euler_prob_0056_m","tags":"","loc":"sourcefile/prob_0056_m.f90.html"},{"title":"prob_0004_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0004_m.f90~~EfferentGraph sourcefile~prob_0004_m.f90 prob_0004_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0004_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0004_m Source Code prob_0004_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0004_m implicit none contains module character ( len = 20 ) function euler0004 () write ( euler0004 , \"(i20)\" ) ans ( 999 ) end function euler0004 integer function ans ( n ) integer , intent ( in ) :: n integer :: a , b , p_max p_max = 0 a = 100 do a = 100 , n do b = 100 , n if ( is_palindromic ( a * b ) . and . a * b > p_max ) p_max = a * b end do end do ans = p_max end function ans end submodule euler_prob_0004_m","tags":"","loc":"sourcefile/prob_0004_m.f90.html"},{"title":"prob_0040_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0040_m.f90~~EfferentGraph sourcefile~prob_0040_m.f90 prob_0040_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0040_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0040_m Source Code prob_0040_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0040_m implicit none contains module character ( len = 20 ) function euler0040 () write ( euler0040 , \"(i20)\" ) ans () end function euler0040 integer function ans () integer , allocatable :: arr (:) integer :: dig_arr ( 6 ), d ( 6 ), i , s dig_arr = [ 0 , 9 , 189 , 2889 , 38889 , 488889 ] d = [( 1 , i = 1 , 6 )] do i = 2 , 6 associate ( x => floor ( real (( 10 ** i - dig_arr ( i )) / i ), sp )) d ( i ) = x + 10 ** ( i - 1 ) - 1 end associate call int_2_arr ( d ( i ), arr ) s = mod ( 10 ** i - dig_arr ( i ), i ) d ( i ) = arr ( s ) deallocate ( arr ) end do ans = product ( d ) end function ans end submodule euler_prob_0040_m","tags":"","loc":"sourcefile/prob_0040_m.f90.html"},{"title":"prob_0058_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0058_m.f90~~EfferentGraph sourcefile~prob_0058_m.f90 prob_0058_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0058_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0058_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0058_m Source Code prob_0058_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0058_m implicit none contains module character ( len = 20 ) function euler0058 () write ( euler0058 , \"(i20)\" ) ans () end function euler0058 integer ( int64 ) function ans () use euler_primes_m , only : is_prime implicit none integer ( int64 ) :: n , k , i , arr ( 4 ) k = 0 n = 2 main_loop : do call diagonal_nums ( n , arr ) do i = 1 , 3 if ( is_prime ( arr ( i ))) k = k + 1 end do associate ( p_nums => real ( k ), tot_nums => real (( n - 1 ) * 4 + 1 )) if ( p_nums / tot_nums < 0.1_sp ) exit main_loop end associate n = n + 1 end do main_loop ans = side_len ( n ) end function ans subroutine diagonal_nums ( n , arr ) integer ( int64 ), intent ( in ) :: n integer ( int64 ), intent ( out ) :: arr (:) integer ( int64 ) :: bottom_left , diff bottom_left = ( n * 2 - 1 ) ** 2 diff = ( n - 1 ) * 2 arr ( 1 ) = bottom_left - 3 * diff arr ( 2 ) = bottom_left - 2 * diff arr ( 3 ) = bottom_left - diff arr ( 4 ) = bottom_left end subroutine diagonal_nums integer ( int64 ) function side_len ( n ) integer ( int64 ), intent ( in ) :: n side_len = n * 2_int64 - 1_int64 end function side_len end submodule euler_prob_0058_m","tags":"","loc":"sourcefile/prob_0058_m.f90.html"},{"title":"prob_0033_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0033_m.f90~~EfferentGraph sourcefile~prob_0033_m.f90 prob_0033_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0033_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0033_m Source Code prob_0033_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0033_m implicit none contains module character ( len = 20 ) function euler0033 () write ( euler0033 , \"(i20)\" ) ans () end function euler0033 integer function ans () integer :: c , d , n , dp , np c = 1 ; d = 1 ; n = 1 np = 1 ; dp = 1 do c = 1 , 9 do d = 1 , c - 1 do n = 1 , d - 1 if (( n * 10 + c ) * d == ( c * 10 + d ) * n ) then np = np * n dp = dp * d end if end do end do end do ans = dp / gcd ( np , dp ) end function ans end submodule euler_prob_0033_m","tags":"","loc":"sourcefile/prob_0033_m.f90.html"},{"title":"prob_0057_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0057_m.f90~~EfferentGraph sourcefile~prob_0057_m.f90 prob_0057_m.f90 sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~prob_0057_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0057_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0057_m Source Code prob_0057_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0057_m ! use euler_mi_m use euler_multiprecision_m implicit none contains module character ( len = 20 ) function euler0057 () write ( euler0057 , \"(i20)\" ) ans ( 1000 ) end function euler0057 integer function ans ( u_bound ) integer , intent ( in ) :: u_bound integer :: i , k type ( multiprecision_int_t ) :: a , b , c i = 1 ; k = 0 a = '1' ; b = '2' do if ( i == u_bound ) exit a = a + b * 2 call swap_long ( a , b ) c = a + b if ( size ( c % arr ) > size ( b % arr )) k = k + 1 i = i + 1 end do ans = k end function ans subroutine swap_long ( a , b ) type ( multiprecision_int_t ), intent ( inout ) :: a , b type ( multiprecision_int_t ) :: tmp call move_alloc ( a % arr , tmp % arr ) call move_alloc ( b % arr , a % arr ) call move_alloc ( tmp % arr , b % arr ) end subroutine swap_long end submodule euler_prob_0057_m","tags":"","loc":"sourcefile/prob_0057_m.f90.html"},{"title":"prob_0046_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0046_m.f90~~EfferentGraph sourcefile~prob_0046_m.f90 prob_0046_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0046_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0046_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0046_m Source Code prob_0046_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0046_m implicit none contains module character ( len = 20 ) function euler0046 () write ( euler0046 , \"(i20)\" ) ans ( 10000 ) end function euler0046 integer function ans ( n ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer , intent ( in ) :: n integer :: j , res logical :: not_found logical , allocatable :: is_prime (:) call sieve_of_Eratosthenes ( n , is_prime ) res = 1 ; not_found = . true . outer : do while ( not_found ) res = res + 2 j = 2 not_found = . false . inner : do while ( res >= j ) if ( is_prime ( j ) . and . is_twice_square ( res - j )) then not_found = . true . exit inner end if j = j + 1 end do inner end do outer ans = res end function ans logical function is_twice_square ( n ) integer , intent ( in ) :: n real ( dp ) :: sqrt_nover2 is_twice_square = . false . sqrt_nover2 = sqrt ( 0.5_dp * real ( n , dp )) if ( sqrt_nover2 - real ( floor ( sqrt_nover2 ), dp ) < tiny_dp ) & is_twice_square = . true . end function is_twice_square end submodule euler_prob_0046_m","tags":"","loc":"sourcefile/prob_0046_m.f90.html"},{"title":"prob_0043_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0043_m.f90~~EfferentGraph sourcefile~prob_0043_m.f90 prob_0043_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0043_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0043_m Source Code prob_0043_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0043_m implicit none integer ( int64 ) :: answer contains module character ( len = 20 ) function euler0043 () write ( euler0043 , \"(i20)\" ) ans () end function euler0043 integer ( int64 ) function ans () integer ( int64 ) :: test_arr ( 10 ) test_arr = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] call permute ( 10_int64 , test_arr , 1_int64 , 10_int64 ) ans = answer end function ans recursive subroutine permute ( n , a , l , r ) integer ( int64 ), intent ( in ) :: n , l , r integer ( int64 ), intent ( inout ) :: a ( n ) integer ( int64 ) :: i , tmp if ( l == r ) then call arr_2_int ( a , tmp ) if ( is_subinteger_divisible ( tmp )) then answer = answer + tmp end if return else do i = l , r call swap ( a ( i ), a ( l )) call permute ( 10_int64 , a , l + 1_int64 , r ) call swap ( a ( i ), a ( l )) end do end if end subroutine permute logical function is_subinteger_divisible ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: i , tmp , three_int , prime_arr ( 7 ) prime_arr = [ 17 , 13 , 11 , 7 , 5 , 3 , 2 ] tmp = n is_subinteger_divisible = . true . do i = 1 , 7 three_int = tmp - tmp / 1000 * 1000 if ( mod ( three_int , prime_arr ( i )) /= 0 ) then is_subinteger_divisible = . false . return end if tmp = tmp / 10 end do end function is_subinteger_divisible end submodule euler_prob_0043_m","tags":"","loc":"sourcefile/prob_0043_m.f90.html"},{"title":"prob_0011_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0011_m.f90~~EfferentGraph sourcefile~prob_0011_m.f90 prob_0011_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0011_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0011_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0011_m Source Code prob_0011_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0011_m implicit none contains module character ( len = 20 ) function euler0011 () write ( euler0011 , \"(i20)\" ) ans () end function euler0011 integer function ans () use euler_data_m , only : get_euler_data_0011 implicit none integer :: int_arr ( 20 , 20 ), the_box ( 4 , 4 ) integer :: i , j , prod_max character ( len = :), allocatable :: euler_data (:) call get_euler_data_0011 ( euler_data ) read ( euler_data , * ) int_arr prod_max = 0 outer : do i = 1 , 17 inner : do j = 1 , 17 the_box = int_arr ( i : i + 3 , j : j + 3 ) if ( max_block ( the_box ) > prod_max ) then prod_max = max_block ( the_box ) end if end do inner end do outer ans = prod_max end function ans integer function max_block ( m ) integer , intent ( in ) :: m (:, :) integer :: d1 ( 4 ), d2 ( 4 ) integer :: k do k = 1 , 4 d1 ( k ) = m ( k , k ) d2 ( k ) = m ( k , 5 - k ) end do max_block = max ( product ( m ( 1 : 4 , 1 )), product ( m ( 1 : 4 , 4 )), & product ( m ( 1 , 1 : 4 )), product ( m ( 4 , 1 : 4 )), & product ( d1 ( 1 : 4 )), product ( d2 ( 1 : 4 ))) end function max_block end submodule euler_prob_0011_m","tags":"","loc":"sourcefile/prob_0011_m.f90.html"},{"title":"prob_0063_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0063_m.f90~~EfferentGraph sourcefile~prob_0063_m.f90 prob_0063_m.f90 sourcefile~euler_multiprecision_m.f90 euler_multiprecision_m.f90 sourcefile~prob_0063_m.f90->sourcefile~euler_multiprecision_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0063_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_multiprecision_util_m.f90 euler_multiprecision_util_m.f90 sourcefile~euler_multiprecision_m.f90->sourcefile~euler_multiprecision_util_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0063_m Source Code prob_0063_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0063_m contains module character ( len = 20 ) function euler0063 () write ( euler0063 , \"(i20)\" ) answer () end function euler0063 function answer () result ( ret ) use euler_multiprecision_m implicit none integer :: ret , power , digs type ( multiprecision_int_t ) :: idx ret = 0 idx = 1 outer : do while ( idx <= 9 ) power = 1 inner : do digs = digits_of ( idx ** power ) if ( digs < power ) then exit inner else if ( digs == power ) then ret = ret + 1 end if power = power + 1 end do inner idx = idx + 1 end do outer end function answer end submodule euler_prob_0063_m","tags":"","loc":"sourcefile/prob_0063_m.f90.html"},{"title":"prob_0005_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0005_m.f90~~EfferentGraph sourcefile~prob_0005_m.f90 prob_0005_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0005_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0005_m Source Code prob_0005_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0005_m implicit none contains module character ( len = 20 ) function euler0005 () write ( euler0005 , \"(i20)\" ) ans ( 20_int64 ) end function euler0005 integer ( int64 ) function ans ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: i , tmp tmp = 1_int64 do i = 1_int64 , n tmp = lcm ( tmp , i ) end do ans = tmp end function ans end submodule euler_prob_0005_m","tags":"","loc":"sourcefile/prob_0005_m.f90.html"},{"title":"prob_0053_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0053_m.f90~~EfferentGraph sourcefile~prob_0053_m.f90 prob_0053_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0053_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0053_m Source Code prob_0053_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0053_m implicit none contains module character ( len = 20 ) function euler0053 () write ( euler0053 , \"(i20)\" ) ans ( 100 ) end function euler0053 integer function ans ( upper_bound ) integer , intent ( in ) :: upper_bound integer :: count , n , r integer :: c ( 0 : upper_bound , 0 : upper_bound ) integer , parameter :: b = 1000000 count = 0 do n = 1 , upper_bound c ( n , 0 ) = 1 c ( n , n ) = 1 do r = 1 , n - 1 c ( n , r ) = c ( n - 1 , r - 1 ) + c ( n - 1 , r ) if ( c ( n , r ) >= b ) then count = count + 1 c ( n , r ) = b end if end do end do ans = count end function ans end submodule euler_prob_0053_m","tags":"","loc":"sourcefile/prob_0053_m.f90.html"},{"title":"prob_0023_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0023_m.f90~~EfferentGraph sourcefile~prob_0023_m.f90 prob_0023_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0023_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0023_m Source Code prob_0023_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0023_m implicit none contains module character ( len = 20 ) function euler0023 () write ( euler0023 , \"(i20)\" ) ans () end function euler0023 function ans () result ( ret ) integer , allocatable :: abundant (:) integer , parameter :: min_ = 12 , max_ = 28123 logical , allocatable :: cannot_be_written (:) integer :: i , j , ret gen_abundant_arr : do i = min_ , max_ if ( is_abundant ( i )) call append ( abundant , i ) end do gen_abundant_arr allocate ( cannot_be_written ( max_ )) cannot_be_written = . true . do i = 1 , size ( abundant ) do j = i , size ( abundant ) associate ( x => abundant ( i ) + abundant ( j )) if ( x <= max_ ) cannot_be_written ( x ) = . false . end associate end do end do ret = sum ( pack ([( i , i = 1 , max_ )], cannot_be_written )) end function ans function is_abundant ( val ) result ( ret ) integer , intent ( in ) :: val logical :: ret ret = . false . if ( sum_of_proper_divisors ( val ) > val ) ret = . true . end function is_abundant function sum_of_proper_divisors ( val ) result ( ret ) integer , intent ( in ) :: val integer :: ret , i ret = 1 do i = 2 , int ( sqrt ( real ( val ))) if ( mod ( val , i ) == 0 ) then if ( val / i == i ) then ret = ret + i else ret = ret + i + val / i end if end if end do end function sum_of_proper_divisors end submodule euler_prob_0023_m","tags":"","loc":"sourcefile/prob_0023_m.f90.html"},{"title":"prob_0027_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0027_m.f90~~EfferentGraph sourcefile~prob_0027_m.f90 prob_0027_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0027_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0027_m Source Code prob_0027_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0027_m implicit none contains module character ( len = 20 ) function euler0027 () write ( euler0027 , \"(i20)\" ) ans () end function euler0027 integer function ans () integer :: a , b a = - ( 2 * 30 + 1 ) b = quadratic_primes ( 1 , 41 , 30 ) ans = a * b end function ans integer function quadratic_primes ( i , j , n ) integer , intent ( in ) :: i , j , n if ( abs ( i ) >= 1000 . or . abs ( j ) > 1000 ) then quadratic_primes = 0 return end if quadratic_primes = n ** 2 + i * n + j end function quadratic_primes end submodule euler_prob_0027_m","tags":"","loc":"sourcefile/prob_0027_m.f90.html"},{"title":"prob_0041_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0041_m.f90~~EfferentGraph sourcefile~prob_0041_m.f90 prob_0041_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0041_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0041_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0041_m Source Code prob_0041_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0041_m implicit none contains module character ( len = 20 ) function euler0041 () write ( euler0041 , \"(i20)\" ) ans ( 7654321 ) end function euler0041 integer function ans ( n ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer , intent ( in ) :: n logical , allocatable :: is_prime (:) integer :: i call sieve_of_Eratosthenes ( n , is_prime ) do i = n , 1 , - 1 if ( is_prime ( i ) . and . is_pandigital ( i , digs_of_int ( i ))) exit end do ans = i end function ans end submodule euler_prob_0041_m","tags":"","loc":"sourcefile/prob_0041_m.f90.html"},{"title":"prob_0014_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0014_m.f90~~EfferentGraph sourcefile~prob_0014_m.f90 prob_0014_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0014_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0014_m Source Code prob_0014_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0014_m implicit none contains module character ( len = 20 ) function euler0014 () write ( euler0014 , \"(i20)\" ) ans () end function euler0014 integer ( int64 ) function ans () integer ( int64 ) :: k , i , tmp tmp = 0_int64 ; k = 0_int64 do i = 500000_int64 , 1000000_int64 if ( collatz ( i ) > tmp ) then tmp = collatz ( i ) k = i end if end do ans = k end function ans integer ( int64 ) function collatz ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: t , m t = 0_int64 ; m = n loop_1 : do if ( m == 1 ) exit loop_1 if ( mod ( m , 2_int64 ) == 0_int64 ) then m = m / 2_int64 else m = 3_int64 * m + 1_int64 end if t = t + 1_int64 end do loop_1 collatz = t end function collatz end submodule euler_prob_0014_m","tags":"","loc":"sourcefile/prob_0014_m.f90.html"},{"title":"prob_0037_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0037_m.f90~~EfferentGraph sourcefile~prob_0037_m.f90 prob_0037_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0037_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0037_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0037_m Source Code prob_0037_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0037_m implicit none contains module character ( len = 20 ) function euler0037 () write ( euler0037 , \"(i20)\" ) ans ( 1000000_int64 ) end function euler0037 integer ( int64 ) function ans ( n ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: i , isum , icount logical , allocatable :: is_prime (:) call sieve_of_Eratosthenes ( n , is_prime ) i = 10_int64 isum = 0_int64 icount = 0_int64 do if ( icount == 11_int64 . or . i == n ) exit if ( is_prime ( i ) . and . is_truncatable ( i , is_prime )) then isum = isum + i icount = icount + 1_int64 end if i = i + 1_int64 end do ans = isum end function ans logical function is_truncatable ( n , is_prime ) integer ( int64 ), intent ( in ) :: n logical , allocatable , intent ( in ) :: is_prime (:) is_truncatable = . false . if ( is_left_truncatable ( n , is_prime ) . and . & is_right_truncatable ( n , is_prime )) is_truncatable = . true . end function is_truncatable logical function is_left_truncatable ( n , is_prime ) integer ( int64 ), intent ( in ) :: n logical , allocatable , intent ( in ) :: is_prime (:) integer ( int64 ) :: tmp tmp = 10_int64 do while ( tmp < n ) if (. not . is_prime ( mod ( n , tmp ))) then is_left_truncatable = . false . return end if tmp = tmp * 10_int64 end do is_left_truncatable = . true . end function is_left_truncatable logical function is_right_truncatable ( n , is_prime ) integer ( int64 ), intent ( in ) :: n logical , allocatable , intent ( in ) :: is_prime (:) integer ( int64 ) :: tmp tmp = n do while ( tmp > 0_int64 ) if ( is_prime ( tmp )) then tmp = tmp / 10_int64 else is_right_truncatable = . false . return end if end do is_right_truncatable = . true . end function is_right_truncatable end submodule euler_prob_0037_m","tags":"","loc":"sourcefile/prob_0037_m.f90.html"},{"title":"prob_0048_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0048_m.f90~~EfferentGraph sourcefile~prob_0048_m.f90 prob_0048_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0048_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0048_m Source Code prob_0048_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0048_m implicit none contains module character ( len = 20 ) function euler0048 () write ( euler0048 , \"(a20)\" ) trim ( ans ()) end function euler0048 character ( len = 20 ) function ans () integer :: isum ( 10 ), i , iarr ( 10 ) isum = 0 do i = 1 , 1000 call self_pow10 ( i , iarr ) call add10 ( isum , iarr ) end do write ( ans , \"(20(i1))\" ) isum end function ans subroutine add10 ( a , b ) integer , intent ( inout ) :: a (:) integer , intent ( in ) :: b (:) integer :: j a (:) = a (:) + b (:) do j = 10 , 2 , - 1 call carry_add ( a ( j - 1 : j )) end do a ( 1 ) = unit_digit ( a ( 1 )) end subroutine add10 subroutine self_pow10 ( n , iarr ) integer , intent ( in ) :: n integer , intent ( out ) :: iarr (:) integer :: i , j iarr (:) = 0 iarr ( 10 ) = n do i = 1 , n - 1 iarr ( 10 ) = iarr ( 10 ) * n do j = 10 , 2 , - 1 call carry_mul ( iarr ( j - 1 : j ), n ) end do iarr ( 1 ) = unit_digit ( iarr ( 1 )) end do end subroutine self_pow10 subroutine carry_mul ( a , m ) integer , intent ( inout ) :: a (:) !a(2) integer , intent ( in ) :: m integer :: tmp tmp = a ( 2 ) a ( 2 ) = unit_digit ( a ( 2 )) a ( 1 ) = a ( 1 ) * m + ( tmp - a ( 2 )) / 10 end subroutine carry_mul subroutine carry_add ( a ) integer , intent ( inout ) :: a (:) !a(2) integer :: tmp tmp = a ( 2 ) a ( 2 ) = unit_digit ( a ( 2 )) a ( 1 ) = a ( 1 ) + ( tmp - a ( 2 )) / 10 end subroutine carry_add end submodule euler_prob_0048_m","tags":"","loc":"sourcefile/prob_0048_m.f90.html"},{"title":"prob_0008_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0008_m.f90~~EfferentGraph sourcefile~prob_0008_m.f90 prob_0008_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0008_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0008_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0008_m Source Code prob_0008_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0008_m implicit none contains module character ( len = 20 ) function euler0008 () write ( euler0008 , \"(i20)\" ) ans () end function euler0008 integer ( int64 ) function ans () use euler_data_m , only : get_euler_data_0008 implicit none integer ( int64 ) :: long_int ( 1000 ), i , s , tmp character ( len = :), allocatable :: euler_data (:) call get_euler_data_0008 ( euler_data ) do i = 1 , 20 s = ( i - 1 ) * 50 + 1 read ( euler_data ( i ), \"(50(i1))\" ) long_int ( s : s + 49 ) end do tmp = 0 do i = 1 , 988 if ( product ( long_int ( i : i + 12 )) > tmp ) then tmp = product ( long_int ( i : i + 12 )) end if end do ans = tmp end function ans end submodule euler_prob_0008_m","tags":"","loc":"sourcefile/prob_0008_m.f90.html"},{"title":"prob_0050_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0050_m.f90~~EfferentGraph sourcefile~prob_0050_m.f90 prob_0050_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0050_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0050_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0050_m Source Code prob_0050_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0050_m implicit none contains module character ( len = 20 ) function euler0050 () write ( euler0050 , \"(i20)\" ) ans ( 1000000_int64 ) end function euler0050 integer ( int64 ) function ans ( upper_lim ) integer ( int64 ), intent ( in ) :: upper_lim integer ( int64 ) :: n , i , j , cur_sum integer ( int64 ), allocatable :: p_arr (:) call prime_arr ( upper_lim , p_arr ) n = 0_int64 do n = n + 1_int64 if ( sum ( p_arr ( 1 : n )) > upper_lim ) exit end do n = n - 1_int64 j = 1_int64 cur_sum = sum ( p_arr ( 1 : n )) outer : do i = n , 1 , - 1 j = 1_int64 cur_sum = sum ( p_arr ( 1 : i )) inner : do if ( any ( cur_sum == p_arr )) exit outer cur_sum = cur_sum - p_arr ( j ) j = j + 1_int64 end do inner end do outer ans = cur_sum end function ans subroutine prime_arr ( n , primes ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer ( int64 ), intent ( in ) :: n integer ( int64 ), allocatable , intent ( out ) :: primes (:) integer ( int64 ) :: i , j logical , allocatable :: is_prime (:) call sieve_of_Eratosthenes ( n , is_prime ) allocate ( primes ( count ( is_prime ))) j = 1 do i = 2 , n if ( is_prime ( i )) then primes ( j ) = i j = j + 1 end if end do end subroutine prime_arr end submodule euler_prob_0050_m","tags":"","loc":"sourcefile/prob_0050_m.f90.html"},{"title":"prob_0060_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0060_m.f90~~EfferentGraph sourcefile~prob_0060_m.f90 prob_0060_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0060_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0060_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0060_m Source Code prob_0060_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0060_m implicit none contains module character ( len = 20 ) function euler0060 () integer ( int64 ) :: input_arr ( 2 ) input_arr = [ 5000000_int64 , 1060_int64 ] write ( euler0060 , \"(i20)\" ) ans ( input_arr ) end function euler0060 integer ( int64 ) function ans ( n ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer ( int64 ), intent ( in ) :: n ( 2 ) integer ( int64 ) :: i , k , flags ( 2 ) logical , allocatable :: isprime (:), conc_is_prime (:, :) integer ( int64 ), allocatable :: primes (:), test_pair (:), idx (:) logical :: prime_pair_found , next_permutation_avail , checked call sieve_of_Eratosthenes ( n ( 1 ), isprime ) allocate ( primes ( count ( isprime ))) k = 1 do i = 0 , size ( isprime ) - 1 if ( isprime ( i )) then primes ( k ) = i k = k + 1 end if end do k = 5 allocate ( idx ( k )) idx = [ 2 , 3 , 4 , 5 , 6 ] prime_pair_found = . false . next_permutation_avail = . true . flags = [ 1 , 2 ] allocate ( conc_is_prime ( n ( 2 ), n ( 2 ))) conc_is_prime = . true . do while ( next_permutation_avail ) checked = checked_before ( idx , conc_is_prime , flags ) if ( checked ) then next_permutation_avail = next_combination ( k , n ( 2 ), flags , idx ) cycle end if test_pair = primes ( idx ) prime_pair_found = is_prime_pair ( test_pair , isprime , flags ) if ( prime_pair_found ) exit call gen_label ( flags , idx , conc_is_prime ) next_permutation_avail = next_combination ( k , n ( 2 ), flags , idx ) end do ans = sum ( primes ( idx )) end function function concatenate ( arr ) result ( ab ) integer ( int64 ), intent ( in ) :: arr (:) integer ( int64 ) :: ab , pow pow = digs_of_int ( arr ( 2 )) ab = arr ( 1 ) * 10 ** pow + arr ( 2 ) end function concatenate function checked_before ( test_idx , conc_is_prime , flags ) result ( ret ) integer ( int64 ), intent ( in ) :: test_idx (:) logical , intent ( in ) :: conc_is_prime (:, :) integer ( int64 ), intent ( inout ) :: flags ( 2 ) logical :: ret , next_avail integer ( int64 ) :: k , n , idx ( 2 ) k = 2 n = size ( test_idx ) idx = [ 1 , 2 ] ret = . false . next_avail = . true . do while ( next_avail ) associate ( x => test_idx ( idx ( 1 )), y => test_idx ( idx ( 2 )), & s => size ( conc_is_prime ( 1 , :))) if ( x < s . and . y < s ) then if (. not . conc_is_prime ( x , y )) then ret = . true . flags = idx return end if end if end associate next_avail = next_permutation ( k , n , idx ) end do end function checked_before subroutine gen_label ( flags , idx , conc_is_prime ) integer ( int64 ), intent ( in ) :: flags ( 2 ), idx (:) logical , intent ( inout ) :: conc_is_prime (:, :) associate ( x => idx ( flags ( 1 )), y => idx ( flags ( 2 )), & s => size ( conc_is_prime ( 1 , :))) if ( x < s . and . y < s ) then if ( conc_is_prime ( x , y )) then conc_is_prime ( x , y ) = . false . conc_is_prime ( y , x ) = . false . end if end if end associate end subroutine gen_label function next_combination ( k , n , flags , idx ) result ( ret ) integer ( int64 ), intent ( in ) :: k , n , flags ( 2 ) integer ( int64 ), intent ( inout ) :: idx (:) logical :: ret integer ( int64 ) :: i , end_arr ( k ), flag flag = max ( flags ( 1 ), flags ( 2 )) if ( flag == k . or . flag == 0_int64 ) then ret = next_permutation ( k , n , idx ) return end if end_arr = [( i , i = n - k + 1 , n )] ret = . true . if ( all ( idx == end_arr )) then ret = . false . return end if if ( idx ( size ( idx )) == n ) then ret = next_permutation ( k , n , idx ) else idx ( flag : k ) = [( idx ( flag ) + i , i = 1 , k - flag + 1 )] end if end function next_combination function is_prime_pair ( test_pair , isprime , flag ) result ( try_succeed ) use euler_primes_m , only : is_prime implicit none integer ( int64 ), intent ( in ) :: test_pair (:) logical , allocatable , intent ( in ) :: isprime (:) integer ( int64 ), intent ( out ) :: flag ( 2 ) integer ( int64 ) :: k , n , idx ( 2 ) logical :: avail , try_succeed k = 2 n = size ( test_pair ) try_succeed = . true . idx = [ 1 , 2 ] avail = . true . flag = 0 do while ( avail ) associate ( ab => concatenate ( test_pair ( idx )), & ba => concatenate ( test_pair ( idx ( 2 : 1 : - 1 )))) if ( ab <= size ( isprime )) then if (. not . isprime ( ab )) then flag = idx try_succeed = . false . return end if else if (. not . is_prime ( ab )) then flag = idx try_succeed = . false . return end if end if if ( ba <= size ( isprime )) then if (. not . isprime ( ba )) then flag = idx ( 2 : 1 : - 1 ) try_succeed = . false . return end if else if (. not . is_prime ( ba )) then flag = idx ( 2 : 1 : - 1 ) try_succeed = . false . return end if end if avail = next_permutation ( k , n , idx ) end associate end do end function is_prime_pair end submodule euler_prob_0060_m","tags":"","loc":"sourcefile/prob_0060_m.f90.html"},{"title":"prob_0022_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0022_m.f90~~EfferentGraph sourcefile~prob_0022_m.f90 prob_0022_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0022_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0022_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0022_m Source Code prob_0022_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0022_m implicit none contains module character ( len = 20 ) function euler0022 () write ( euler0022 , \"(i20)\" ) ans () end function euler0022 integer function ans () use euler_data_m , only : get_euler_data_0022 implicit none integer :: i , j , tmp character ( len = :), allocatable :: names (:) call get_euler_data_0022 ( names ) i = size ( names ) call lexical_sort ( names ( 1 : i )) tmp = 0 do j = 1 , i tmp = tmp + j * score_of_letters ( names ( j )) end do ans = tmp end function ans integer function score_of_letters ( str ) character ( * ), intent ( in ) :: str integer :: j , s s = 0 do j = 1 , len_trim ( str ) s = s + iachar ( str ( j : j )) - 64 end do score_of_letters = s end function score_of_letters subroutine lexical_sort ( a ) character ( len =* ), intent ( inout ) :: a (:) call quick_sort ( a , 1 , size ( a )) end subroutine lexical_sort recursive subroutine quick_sort ( a , low , high ) character ( len =* ), intent ( inout ) :: a (:) integer , intent ( in ) :: low , high integer :: p if ( low < high ) then p = partition ( a , low , high ) call quick_sort ( a , low , p - 1 ) call quick_sort ( a , p + 1 , high ) end if end subroutine quick_sort function partition ( a , low , high ) result ( i ) character ( len =* ), intent ( inout ) :: a (:) integer , intent ( in ) :: low , high character ( len = :), allocatable :: pivot integer :: i , j allocate ( character ( len = len ( a ( high ))) :: pivot ) pivot = a ( high ) i = low do j = low , high if ( a ( j ) < pivot ) then call swap_chr ( a ( i ), a ( j )) i = i + 1 end if end do call swap_chr ( a ( i ), a ( high )) end function partition subroutine swap_chr ( a , b ) character ( len =* ), intent ( inout ) :: a , b character ( len = len ( a )) :: tmp tmp = a a = b b = tmp end subroutine swap_chr end submodule euler_prob_0022_m","tags":"","loc":"sourcefile/prob_0022_m.f90.html"},{"title":"prob_0039_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0039_m.f90~~EfferentGraph sourcefile~prob_0039_m.f90 prob_0039_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0039_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0039_m Source Code prob_0039_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0039_m implicit none contains module character ( len = 20 ) function euler0039 () write ( euler0039 , \"(i20)\" ) ans ( 1000 ) end function euler0039 integer function ans ( n ) integer , intent ( in ) :: n integer :: i , count_arr ( n ) do i = 1 , n count_arr ( i ) = right_triangle_with_perimeter ( i ) end do ans = maxloc ( count_arr , dim = 1 ) end function ans integer function right_triangle_with_perimeter ( p ) integer , intent ( in ) :: p integer :: i , j , k , t t = 0 do i = 1 , p / 2 + 1 do j = 1 , p - i - 1 k = p - i - j if ( is_right_triangle ( i , j , k )) t = t + 1 end do end do right_triangle_with_perimeter = t end function right_triangle_with_perimeter logical function is_right_triangle ( i , j , k ) integer , intent ( in ) :: i , j , k is_right_triangle = . false . if ( i ** 2 + j ** 2 == k ** 2 ) then is_right_triangle = . true . end if end function is_right_triangle end submodule euler_prob_0039_m","tags":"","loc":"sourcefile/prob_0039_m.f90.html"},{"title":"prob_0015_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0015_m.f90~~EfferentGraph sourcefile~prob_0015_m.f90 prob_0015_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0015_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0015_m Source Code prob_0015_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0015_m implicit none contains module character ( len = 20 ) function euler0015 () write ( euler0015 , \"(i20)\" ) ans ( 20_int64 ) end function euler0015 integer ( int64 ) function ans ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: i , tmp tmp = 1_int64 do i = 1_int64 , n tmp = tmp * ( n + i ) / i end do ans = tmp end function ans end submodule euler_prob_0015_m","tags":"","loc":"sourcefile/prob_0015_m.f90.html"},{"title":"prob_0051_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0051_m.f90~~EfferentGraph sourcefile~prob_0051_m.f90 prob_0051_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0051_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0051_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0051_m Source Code prob_0051_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0051_m implicit none ! Nicely done by my two little wheels, int_2_arr and arr_2_int! !--------------------------------------------------------------------------- contains module character ( len = 20 ) function euler0051 () write ( euler0051 , \"(i20)\" ) answer () end function euler0051 function answer () result ( ret ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer , parameter :: PRIME_START = 100000 , PRIME_END = 999999 integer :: i , j , s , idx , tmp , p_knt , c_knt , ret integer , allocatable :: prime (:), arr (:) logical , allocatable :: is_prime (:) call sieve_of_Eratosthenes ( PRIME_END , is_prime ) prime = pack ([( i , i = 0 , PRIME_END )], is_prime ) prime = pack ( prime , prime > PRIME_START ) outer : do idx = 1 , size ( prime ) call int_2_arr ( prime ( idx ), arr ) associate ( k => [( count ( arr == i ), i = 0 , 2 )]) j = findloc ([( mod ( k ( i ), 3 ) == 0 , i = 1 , 3 )], value = . true ., dim = 1 ) if ( j == 0 ) cycle outer end associate p_knt = 0 ; c_knt = 0 associate ( r => pack ([( i , i = 1 , size ( arr ))], arr == arr ( j ))) s = 0 ; if ( any ( r == 1 )) s = 1 inner : do j = s , 9 arr ( r ) = j call arr_2_int ( arr , tmp ) if ( is_prime ( tmp )) then p_knt = p_knt + 1 else c_knt = c_knt + 1 end if if ( p_knt >= 8 ) exit outer if ( c_knt >= 3 ) exit inner end do inner end associate end do outer ret = prime ( idx ) end function answer end submodule euler_prob_0051_m","tags":"","loc":"sourcefile/prob_0051_m.f90.html"},{"title":"prob_0028_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0028_m.f90~~EfferentGraph sourcefile~prob_0028_m.f90 prob_0028_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0028_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0028_m Source Code prob_0028_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0028_m implicit none contains module character ( len = 20 ) function euler0028 () write ( euler0028 , \"(i20)\" ) ans () end function euler0028 integer function ans () integer :: i , k , ur , bl , br , ul , tmp tmp = 1 do i = 2 , 501 k = 2 * i - 1 ur = k ** 2 bl = ur - 2 * k + 2 br = bl - ( k - 1 ) ul = bl + ( k - 1 ) tmp = tmp + ur + bl + br + ul end do ans = tmp end function ans end submodule euler_prob_0028_m","tags":"","loc":"sourcefile/prob_0028_m.f90.html"},{"title":"prob_0003_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0003_m.f90~~EfferentGraph sourcefile~prob_0003_m.f90 prob_0003_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0003_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0003_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0003_m Source Code prob_0003_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0003_m implicit none contains module character ( len = 20 ) function euler0003 () write ( euler0003 , \"(i20)\" ) answer ( 600851475143_int64 ) end function euler0003 function answer ( n ) result ( ret ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer ( int64 ), intent ( in ) :: n logical , allocatable :: is_prime (:) integer ( int64 ) :: max_ , ret max_ = int ( sqrt ( real ( n , sp )) + 1._sp , int64 ) call sieve_of_Eratosthenes ( max_ , is_prime ) do ret = max_ , 2_int64 , - 1_int64 if ( is_prime ( ret ) . and . mod ( n , ret ) == 0_int64 ) exit end do end function answer end submodule euler_prob_0003_m","tags":"","loc":"sourcefile/prob_0003_m.f90.html"},{"title":"prob_0031_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0031_m.f90~~EfferentGraph sourcefile~prob_0031_m.f90 prob_0031_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0031_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0031_m Source Code prob_0031_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0031_m implicit none contains module character ( len = 20 ) function euler0031 () write ( euler0031 , \"(i20)\" ) ans ( 200 ) end function euler0031 integer function ans ( n ) integer , intent ( in ) :: n integer :: coins ( 0 : 7 ), i , j integer :: ans_arr ( 0 : 7 , 0 : n ) coins = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 ] ans_arr ( 1 : 7 , :) = 0 ans_arr ( 0 , :) = 1 outer : do j = 0 , n inner : do i = 1 , 7 associate ( next => ans_arr ( i , j ), prev => ans_arr ( i - 1 , j )) if ( j < coins ( i )) then next = prev else next = prev + ans_arr ( i , j - coins ( i )) end if end associate end do inner end do outer ans = ans_arr ( 7 , n ) end function ans end submodule euler_prob_0031_m","tags":"","loc":"sourcefile/prob_0031_m.f90.html"},{"title":"prob_0017_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0017_m.f90~~EfferentGraph sourcefile~prob_0017_m.f90 prob_0017_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0017_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0017_m Source Code prob_0017_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0017_m implicit none contains module character ( len = 20 ) function euler0017 () write ( euler0017 , \"(i20)\" ) ans () end function euler0017 integer function ans () integer :: tot_c , i tot_c = 0 do i = 1 , 9 tot_c = tot_c + count_letters ( i ) end do do i = 10 , 19 tot_c = tot_c + count_letters10 ( i ) end do do i = 20 , 99 tot_c = tot_c + count_letters10 ( i ) end do do i = 100 , 999 tot_c = tot_c + count_letters100 ( i ) end do ans = tot_c + 11 end function ans integer function count_letters ( n ) integer , intent ( in ) :: n integer :: temp select case ( n ) case ( 0 ) temp = 0 case ( 1 , 2 , 6 , 10 ) temp = 3 case ( 4 , 5 , 9 ) temp = 4 case ( 3 , 7 , 8 , 40 , 50 , 60 ) temp = 5 case ( 11 , 12 , 20 , 30 , 80 , 90 ) temp = 6 case ( 15 , 16 , 70 ) temp = 7 case ( 13 , 14 , 18 , 19 ) temp = 8 case ( 17 ) temp = 9 case ( 1000 ) temp = 8 case default temp = 1000 end select count_letters = temp end function count_letters integer function count_letters10 ( n ) integer , intent ( in ) :: n integer :: d1 , d2 d1 = 0 ; d2 = 0 if ( count_letters ( n ) /= 1000 ) then count_letters10 = count_letters ( n ) else d1 = ( n / 10 ) * 10 d2 = n - d1 count_letters10 = count_letters ( d1 ) + count_letters ( d2 ) end if if ( n == 0 ) then count_letters10 = 0 end if end function count_letters10 integer function count_letters100 ( n ) integer , intent ( in ) :: n integer :: d1 , d2 , hun , and hun = 7 ; and = 3 if ( mod ( n , 100 ) == 0 ) then d1 = n / 100 count_letters100 = count_letters ( d1 ) + hun else d1 = n / 100 d2 = n - ( n / 100 ) * 100 count_letters100 = count_letters ( d1 ) + & hun + and + count_letters10 ( d2 ) end if end function count_letters100 end submodule euler_prob_0017_m","tags":"","loc":"sourcefile/prob_0017_m.f90.html"},{"title":"prob_0034_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0034_m.f90~~EfferentGraph sourcefile~prob_0034_m.f90 prob_0034_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0034_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0034_m Source Code prob_0034_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0034_m implicit none contains module character ( len = 20 ) function euler0034 () write ( euler0034 , \"(i20)\" ) ans ( 40585 ) end function euler0034 integer function ans ( n ) integer , intent ( in ) :: n integer :: i , isum isum = 0 do i = 1 , n if ( is_curious ( i )) then isum = isum + i end if end do ans = isum end function ans logical function is_curious ( n ) integer , intent ( in ) :: n integer , allocatable :: arr (:) integer :: i , tmp if ( n == 1 . or . n == 2 ) then is_curious = . false . return end if tmp = 0 is_curious = . false . call int_2_arr ( n , arr ) do i = 1 , size ( arr ) tmp = tmp + factorial ( arr ( i )) end do if ( tmp == n ) is_curious = . true . end function is_curious end submodule euler_prob_0034_m","tags":"","loc":"sourcefile/prob_0034_m.f90.html"},{"title":"prob_0038_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0038_m.f90~~EfferentGraph sourcefile~prob_0038_m.f90 prob_0038_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0038_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0038_m Source Code prob_0038_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0038_m implicit none contains module character ( len = 20 ) function euler0038 () write ( euler0038 , \"(i20)\" ) ans () end function euler0038 integer ( int64 ) function ans () integer ( int64 ), allocatable :: common_arr (:) integer ( int64 ) :: i , j , tmp outer : do i = 2_int64 , 10000_int64 j = 1_int64 ; tmp = 0_int64 inner : do if ( tmp /= 0 ) then if ( digs_of_int ( tmp ) > 9_int64 ) then cycle outer end if end if if ( is_pandigital ( tmp )) then call append ( common_arr , tmp ) end if tmp = i * j + tmp * 10_int64 ** digs_of_int ( i * j ) j = j + 1_int64 end do inner end do outer ans = maxval ( common_arr , dim = 1 ) end function ans end submodule euler_prob_0038_m","tags":"","loc":"sourcefile/prob_0038_m.f90.html"},{"title":"prob_0036_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0036_m.f90~~EfferentGraph sourcefile~prob_0036_m.f90 prob_0036_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0036_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0036_m Source Code prob_0036_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0036_m implicit none contains module character ( len = 20 ) function euler0036 () write ( euler0036 , \"(i20)\" ) ans ( 1000000_int64 ) end function euler0036 integer ( int64 ) function ans ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: isum , i , next_ten_pow , p isum = 0_int64 ; i = 1_int64 next_ten_pow = 10_int64 p = gen_single_palindormic_10 ( i ) do while ( p <= n ) if ( is_palindromic_2 ( p )) then isum = isum + p end if p = p + ( i - i / 10_int64 ) * next_ten_pow if ( p <= n . and . is_palindromic_2 ( p )) isum = isum + p i = i + 1_int64 if ( i == next_ten_pow ) then next_ten_pow = next_ten_pow * 10_int64 end if p = gen_single_palindormic_10 ( i ) end do ans = isum end function ans integer ( int64 ) function gen_single_palindormic_10 ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: tmp , i tmp = n i = n / 10_int64 do while ( i > 0_int64 ) tmp = tmp * 10_int64 + mod ( i , 10_int64 ) i = i / 10_int64 end do gen_single_palindormic_10 = tmp end function gen_single_palindormic_10 logical function is_palindromic_2 ( n ) integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: a , b , digit a = n b = 0_int64 do while ( a > 0_int64 ) digit = mod ( a , 2_int64 ) b = b * 2_int64 + digit a = a / 2_int64 end do if ( n == b ) then is_palindromic_2 = . true . else is_palindromic_2 = . false . end if end function is_palindromic_2 end submodule euler_prob_0036_m","tags":"","loc":"sourcefile/prob_0036_m.f90.html"},{"title":"prob_0062_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0062_m.f90~~EfferentGraph sourcefile~prob_0062_m.f90 prob_0062_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0062_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0062_m Source Code prob_0062_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0062_m contains module character ( len = 20 ) function euler0062 () write ( euler0062 , \"(a20)\" ) \"                   x\" end function euler0062 end submodule euler_prob_0062_m","tags":"","loc":"sourcefile/prob_0062_m.f90.html"},{"title":"prob_0042_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0042_m.f90~~EfferentGraph sourcefile~prob_0042_m.f90 prob_0042_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0042_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_data_m.f90 euler_data_m.f90 sourcefile~prob_0042_m.f90->sourcefile~euler_data_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0042_m Source Code prob_0042_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0042_m implicit none contains module character ( len = 20 ) function euler0042 () write ( euler0042 , \"(i20)\" ) answer () end function euler0042 integer function answer () use euler_data_m , only : get_euler_data_0042 implicit none integer :: i , j integer , parameter :: max_score = 26 * 20 logical :: is_tri_num ( max_score ) character ( len = :), allocatable :: names (:) call tri_num ( max_score , is_tri_num ) call get_euler_data_0042 ( names ) j = 0 do i = 1 , size ( names ) if ( is_tri_num ( score_of_word ( names ( i )))) then j = j + 1 end if end do answer = j end function answer integer function score_of_word ( str ) character ( len =* ), intent ( in ) :: str integer :: j , isum isum = 0 do j = 1 , len_trim ( str ) isum = isum + iachar ( str ( j : j )) - 64 end do score_of_word = isum end function score_of_word subroutine tri_num ( n , is_tri_num ) integer , intent ( in ) :: n logical , intent ( out ) :: is_tri_num ( n ) integer :: i is_tri_num = . false . i = 1 do while ( i * ( i + 1 ) / 2 <= n ) is_tri_num ( i * ( i + 1 ) / 2 ) = . true . i = i + 1 end do end subroutine tri_num end submodule euler_prob_0042_m","tags":"","loc":"sourcefile/prob_0042_m.f90.html"},{"title":"prob_0044_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0044_m.f90~~EfferentGraph sourcefile~prob_0044_m.f90 prob_0044_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0044_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0044_m Source Code prob_0044_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0044_m implicit none integer ( int64 ), parameter :: dim_of_arr = 3000_int64 integer ( int64 ) :: pen_arr ( dim_of_arr ) contains module character ( len = 20 ) function euler0044 () write ( euler0044 , \"(i20)\" ) ans () end function euler0044 integer ( int64 ) function ans () integer ( int64 ) :: i , j , minimised_d integer ( int64 ) :: pm , pn j = 1_int64 i = 1_int64 do while ( i <= dim_of_arr ) if ( is_pen ( j )) then pen_arr ( i ) = j i = i + 1_int64 end if j = j + 1_int64 end do ! set minimised_d to a big number minimised_d = huge ( 0_int64 ) do i = 1_int64 , dim_of_arr do j = i + 1_int64 , dim_of_arr pm = pen_arr ( i ) pn = pen_arr ( j ) if ( is_pen_sum_diff ( pm , pn )) then minimised_d = min ( minimised_d , pn - pm ) end if end do end do ans = minimised_d end function ans logical function is_pen_sum_diff ( pj , pk ) integer ( int64 ), intent ( in ) :: pj , pk integer ( int64 ) :: s , d if ( pj > pk ) then error stop \"is_pen_SUM_DIFF: pj < pk\" end if s = pj + pk d = pk - pj if ( is_pen ( s ) . and . is_pen ( d )) then is_pen_sum_diff = . true . else is_pen_sum_diff = . false . end if end function is_pen_sum_diff logical function is_pen ( p ) integer ( int64 ), intent ( in ) :: p if ( p <= 0 ) then error stop \"is_pen: p > 0.\" end if associate ( x => sqrt ( 2 4.0_sp * real ( p ) + 1.0_sp )) if ( is_int ( x ) . and . mod ( int ( x , int64 ), 6_int64 ) == 5_int64 ) then is_pen = . true . else is_pen = . false . end if end associate end function is_pen logical function is_int ( n ) real , intent ( in ) :: n is_int = . false . if ( n - floor ( n ) <= tiny_sp ) then is_int = . true . end if end function is_int end submodule euler_prob_0044_m","tags":"","loc":"sourcefile/prob_0044_m.f90.html"},{"title":"prob_0026_m.f90 – PE Fortran","text":"This file depends on sourcefile~~prob_0026_m.f90~~EfferentGraph sourcefile~prob_0026_m.f90 prob_0026_m.f90 sourcefile~euler_interface_m.f90 euler_interface_m.f90 sourcefile~prob_0026_m.f90->sourcefile~euler_interface_m.f90 sourcefile~euler_primes_m.f90 euler_primes_m.f90 sourcefile~prob_0026_m.f90->sourcefile~euler_primes_m.f90 sourcefile~euler_utils_m.f90 euler_utils_m.f90 sourcefile~euler_interface_m.f90->sourcefile~euler_utils_m.f90 sourcefile~euler_primes_m.f90->sourcefile~euler_utils_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules euler_prob_0026_m Source Code prob_0026_m.f90 Source Code submodule ( euler_interface_m ) euler_prob_0026_m implicit none contains module character ( len = 20 ) function euler0026 () write ( euler0026 , \"(i20)\" ) answer ( 1000_int64 ) end function euler0026 function answer ( n ) result ( ret ) use euler_primes_m , only : sieve_of_Eratosthenes implicit none integer ( int64 ), intent ( in ) :: n integer ( int64 ) :: ret , tmp , k , i logical , allocatable :: is_prime (:) call sieve_of_Eratosthenes ( n , is_prime ) tmp = 0_int64 ; k = 1_int64 ; ret = 0_int64 do i = 7_int64 , n if ( is_prime ( i )) then tmp = multiplicative_order ( i , 10_int64 ) if ( tmp > k ) then k = tmp ret = i end if end if end do end function answer function multiplicative_order ( n , m ) result ( ret ) integer ( int64 ), intent ( in ) :: n , m integer ( int64 ) :: ret , res , k k = 1_int64 ; ret = 1_int64 do res = mod ( k * m , n ) if ( res /= 1_int64 ) then k = res ret = ret + 1_int64 else exit end if end do end function multiplicative_order end submodule euler_prob_0026_m","tags":"","loc":"sourcefile/prob_0026_m.f90.html"},{"title":"multiprecision_int_t – PE Fortran ","text":"type, public :: multiprecision_int_t Muliple precision integer type for Project Euler Usage Addition type ( multiprecision_int_t ) :: a , b , c integer ( int32 ) :: d integer ( int32 ), dimension ( 4 ) :: e a = '29348579238475928347592345' b = '49587394758345983423486928347' ! Add two multiprecision integer types together c = a + b ! Add a multiprecision integer type with an 32bit integer ! (every time the assignment '=' appears the allocatable array ! will be re-allocated) d = 2394 c = a + d ! One could also do something like the following, the array ! will be treated like an integer. e = [ 2 , 3 , 9 , 4 ] c = a + e Subtraction type ( multiprecision_int_t ) :: a , b , c a = '29348579238475928347592345' b = '49587394758345983423486928347' c = a - b Multiplication type ( multiprecision_int_t ) :: a , b , c a = '29348579238475928347592345' b = '49587394758345983423486928347' c = a * b Power type ( multiprecision_int_t ) :: a , b b = a ** 2345 Comparison type ( multiprecision_int_t ) :: a , b , c a = '29348579238475928347592345' b = '49587394758345983423486928347' print * , a >= b , a == b , a <= b To-do list Print the value Floor division (for Miller-rabin) Power (Partially done) Factorial Contents Variables arr sgn Type-Bound Procedures re_alloc assignment(=) operator(==) operator(>) operator(<) operator(>=) operator(<=) operator(+) operator(-) operator(*) operator(**) Components Type Visibility Attributes Name Initial integer, public, allocatable :: arr (:) character(len=1), public :: sgn Type-Bound Procedures procedure, public :: re_alloc => re_alloc_sub private subroutine re_alloc_sub(this, n) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(inout) :: this integer, intent(in) :: n generic, public :: assignment(=) => init_char_sub, init_int_sub, init_arr_sub private subroutine init_char_sub(this, chars) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(inout) :: this character(len=*), intent(in) :: chars private subroutine init_int_sub(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(inout) :: this integer, intent(in) :: val private subroutine init_arr_sub(this, arr) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(inout) :: this integer, intent(in), allocatable :: arr (:) generic, public :: operator(==) => eq_func, eq_int_func, eq_char_func private function eq_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value logical private function eq_int_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value logical private function eq_char_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value logical generic, public :: operator(>) => gt_func, gt_int_func, gt_char_func private function gt_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value logical private function gt_int_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value logical private function gt_char_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value logical generic, public :: operator(<) => lt_func, lt_int_func, lt_char_func private function lt_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value logical private function lt_int_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value logical private function lt_char_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value logical generic, public :: operator(>=) => ge_func, ge_int_func, ge_char_func private function ge_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value logical private function ge_int_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value logical private function ge_char_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value logical generic, public :: operator(<=) => le_func, le_int_func, le_char_func private function le_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value logical private function le_int_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value logical private function le_char_func(this, val) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value logical generic, public :: operator(+) => add_func, add_int_func, add_char_func private function add_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value type( multiprecision_int_t ) private function add_int_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value type( multiprecision_int_t ) private function add_char_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value type( multiprecision_int_t ) generic, public :: operator(-) => sub_func, sub_int_func, sub_char_func private function sub_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value type( multiprecision_int_t ) private function sub_int_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value type( multiprecision_int_t ) private function sub_char_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value type( multiprecision_int_t ) generic, public :: operator(*) => mul_func, mul_int_func, mul_char_func private function mul_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this type( multiprecision_int_t ), intent(in) :: val Return Value type( multiprecision_int_t ) private function mul_int_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value type( multiprecision_int_t ) private function mul_char_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this character(len=*), intent(in) :: val Return Value type( multiprecision_int_t ) generic, public :: operator(**) => pow_int_func private function pow_int_func(this, val) result(ret) Arguments Type Intent Optional Attributes Name class( multiprecision_int_t ), intent(in) :: this integer, intent(in) :: val Return Value type( multiprecision_int_t )","tags":"","loc":"type/multiprecision_int_t.html"},{"title":"var_arr_t – PE Fortran ","text":"type, public :: var_arr_t Contents Variables arr Components Type Visibility Attributes Name Initial integer, public, allocatable :: arr (:)","tags":"","loc":"type/var_arr_t.html"},{"title":"euler_probs_t – PE Fortran ","text":"type, public :: euler_probs_t Contents Variables answer Components Type Visibility Attributes Name Initial procedure( euler_prob_x ), public, nopass, pointer :: answer","tags":"","loc":"type/euler_probs_t.html"},{"title":"euler_prob_x – PE Fortran","text":"abstract interface public function euler_prob_x() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler_prob_x.html"},{"title":"add – PE Fortran","text":"public function add(arr1, arr2) result(ret) The core function to provide the ability of addition. Each element of the input array is an 32bit integer greater than or\n equal to zero and less than or equal to nine. When two such arrays\n are \"added\", first of all, the shorter array will be extended to the\n length of the longer array and two arrays with the same dimension\n are added. Then the function carry \" carries \" the\n added array iteratively until all elements of the array are greater\n than or equal to zero and less than or equal to nine. Finally, the\n leading zeros are deleted by cut_leading_zeros . Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer,\n  allocatable,dimension(:) Contents None","tags":"","loc":"proc/add.html"},{"title":"sub – PE Fortran","text":"public function sub(arr1, arr2) result(ret) The core function to provide the ability of subtraction. Each element of the input array is an 32bit integer greater than or\n equal to zero and less than or equal to nine. Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer,\n  allocatable,dimension(:) Contents None","tags":"","loc":"proc/sub.html"},{"title":"compare – PE Fortran","text":"public function compare(arr1, arr2) result(ret) The core function to provide the ability of comparison. ret = 1 : arr1 > arr2 ret = 0 : arr1 = arr2 ret = -1 : arr1 < arr2 Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer Contents None","tags":"","loc":"proc/compare.html"},{"title":"mul – PE Fortran","text":"public function mul(arr1, arr2) result(ret) The core function to provide the ability of multiplication. Each element of the input array is an 32bit integer greater than or\n equal to zero and less than or equal to nine. Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer,\n  allocatable,(:) Called by proc~~mul~~CalledByGraph proc~mul mul proc~pow2 pow2 proc~pow2->proc~mul proc~pow2->proc~pow2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/mul.html"},{"title":"pow2 – PE Fortran","text":"public recursive function pow2(arr, n) result(ret) The core function to provide the ability of power. Each element of the input array is an 32bit integer greater than or\n equal to zero and less than or equal to nine. The function uses\n a very simple implementation of exponentiation\n ( wiki links ). The function currently doesn't\n support negative powers. Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr (:) integer, intent(in) :: n Return Value integer,\n  allocatable,(:) Calls proc~~pow2~~CallsGraph proc~pow2 pow2 proc~pow2->proc~pow2 proc~mul mul proc~pow2->proc~mul Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/pow2.html"},{"title":"euler0001 – PE Fortran","text":"interface public module function euler0001() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0001.html"},{"title":"euler0002 – PE Fortran","text":"interface public module function euler0002() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0002.html"},{"title":"euler0003 – PE Fortran","text":"interface public module function euler0003() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0003.html"},{"title":"euler0004 – PE Fortran","text":"interface public module function euler0004() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0004.html"},{"title":"euler0005 – PE Fortran","text":"interface public module function euler0005() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0005.html"},{"title":"euler0006 – PE Fortran","text":"interface public module function euler0006() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0006.html"},{"title":"euler0007 – PE Fortran","text":"interface public module function euler0007() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0007.html"},{"title":"euler0008 – PE Fortran","text":"interface public module function euler0008() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0008.html"},{"title":"euler0009 – PE Fortran","text":"interface public module function euler0009() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0009.html"},{"title":"euler0010 – PE Fortran","text":"interface public module function euler0010() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0010.html"},{"title":"euler0011 – PE Fortran","text":"interface public module function euler0011() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0011.html"},{"title":"euler0012 – PE Fortran","text":"interface public module function euler0012() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0012.html"},{"title":"euler0013 – PE Fortran","text":"interface public module function euler0013() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0013.html"},{"title":"euler0014 – PE Fortran","text":"interface public module function euler0014() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0014.html"},{"title":"euler0015 – PE Fortran","text":"interface public module function euler0015() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0015.html"},{"title":"euler0016 – PE Fortran","text":"interface public module function euler0016() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0016.html"},{"title":"euler0017 – PE Fortran","text":"interface public module function euler0017() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0017.html"},{"title":"euler0018 – PE Fortran","text":"interface public module function euler0018() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0018.html"},{"title":"euler0019 – PE Fortran","text":"interface public module function euler0019() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0019.html"},{"title":"euler0020 – PE Fortran","text":"interface public module function euler0020() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0020.html"},{"title":"euler0021 – PE Fortran","text":"interface public module function euler0021() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0021.html"},{"title":"euler0022 – PE Fortran","text":"interface public module function euler0022() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0022.html"},{"title":"euler0023 – PE Fortran","text":"interface public module function euler0023() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0023.html"},{"title":"euler0024 – PE Fortran","text":"interface public module function euler0024() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0024.html"},{"title":"euler0025 – PE Fortran","text":"interface public module function euler0025() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0025.html"},{"title":"euler0026 – PE Fortran","text":"interface public module function euler0026() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0026.html"},{"title":"euler0027 – PE Fortran","text":"interface public module function euler0027() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0027.html"},{"title":"euler0028 – PE Fortran","text":"interface public module function euler0028() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0028.html"},{"title":"euler0029 – PE Fortran","text":"interface public module function euler0029() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0029.html"},{"title":"euler0030 – PE Fortran","text":"interface public module function euler0030() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0030.html"},{"title":"euler0031 – PE Fortran","text":"interface public module function euler0031() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0031.html"},{"title":"euler0032 – PE Fortran","text":"interface public module function euler0032() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0032.html"},{"title":"euler0033 – PE Fortran","text":"interface public module function euler0033() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0033.html"},{"title":"euler0034 – PE Fortran","text":"interface public module function euler0034() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0034.html"},{"title":"euler0035 – PE Fortran","text":"interface public module function euler0035() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0035.html"},{"title":"euler0036 – PE Fortran","text":"interface public module function euler0036() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0036.html"},{"title":"euler0037 – PE Fortran","text":"interface public module function euler0037() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0037.html"},{"title":"euler0038 – PE Fortran","text":"interface public module function euler0038() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0038.html"},{"title":"euler0039 – PE Fortran","text":"interface public module function euler0039() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0039.html"},{"title":"euler0040 – PE Fortran","text":"interface public module function euler0040() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0040.html"},{"title":"euler0041 – PE Fortran","text":"interface public module function euler0041() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0041.html"},{"title":"euler0042 – PE Fortran","text":"interface public module function euler0042() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0042.html"},{"title":"euler0043 – PE Fortran","text":"interface public module function euler0043() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0043.html"},{"title":"euler0044 – PE Fortran","text":"interface public module function euler0044() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0044.html"},{"title":"euler0045 – PE Fortran","text":"interface public module function euler0045() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0045.html"},{"title":"euler0046 – PE Fortran","text":"interface public module function euler0046() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0046.html"},{"title":"euler0047 – PE Fortran","text":"interface public module function euler0047() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0047.html"},{"title":"euler0048 – PE Fortran","text":"interface public module function euler0048() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0048.html"},{"title":"euler0049 – PE Fortran","text":"interface public module function euler0049() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0049.html"},{"title":"euler0050 – PE Fortran","text":"interface public module function euler0050() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0050.html"},{"title":"euler0051 – PE Fortran","text":"interface public module function euler0051() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0051.html"},{"title":"euler0052 – PE Fortran","text":"interface public module function euler0052() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0052.html"},{"title":"euler0053 – PE Fortran","text":"interface public module function euler0053() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0053.html"},{"title":"euler0054 – PE Fortran","text":"interface public module function euler0054() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0054.html"},{"title":"euler0055 – PE Fortran","text":"interface public module function euler0055() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0055.html"},{"title":"euler0056 – PE Fortran","text":"interface public module function euler0056() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0056.html"},{"title":"euler0057 – PE Fortran","text":"interface public module function euler0057() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0057.html"},{"title":"euler0058 – PE Fortran","text":"interface public module function euler0058() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0058.html"},{"title":"euler0059 – PE Fortran","text":"interface public module function euler0059() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0059.html"},{"title":"euler0060 – PE Fortran","text":"interface public module function euler0060() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0060.html"},{"title":"euler0061 – PE Fortran","text":"interface public module function euler0061() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0061.html"},{"title":"euler0062 – PE Fortran","text":"interface public module function euler0062() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0062.html"},{"title":"euler0063 – PE Fortran","text":"interface public module function euler0063() Arguments None Return Value character(len=20)","tags":"","loc":"interface/euler0063.html"},{"title":"is_prime – PE Fortran","text":"public interface is_prime Contents Module Procedures is_prime_int32 is_prime_int64 Module Procedures private function is_prime_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value logical private function is_prime_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value logical","tags":"","loc":"interface/is_prime.html"},{"title":"sieve_of_Eratosthenes – PE Fortran","text":"public interface sieve_of_Eratosthenes Contents Module Procedures sieve_of_Eratosthenes_int32 sieve_of_Eratosthenes_int64 Module Procedures private subroutine sieve_of_Eratosthenes_int32(n, prime_arr) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n logical, allocatable, dimension(:) :: prime_arr private subroutine sieve_of_Eratosthenes_int64(n, prime_arr) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n logical, allocatable, dimension(:) :: prime_arr","tags":"","loc":"interface/sieve_of_eratosthenes.html"},{"title":"unit_digit – PE Fortran","text":"public interface unit_digit A generic interface that returns the unit digit of an integer. Usage program main use euler_utils_m implicit none print * , unit_digit ( 324 ) ! 4 print * , unit_digit ( 543212345_int64 ) ! 5 end program main Contents Module Procedures unit_digit_int32 unit_digit_int64 Module Procedures private pure function unit_digit_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function unit_digit_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64)","tags":"","loc":"interface/unit_digit.html"},{"title":"swap – PE Fortran","text":"public interface swap A generic interface that swap two elements (the two elements\n have to be the same type. When swapping two character types,\n the two character variables must have the same length.). Usage program main use euler_utils_m implicit none integer :: a , b a = 32 ; b = 23 print * , a , b ! 32, 23 call swap ( a , b ) print * , a , b ! 23, 32 end program main Contents Module Procedures swap_sp swap_dp swap_int32 swap_int64 swap_equal_len_char Module Procedures private pure subroutine swap_sp(a, b) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: a real(kind=sp), intent(inout) :: b private pure subroutine swap_dp(a, b) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: a real(kind=dp), intent(inout) :: b private pure subroutine swap_int32(a, b) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: a integer, intent(inout) :: b private pure subroutine swap_int64(a, b) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: a integer(kind=int64), intent(inout) :: b private pure subroutine swap_equal_len_char(a, b) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: a character(len=len(a)), intent(inout) :: b","tags":"","loc":"interface/swap.html"},{"title":"digs_of_int – PE Fortran","text":"public interface digs_of_int A generic interface that returns the length of an integer. Usage program main user euler_utils_m implicit none print * , digs_of_int ( 12345 ) ! 5 print * , digs_of_int ( 1234567890_int64 ) ! 10 end program main Contents Module Procedures digs_of_int_int32 digs_of_int_int64 Module Procedures private pure function digs_of_int_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function digs_of_int_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64)","tags":"","loc":"interface/digs_of_int.html"},{"title":"fibonacci – PE Fortran","text":"public interface fibonacci A generic interface that returns the n th fibonacci number. Usage program main use euler_utils_m implicit none print * , fibonacci ( 12 ) ! 144 print * , fibonacci ( 12_int64 ) ! 144 end program main Contents Module Procedures fib32 fib64 Module Procedures private pure recursive function fib32(n) result(ans) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure recursive function fib64(n) result(ans) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64)","tags":"","loc":"interface/fibonacci.html"},{"title":"reverse – PE Fortran","text":"public interface reverse A generic interface that reverse the digits of an integer. Usage program main use euler_utils_m implicit none print * , reverse ( 12345 ) ! 54321 print * , reverse ( 12345_int64 ) ! 54321 end program main Contents Module Procedures reverse_int32 reverse_int64 Module Procedures private pure function reverse_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function reverse_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64)","tags":"","loc":"interface/reverse.html"},{"title":"is_palindromic – PE Fortran","text":"public interface is_palindromic A generic interface that tells if an integer is a palindromic integer. Usage program main use euler_utils_m implicit none integer :: a = 123454321 , b = 1234 print * , is_palindromic ( a ) ! T print * , is_palindromic ( b ) ! F end program main Contents Module Procedures is_palindromic_int32 is_palindromic_int64 Module Procedures private pure function is_palindromic_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value logical private pure function is_palindromic_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value logical","tags":"","loc":"interface/is_palindromic.html"},{"title":"gcd – PE Fortran","text":"public interface gcd Greatest common divisor. Usage program main use euler_utils_m implicit none print * , gcd ( 32 , 24 ) ! 8 print * , gcd ( 32_int64 , 24_int64 ) ! 8 end program main Contents Module Procedures gcd_int32 gcd_int64 Module Procedures private pure recursive function gcd_int32(n1, n2) result(ans) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n1 integer, intent(in) :: n2 Return Value integer private pure recursive function gcd_int64(n1, n2) result(ans) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n1 integer(kind=int64), intent(in) :: n2 Return Value integer(kind=int64)","tags":"","loc":"interface/gcd.html"},{"title":"lcm – PE Fortran","text":"public interface lcm Least common multiple. Usage program main use euler_utils_m implicit none print * , lcm ( 3 , 4 ) ! 12 print * , lcm ( 3_int64 , 4_int64 ) ! 12 end program main Contents Module Procedures lcm_int32 lcm_int64 Module Procedures private pure function lcm_int32(n1, n2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n1 integer, intent(in) :: n2 Return Value integer private pure function lcm_int64(n1, n2) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n1 integer(kind=int64), intent(in) :: n2 Return Value integer(kind=int64)","tags":"","loc":"interface/lcm.html"},{"title":"factorial – PE Fortran","text":"public interface factorial Factorial. Usage program main use euler_utils_m implicit none print * , factorial ( 4 ) ! 24 print * , factorial ( 4_int64 ) ! 24 end program main Contents Module Procedures factorial_int32 factorial_int64 Module Procedures private pure function factorial_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function factorial_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64)","tags":"","loc":"interface/factorial.html"},{"title":"is_pandigital – PE Fortran","text":"public interface is_pandigital To judge whether an integer is a pandigital number. Usage program main use euler_utils_m implicit none print * , is_pandigital ( 1023456789 ) ! T end program main Contents Module Procedures is_pandigital_int32 is_pandigital_int64 Module Procedures private pure function is_pandigital_int32(n, digs) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in), optional :: digs Return Value logical private pure function is_pandigital_int64(n, digs) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n integer(kind=int64), intent(in), optional :: digs Return Value logical","tags":"","loc":"interface/is_pandigital.html"},{"title":"int_2_arr – PE Fortran","text":"public interface int_2_arr Convert integer to an integer array. Usage program main use euler_utils_m implicit none integer :: a = 234 integer , allocatable :: arr (:) call int_2_arr ( a , arr ) print * , arr ! [2, 3, 4] end program main Contents Module Procedures int_2_arr_int32 int_2_arr_int64 Module Procedures private pure subroutine int_2_arr_int32(n, arr) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(out), allocatable :: arr (:) private pure subroutine int_2_arr_int64(n, arr) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n integer, intent(out), allocatable :: arr (:)","tags":"","loc":"interface/int_2_arr.html"},{"title":"arr_2_int – PE Fortran","text":"public interface arr_2_int Convert an integer arr to an integer. Usage program main use euler_utils_m implicit none integer :: arr ( 3 ) = [ 2 , 3 , 4 ] integer :: a call arr_2_int ( arr , a ) print * , a ! 234 end program main Contents Module Procedures arr_2_int_int32 arr_2_int_int64 Module Procedures private pure subroutine arr_2_int_int32(arr, n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: arr (:) integer, intent(out) :: n private pure subroutine arr_2_int_int64(arr, n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: arr (:) integer(kind=int64), intent(out) :: n","tags":"","loc":"interface/arr_2_int.html"},{"title":"append – PE Fortran","text":"public interface append Append an element to the end of an array Usage program main use euler_utils_m implicit none integer , allocatable :: arr (:) arr = [ 1 , 2 , 3 ] call append ( arr , 4 ) print * , arr ! [1, 2, 3, 4] end program main Contents Module Procedures append_sp append_dp append_int32 append_int64 Module Procedures private pure subroutine append_sp(arr, e) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout), allocatable :: arr (:) real(kind=sp), intent(in) :: e private pure subroutine append_dp(arr, e) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout), allocatable :: arr (:) real(kind=dp), intent(in) :: e private pure subroutine append_int32(arr, e) Arguments Type Intent Optional Attributes Name integer, intent(inout), allocatable :: arr (:) integer, intent(in) :: e private pure subroutine append_int64(arr, e) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), allocatable :: arr (:) integer(kind=int64), intent(in) :: e","tags":"","loc":"interface/append.html"},{"title":"next_permutation – PE Fortran","text":"public interface next_permutation An interface of variant permutation functions next_permutation_int32/int64 (k-permutation of n) program main use euler_utils_m implicit none integer :: k , n integer , dimesion ( 2 ) :: arr logical :: next_permutation_available k = 2 ; n = 3 arr = [ 1 , 2 ] next_permutation_available = . true . do while ( next_permutation_available ) print * , arr next_permutation_available = permutation ( k , n , arr ) end do ! Output: (1, 2), (1, 3), and (2, 3). end program main next_permutation2_int32 permutation program main use euler_utils_m implicit none integer :: arr ( 3 ) logical :: next_permutation_available arr = [ 1 , 2 , 3 ] next_permutation_available = . true . do while ( next_permutation_available ) print * , arr next_permutation_available = permutation ( arr ) end do ! Output: (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), ! (3, 1, 2), and (3, 2, 1). end program main Contents Module Procedures next_permutation_int32 next_permutation_int64 next_permutation2_int32 Module Procedures private function next_permutation_int32(k, n, idx) result(ret) Arguments Type Intent Optional Attributes Name integer, intent(in) :: k integer, intent(in) :: n integer, intent(inout) :: idx (k) Return Value logical private function next_permutation_int64(k, n, idx) result(ret) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: k integer(kind=int64), intent(in) :: n integer(kind=int64), intent(inout) :: idx (k) Return Value logical private function next_permutation2_int32(arr) result(ret) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: arr (:) Return Value logical","tags":"","loc":"interface/next_permutation.html"},{"title":"get_euler_data_0008 – PE Fortran","text":"public subroutine get_euler_data_0008(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0008.html"},{"title":"get_euler_data_0011 – PE Fortran","text":"public subroutine get_euler_data_0011(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0011.html"},{"title":"get_euler_data_0013 – PE Fortran","text":"public subroutine get_euler_data_0013(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0013.html"},{"title":"get_euler_data_0018 – PE Fortran","text":"public subroutine get_euler_data_0018(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0018.html"},{"title":"get_euler_data_0022 – PE Fortran","text":"public subroutine get_euler_data_0022(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0022.html"},{"title":"get_euler_data_0042 – PE Fortran","text":"public subroutine get_euler_data_0042(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0042.html"},{"title":"get_euler_data_0054 – PE Fortran","text":"public subroutine get_euler_data_0054(euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0054.html"},{"title":"get_euler_data_0059 – PE Fortran","text":"public subroutine get_euler_data_0059(euler_data) Arguments Type Intent Optional Attributes Name integer, intent(out), allocatable :: euler_data (:) Contents None","tags":"","loc":"proc/get_euler_data_0059.html"},{"title":"to_long – PE Fortran","text":"public interface to_long A generic interface that converts an integer or a string\n into a multiple precision integer type. Usage type ( multiprecision_int_t ) :: a , b a = '23405982034958034850495098430294850293485' b = a + to_long ( '93845734958' ) Contents Module Procedures to_long_char to_long_int Module Procedures private function to_long_char(chars) result(ret) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: chars Return Value type( multiprecision_int_t ) private function to_long_int(val) result(ret) Arguments Type Intent Optional Attributes Name integer, intent(in) :: val Return Value type( multiprecision_int_t )","tags":"","loc":"interface/to_long.html"},{"title":"digits_of – PE Fortran","text":"public interface digits_of A generic interface that returns the length(digits) of a multiple\n precision integer, essentially that is Usage type ( multiprecision_int_t ) :: a a = '23405982034958034850495098430294850293485' print * , size ( a % arr ) == digits_of ( a ) ! T Contents Module Procedures digits_of_func Module Procedures private function digits_of_func(val) result(ret) Arguments Type Intent Optional Attributes Name type( multiprecision_int_t ), intent(in) :: val Return Value integer","tags":"","loc":"interface/digits_of.html"},{"title":"get_arguments – PE Fortran","text":"public subroutine get_arguments() Arguments None Contents None","tags":"","loc":"proc/get_arguments.html"},{"title":"euler_init – PE Fortran","text":"public subroutine euler_init(probs) Arguments Type Intent Optional Attributes Name type( euler_probs_t ), intent(out), allocatable :: probs (:) Contents None","tags":"","loc":"proc/euler_init.html"},{"title":"euler_multiprecision_util_m – PE Fortran","text":"Used by module~~euler_multiprecision_util_m~~UsedByGraph module~euler_multiprecision_util_m euler_multiprecision_util_m module~euler_multiprecision_m euler_multiprecision_m module~euler_multiprecision_m->module~euler_multiprecision_util_m module~euler_prob_0055_m euler_prob_0055_m module~euler_prob_0055_m->module~euler_multiprecision_m module~euler_prob_0057_m euler_prob_0057_m module~euler_prob_0057_m->module~euler_multiprecision_m module~euler_prob_0013_m euler_prob_0013_m module~euler_prob_0013_m->module~euler_multiprecision_m module~euler_prob_0056_m euler_prob_0056_m module~euler_prob_0056_m->module~euler_multiprecision_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions add sub compare mul pow2 Functions public function add (arr1, arr2) result(ret) The core function to provide the ability of addition. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer,\n  allocatable, dimension(:) public function sub (arr1, arr2) result(ret) The core function to provide the ability of subtraction. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer,\n  allocatable, dimension(:) public function compare (arr1, arr2) result(ret) The core function to provide the ability of comparison. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer public function mul (arr1, arr2) result(ret) The core function to provide the ability of multiplication. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr1 (:) integer, intent(in), contiguous :: arr2 (:) Return Value integer,\n  allocatable, (:) public recursive function pow2 (arr, n) result(ret) The core function to provide the ability of power. Read more… Arguments Type Intent Optional Attributes Name integer, intent(in), contiguous :: arr (:) integer, intent(in) :: n Return Value integer,\n  allocatable, (:)","tags":"","loc":"module/euler_multiprecision_util_m.html"},{"title":"euler_interface_m – PE Fortran","text":"Uses euler_utils_m iso_fortran_env module~~euler_interface_m~~UsesGraph module~euler_interface_m euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: euler_prob_0001_m euler_prob_0002_m euler_prob_0003_m euler_prob_0004_m euler_prob_0005_m euler_prob_0006_m euler_prob_0007_m euler_prob_0008_m euler_prob_0009_m euler_prob_0010_m euler_prob_0011_m euler_prob_0012_m euler_prob_0013_m euler_prob_0014_m euler_prob_0015_m euler_prob_0016_m euler_prob_0017_m euler_prob_0018_m euler_prob_0019_m euler_prob_0020_m euler_prob_0021_m euler_prob_0022_m euler_prob_0023_m euler_prob_0024_m euler_prob_0025_m euler_prob_0026_m euler_prob_0027_m euler_prob_0028_m euler_prob_0029_m euler_prob_0030_m euler_prob_0031_m euler_prob_0032_m euler_prob_0033_m euler_prob_0034_m euler_prob_0035_m euler_prob_0036_m euler_prob_0037_m euler_prob_0038_m euler_prob_0039_m euler_prob_0040_m euler_prob_0041_m euler_prob_0042_m euler_prob_0043_m euler_prob_0044_m euler_prob_0045_m euler_prob_0046_m euler_prob_0047_m euler_prob_0048_m euler_prob_0049_m euler_prob_0050_m euler_prob_0051_m euler_prob_0052_m euler_prob_0053_m euler_prob_0054_m euler_prob_0055_m euler_prob_0056_m euler_prob_0057_m euler_prob_0058_m euler_prob_0059_m euler_prob_0060_m euler_prob_0061_m euler_prob_0062_m euler_prob_0063_m module~~euler_interface_m~~UsedByGraph module~euler_interface_m euler_interface_m module~euler_prob_0002_m euler_prob_0002_m module~euler_prob_0002_m->module~euler_interface_m module~euler_prob_0029_m euler_prob_0029_m module~euler_prob_0029_m->module~euler_interface_m module~euler_prob_0035_m euler_prob_0035_m module~euler_prob_0035_m->module~euler_interface_m module~euler_prob_0052_m euler_prob_0052_m module~euler_prob_0052_m->module~euler_interface_m module~euler_prob_0006_m euler_prob_0006_m module~euler_prob_0006_m->module~euler_interface_m module~euler_prob_0048_m euler_prob_0048_m module~euler_prob_0048_m->module~euler_interface_m module~euler_prob_0017_m euler_prob_0017_m module~euler_prob_0017_m->module~euler_interface_m module~euler_prob_0045_m euler_prob_0045_m module~euler_prob_0045_m->module~euler_interface_m module~euler_prob_0007_m euler_prob_0007_m module~euler_prob_0007_m->module~euler_interface_m module~euler_prob_0060_m euler_prob_0060_m module~euler_prob_0060_m->module~euler_interface_m module~euler_prob_0044_m euler_prob_0044_m module~euler_prob_0044_m->module~euler_interface_m module~euler_prob_0018_m euler_prob_0018_m module~euler_prob_0018_m->module~euler_interface_m module~euler_prob_0032_m euler_prob_0032_m module~euler_prob_0032_m->module~euler_interface_m module~euler_prob_0010_m euler_prob_0010_m module~euler_prob_0010_m->module~euler_interface_m module~euler_prob_0055_m euler_prob_0055_m module~euler_prob_0055_m->module~euler_interface_m module~euler_prob_0015_m euler_prob_0015_m module~euler_prob_0015_m->module~euler_interface_m module~euler_prob_0051_m euler_prob_0051_m module~euler_prob_0051_m->module~euler_interface_m module~euler_prob_0001_m euler_prob_0001_m module~euler_prob_0001_m->module~euler_interface_m module~euler_prob_0040_m euler_prob_0040_m module~euler_prob_0040_m->module~euler_interface_m module~euler_prob_0063_m euler_prob_0063_m module~euler_prob_0063_m->module~euler_interface_m module~euler_prob_0062_m euler_prob_0062_m module~euler_prob_0062_m->module~euler_interface_m module~euler_prob_0054_m euler_prob_0054_m module~euler_prob_0054_m->module~euler_interface_m module~euler_prob_0027_m euler_prob_0027_m module~euler_prob_0027_m->module~euler_interface_m module~euler_prob_0028_m euler_prob_0028_m module~euler_prob_0028_m->module~euler_interface_m module~euler_prob_0005_m euler_prob_0005_m module~euler_prob_0005_m->module~euler_interface_m module~euler_prob_0037_m euler_prob_0037_m module~euler_prob_0037_m->module~euler_interface_m module~euler_prob_0049_m euler_prob_0049_m module~euler_prob_0049_m->module~euler_interface_m module~euler_prob_0046_m euler_prob_0046_m module~euler_prob_0046_m->module~euler_interface_m module~euler_prob_0047_m euler_prob_0047_m module~euler_prob_0047_m->module~euler_interface_m module~euler_prob_0013_m euler_prob_0013_m module~euler_prob_0013_m->module~euler_interface_m module~euler_prob_0038_m euler_prob_0038_m module~euler_prob_0038_m->module~euler_interface_m module~euler_prob_0036_m euler_prob_0036_m module~euler_prob_0036_m->module~euler_interface_m module~euler_prob_0024_m euler_prob_0024_m module~euler_prob_0024_m->module~euler_interface_m module~euler_prob_0033_m euler_prob_0033_m module~euler_prob_0033_m->module~euler_interface_m module~euler_prob_0020_m euler_prob_0020_m module~euler_prob_0020_m->module~euler_interface_m module~euler_prob_0009_m euler_prob_0009_m module~euler_prob_0009_m->module~euler_interface_m module~euler_prob_0057_m euler_prob_0057_m module~euler_prob_0057_m->module~euler_interface_m module~euler_prob_0016_m euler_prob_0016_m module~euler_prob_0016_m->module~euler_interface_m module~euler_prob_0043_m euler_prob_0043_m module~euler_prob_0043_m->module~euler_interface_m module~euler_prob_0050_m euler_prob_0050_m module~euler_prob_0050_m->module~euler_interface_m module~euler_prob_0003_m euler_prob_0003_m module~euler_prob_0003_m->module~euler_interface_m module~euler_prob_0053_m euler_prob_0053_m module~euler_prob_0053_m->module~euler_interface_m module~euler_prob_0011_m euler_prob_0011_m module~euler_prob_0011_m->module~euler_interface_m module~euler_prob_0031_m euler_prob_0031_m module~euler_prob_0031_m->module~euler_interface_m module~euler_prob_0039_m euler_prob_0039_m module~euler_prob_0039_m->module~euler_interface_m module~euler_prob_0025_m euler_prob_0025_m module~euler_prob_0025_m->module~euler_interface_m module~euler_prob_0061_m euler_prob_0061_m module~euler_prob_0061_m->module~euler_interface_m module~euler_prob_0012_m euler_prob_0012_m module~euler_prob_0012_m->module~euler_interface_m module~euler_prob_0034_m euler_prob_0034_m module~euler_prob_0034_m->module~euler_interface_m module~euler_prob_0026_m euler_prob_0026_m module~euler_prob_0026_m->module~euler_interface_m module~euler_prob_0056_m euler_prob_0056_m module~euler_prob_0056_m->module~euler_interface_m module~euler_prob_0014_m euler_prob_0014_m module~euler_prob_0014_m->module~euler_interface_m module~euler_prob_0021_m euler_prob_0021_m module~euler_prob_0021_m->module~euler_interface_m module~euler_prob_0019_m euler_prob_0019_m module~euler_prob_0019_m->module~euler_interface_m module~euler_prob_0059_m euler_prob_0059_m module~euler_prob_0059_m->module~euler_interface_m module~euler_prob_0030_m euler_prob_0030_m module~euler_prob_0030_m->module~euler_interface_m module~euler_prob_0023_m euler_prob_0023_m module~euler_prob_0023_m->module~euler_interface_m module~euler_prob_0008_m euler_prob_0008_m module~euler_prob_0008_m->module~euler_interface_m module~euler_prob_0004_m euler_prob_0004_m module~euler_prob_0004_m->module~euler_interface_m module~euler_prob_0022_m euler_prob_0022_m module~euler_prob_0022_m->module~euler_interface_m module~euler_prob_api_m euler_prob_api_m module~euler_prob_api_m->module~euler_interface_m module~euler_prob_0058_m euler_prob_0058_m module~euler_prob_0058_m->module~euler_interface_m module~euler_prob_0042_m euler_prob_0042_m module~euler_prob_0042_m->module~euler_interface_m module~euler_prob_0041_m euler_prob_0041_m module~euler_prob_0041_m->module~euler_interface_m module~euler_main_m euler_main_m module~euler_main_m->module~euler_prob_api_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces euler0001 euler0002 euler0003 euler0004 euler0005 euler0006 euler0007 euler0008 euler0009 euler0010 euler0011 euler0012 euler0013 euler0014 euler0015 euler0016 euler0017 euler0018 euler0019 euler0020 euler0021 euler0022 euler0023 euler0024 euler0025 euler0026 euler0027 euler0028 euler0029 euler0030 euler0031 euler0032 euler0033 euler0034 euler0035 euler0036 euler0037 euler0038 euler0039 euler0040 euler0041 euler0042 euler0043 euler0044 euler0045 euler0046 euler0047 euler0048 euler0049 euler0050 euler0051 euler0052 euler0053 euler0054 euler0055 euler0056 euler0057 euler0058 euler0059 euler0060 euler0061 euler0062 euler0063 Interfaces interface public module function euler0001() Arguments None Return Value character(len=20) interface public module function euler0002() Arguments None Return Value character(len=20) interface public module function euler0003() Arguments None Return Value character(len=20) interface public module function euler0004() Arguments None Return Value character(len=20) interface public module function euler0005() Arguments None Return Value character(len=20) interface public module function euler0006() Arguments None Return Value character(len=20) interface public module function euler0007() Arguments None Return Value character(len=20) interface public module function euler0008() Arguments None Return Value character(len=20) interface public module function euler0009() Arguments None Return Value character(len=20) interface public module function euler0010() Arguments None Return Value character(len=20) interface public module function euler0011() Arguments None Return Value character(len=20) interface public module function euler0012() Arguments None Return Value character(len=20) interface public module function euler0013() Arguments None Return Value character(len=20) interface public module function euler0014() Arguments None Return Value character(len=20) interface public module function euler0015() Arguments None Return Value character(len=20) interface public module function euler0016() Arguments None Return Value character(len=20) interface public module function euler0017() Arguments None Return Value character(len=20) interface public module function euler0018() Arguments None Return Value character(len=20) interface public module function euler0019() Arguments None Return Value character(len=20) interface public module function euler0020() Arguments None Return Value character(len=20) interface public module function euler0021() Arguments None Return Value character(len=20) interface public module function euler0022() Arguments None Return Value character(len=20) interface public module function euler0023() Arguments None Return Value character(len=20) interface public module function euler0024() Arguments None Return Value character(len=20) interface public module function euler0025() Arguments None Return Value character(len=20) interface public module function euler0026() Arguments None Return Value character(len=20) interface public module function euler0027() Arguments None Return Value character(len=20) interface public module function euler0028() Arguments None Return Value character(len=20) interface public module function euler0029() Arguments None Return Value character(len=20) interface public module function euler0030() Arguments None Return Value character(len=20) interface public module function euler0031() Arguments None Return Value character(len=20) interface public module function euler0032() Arguments None Return Value character(len=20) interface public module function euler0033() Arguments None Return Value character(len=20) interface public module function euler0034() Arguments None Return Value character(len=20) interface public module function euler0035() Arguments None Return Value character(len=20) interface public module function euler0036() Arguments None Return Value character(len=20) interface public module function euler0037() Arguments None Return Value character(len=20) interface public module function euler0038() Arguments None Return Value character(len=20) interface public module function euler0039() Arguments None Return Value character(len=20) interface public module function euler0040() Arguments None Return Value character(len=20) interface public module function euler0041() Arguments None Return Value character(len=20) interface public module function euler0042() Arguments None Return Value character(len=20) interface public module function euler0043() Arguments None Return Value character(len=20) interface public module function euler0044() Arguments None Return Value character(len=20) interface public module function euler0045() Arguments None Return Value character(len=20) interface public module function euler0046() Arguments None Return Value character(len=20) interface public module function euler0047() Arguments None Return Value character(len=20) interface public module function euler0048() Arguments None Return Value character(len=20) interface public module function euler0049() Arguments None Return Value character(len=20) interface public module function euler0050() Arguments None Return Value character(len=20) interface public module function euler0051() Arguments None Return Value character(len=20) interface public module function euler0052() Arguments None Return Value character(len=20) interface public module function euler0053() Arguments None Return Value character(len=20) interface public module function euler0054() Arguments None Return Value character(len=20) interface public module function euler0055() Arguments None Return Value character(len=20) interface public module function euler0056() Arguments None Return Value character(len=20) interface public module function euler0057() Arguments None Return Value character(len=20) interface public module function euler0058() Arguments None Return Value character(len=20) interface public module function euler0059() Arguments None Return Value character(len=20) interface public module function euler0060() Arguments None Return Value character(len=20) interface public module function euler0061() Arguments None Return Value character(len=20) interface public module function euler0062() Arguments None Return Value character(len=20) interface public module function euler0063() Arguments None Return Value character(len=20)","tags":"","loc":"module/euler_interface_m.html"},{"title":"euler_primes_m – PE Fortran","text":"Uses euler_utils_m iso_fortran_env module~~euler_primes_m~~UsesGraph module~euler_primes_m euler_primes_m module~euler_utils_m euler_utils_m module~euler_primes_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_primes_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces is_prime sieve_of_Eratosthenes Interfaces public interface is_prime private function is_prime_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value logical private function is_prime_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value logical public interface sieve_of_Eratosthenes private subroutine sieve_of_Eratosthenes_int32(n, prime_arr) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n logical, allocatable, dimension(:) :: prime_arr private subroutine sieve_of_Eratosthenes_int64(n, prime_arr) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n logical, allocatable, dimension(:) :: prime_arr","tags":"","loc":"module/euler_primes_m.html"},{"title":"euler_utils_m – PE Fortran","text":"Uses iso_fortran_env module~~euler_utils_m~~UsesGraph module~euler_utils_m euler_utils_m iso_fortran_env iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~euler_utils_m~~UsedByGraph module~euler_utils_m euler_utils_m module~euler_primes_m euler_primes_m module~euler_primes_m->module~euler_utils_m module~euler_interface_m euler_interface_m module~euler_interface_m->module~euler_utils_m module~euler_prob_0002_m euler_prob_0002_m module~euler_prob_0002_m->module~euler_interface_m module~euler_prob_0029_m euler_prob_0029_m module~euler_prob_0029_m->module~euler_interface_m module~euler_prob_0035_m euler_prob_0035_m module~euler_prob_0035_m->module~euler_interface_m module~euler_prob_0052_m euler_prob_0052_m module~euler_prob_0052_m->module~euler_interface_m module~euler_prob_0006_m euler_prob_0006_m module~euler_prob_0006_m->module~euler_interface_m module~euler_prob_0048_m euler_prob_0048_m module~euler_prob_0048_m->module~euler_interface_m module~euler_prob_0017_m euler_prob_0017_m module~euler_prob_0017_m->module~euler_interface_m module~euler_prob_0045_m euler_prob_0045_m module~euler_prob_0045_m->module~euler_interface_m module~euler_prob_0007_m euler_prob_0007_m module~euler_prob_0007_m->module~euler_interface_m module~euler_prob_0060_m euler_prob_0060_m module~euler_prob_0060_m->module~euler_interface_m module~euler_prob_0044_m euler_prob_0044_m module~euler_prob_0044_m->module~euler_interface_m module~euler_prob_0018_m euler_prob_0018_m module~euler_prob_0018_m->module~euler_interface_m module~euler_prob_0032_m euler_prob_0032_m module~euler_prob_0032_m->module~euler_interface_m module~euler_prob_0010_m euler_prob_0010_m module~euler_prob_0010_m->module~euler_interface_m module~euler_prob_0055_m euler_prob_0055_m module~euler_prob_0055_m->module~euler_interface_m module~euler_prob_0015_m euler_prob_0015_m module~euler_prob_0015_m->module~euler_interface_m module~euler_prob_0051_m euler_prob_0051_m module~euler_prob_0051_m->module~euler_interface_m module~euler_prob_0001_m euler_prob_0001_m module~euler_prob_0001_m->module~euler_interface_m module~euler_prob_0040_m euler_prob_0040_m module~euler_prob_0040_m->module~euler_interface_m module~euler_prob_0063_m euler_prob_0063_m module~euler_prob_0063_m->module~euler_interface_m module~euler_prob_0062_m euler_prob_0062_m module~euler_prob_0062_m->module~euler_interface_m module~euler_prob_0054_m euler_prob_0054_m module~euler_prob_0054_m->module~euler_interface_m module~euler_prob_0027_m euler_prob_0027_m module~euler_prob_0027_m->module~euler_interface_m module~euler_prob_0028_m euler_prob_0028_m module~euler_prob_0028_m->module~euler_interface_m module~euler_prob_0005_m euler_prob_0005_m module~euler_prob_0005_m->module~euler_interface_m module~euler_prob_0037_m euler_prob_0037_m module~euler_prob_0037_m->module~euler_interface_m module~euler_prob_0049_m euler_prob_0049_m module~euler_prob_0049_m->module~euler_interface_m module~euler_prob_0046_m euler_prob_0046_m module~euler_prob_0046_m->module~euler_interface_m module~euler_prob_0047_m euler_prob_0047_m module~euler_prob_0047_m->module~euler_interface_m module~euler_prob_0013_m euler_prob_0013_m module~euler_prob_0013_m->module~euler_interface_m module~euler_prob_0038_m euler_prob_0038_m module~euler_prob_0038_m->module~euler_interface_m module~euler_prob_0036_m euler_prob_0036_m module~euler_prob_0036_m->module~euler_interface_m module~euler_prob_0024_m euler_prob_0024_m module~euler_prob_0024_m->module~euler_interface_m module~euler_prob_0033_m euler_prob_0033_m module~euler_prob_0033_m->module~euler_interface_m module~euler_prob_0020_m euler_prob_0020_m module~euler_prob_0020_m->module~euler_interface_m module~euler_prob_0009_m euler_prob_0009_m module~euler_prob_0009_m->module~euler_interface_m module~euler_prob_0057_m euler_prob_0057_m module~euler_prob_0057_m->module~euler_interface_m module~euler_prob_0016_m euler_prob_0016_m module~euler_prob_0016_m->module~euler_interface_m module~euler_prob_0043_m euler_prob_0043_m module~euler_prob_0043_m->module~euler_interface_m module~euler_prob_0050_m euler_prob_0050_m module~euler_prob_0050_m->module~euler_interface_m module~euler_prob_0003_m euler_prob_0003_m module~euler_prob_0003_m->module~euler_interface_m module~euler_prob_0053_m euler_prob_0053_m module~euler_prob_0053_m->module~euler_interface_m module~euler_prob_0011_m euler_prob_0011_m module~euler_prob_0011_m->module~euler_interface_m module~euler_prob_0031_m euler_prob_0031_m module~euler_prob_0031_m->module~euler_interface_m module~euler_prob_0039_m euler_prob_0039_m module~euler_prob_0039_m->module~euler_interface_m module~euler_prob_0025_m euler_prob_0025_m module~euler_prob_0025_m->module~euler_interface_m module~euler_prob_0061_m euler_prob_0061_m module~euler_prob_0061_m->module~euler_interface_m module~euler_prob_0012_m euler_prob_0012_m module~euler_prob_0012_m->module~euler_interface_m module~euler_prob_0034_m euler_prob_0034_m module~euler_prob_0034_m->module~euler_interface_m module~euler_prob_0026_m euler_prob_0026_m module~euler_prob_0026_m->module~euler_interface_m module~euler_prob_0056_m euler_prob_0056_m module~euler_prob_0056_m->module~euler_interface_m module~euler_prob_0014_m euler_prob_0014_m module~euler_prob_0014_m->module~euler_interface_m module~euler_prob_0021_m euler_prob_0021_m module~euler_prob_0021_m->module~euler_interface_m module~euler_prob_0019_m euler_prob_0019_m module~euler_prob_0019_m->module~euler_interface_m module~euler_prob_0059_m euler_prob_0059_m module~euler_prob_0059_m->module~euler_interface_m module~euler_prob_0030_m euler_prob_0030_m module~euler_prob_0030_m->module~euler_interface_m module~euler_prob_0023_m euler_prob_0023_m module~euler_prob_0023_m->module~euler_interface_m module~euler_prob_0008_m euler_prob_0008_m module~euler_prob_0008_m->module~euler_interface_m module~euler_prob_0004_m euler_prob_0004_m module~euler_prob_0004_m->module~euler_interface_m module~euler_prob_0022_m euler_prob_0022_m module~euler_prob_0022_m->module~euler_interface_m module~euler_prob_api_m euler_prob_api_m module~euler_prob_api_m->module~euler_interface_m module~euler_prob_0058_m euler_prob_0058_m module~euler_prob_0058_m->module~euler_interface_m module~euler_prob_0042_m euler_prob_0042_m module~euler_prob_0042_m->module~euler_interface_m module~euler_prob_0041_m euler_prob_0041_m module~euler_prob_0041_m->module~euler_interface_m module~euler_main_m euler_main_m module~euler_main_m->module~euler_prob_api_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables sp dp tiny_sp tiny_dp Interfaces unit_digit swap digs_of_int fibonacci reverse is_palindromic gcd lcm factorial is_pandigital int_2_arr arr_2_int append next_permutation Variables Type Visibility Attributes Name Initial integer, public, parameter :: sp = real32 integer, public, parameter :: dp = real64 real(kind=sp), public, parameter :: tiny_sp = tiny(0._sp) real(kind=dp), public, parameter :: tiny_dp = tiny(0._dp) Interfaces public interface unit_digit A generic interface that returns the unit digit of an integer. Read more… private pure function unit_digit_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function unit_digit_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64) public interface swap A generic interface that swap two elements (the two elements\n have to be the same type. When swapping two character types,\n the two character variables must have the same length.). Read more… private pure subroutine swap_sp(a, b) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: a real(kind=sp), intent(inout) :: b private pure subroutine swap_dp(a, b) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: a real(kind=dp), intent(inout) :: b private pure subroutine swap_int32(a, b) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: a integer, intent(inout) :: b private pure subroutine swap_int64(a, b) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: a integer(kind=int64), intent(inout) :: b private pure subroutine swap_equal_len_char(a, b) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: a character(len=len(a)), intent(inout) :: b public interface digs_of_int A generic interface that returns the length of an integer. Read more… private pure function digs_of_int_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function digs_of_int_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64) public interface fibonacci A generic interface that returns the n th fibonacci number. Read more… private pure recursive function fib32(n) result(ans) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure recursive function fib64(n) result(ans) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64) public interface reverse A generic interface that reverse the digits of an integer. Read more… private pure function reverse_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function reverse_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64) public interface is_palindromic A generic interface that tells if an integer is a palindromic integer. Read more… private pure function is_palindromic_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value logical private pure function is_palindromic_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value logical public interface gcd Greatest common divisor. Read more… private pure recursive function gcd_int32(n1, n2) result(ans) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n1 integer, intent(in) :: n2 Return Value integer private pure recursive function gcd_int64(n1, n2) result(ans) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n1 integer(kind=int64), intent(in) :: n2 Return Value integer(kind=int64) public interface lcm Least common multiple. Read more… private pure function lcm_int32(n1, n2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n1 integer, intent(in) :: n2 Return Value integer private pure function lcm_int64(n1, n2) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n1 integer(kind=int64), intent(in) :: n2 Return Value integer(kind=int64) public interface factorial Factorial. Read more… private pure function factorial_int32(n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Return Value integer private pure function factorial_int64(n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n Return Value integer(kind=int64) public interface is_pandigital To judge whether an integer is a pandigital number. Read more… private pure function is_pandigital_int32(n, digs) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(in), optional :: digs Return Value logical private pure function is_pandigital_int64(n, digs) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n integer(kind=int64), intent(in), optional :: digs Return Value logical public interface int_2_arr Convert integer to an integer array. Read more… private pure subroutine int_2_arr_int32(n, arr) Arguments Type Intent Optional Attributes Name integer, intent(in) :: n integer, intent(out), allocatable :: arr (:) private pure subroutine int_2_arr_int64(n, arr) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: n integer, intent(out), allocatable :: arr (:) public interface arr_2_int Convert an integer arr to an integer. Read more… private pure subroutine arr_2_int_int32(arr, n) Arguments Type Intent Optional Attributes Name integer, intent(in) :: arr (:) integer, intent(out) :: n private pure subroutine arr_2_int_int64(arr, n) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: arr (:) integer(kind=int64), intent(out) :: n public interface append Append an element to the end of an array Read more… private pure subroutine append_sp(arr, e) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout), allocatable :: arr (:) real(kind=sp), intent(in) :: e private pure subroutine append_dp(arr, e) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout), allocatable :: arr (:) real(kind=dp), intent(in) :: e private pure subroutine append_int32(arr, e) Arguments Type Intent Optional Attributes Name integer, intent(inout), allocatable :: arr (:) integer, intent(in) :: e private pure subroutine append_int64(arr, e) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), allocatable :: arr (:) integer(kind=int64), intent(in) :: e public interface next_permutation An interface of variant permutation functions Read more… private function next_permutation_int32(k, n, idx) result(ret) Arguments Type Intent Optional Attributes Name integer, intent(in) :: k integer, intent(in) :: n integer, intent(inout) :: idx (k) Return Value logical private function next_permutation_int64(k, n, idx) result(ret) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: k integer(kind=int64), intent(in) :: n integer(kind=int64), intent(inout) :: idx (k) Return Value logical private function next_permutation2_int32(arr) result(ret) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: arr (:) Return Value logical","tags":"","loc":"module/euler_utils_m.html"},{"title":"euler_data_m – PE Fortran","text":"Contents Subroutines get_euler_data_0008 get_euler_data_0011 get_euler_data_0013 get_euler_data_0018 get_euler_data_0022 get_euler_data_0042 get_euler_data_0054 get_euler_data_0059 Subroutines public subroutine get_euler_data_0008 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0011 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0013 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0018 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0022 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0042 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0054 (euler_data) Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: euler_data (:) public subroutine get_euler_data_0059 (euler_data) Arguments Type Intent Optional Attributes Name integer, intent(out), allocatable :: euler_data (:)","tags":"","loc":"module/euler_data_m.html"},{"title":"euler_multiprecision_m – PE Fortran","text":"Uses euler_multiprecision_util_m module~~euler_multiprecision_m~~UsesGraph module~euler_multiprecision_m euler_multiprecision_m module~euler_multiprecision_util_m euler_multiprecision_util_m module~euler_multiprecision_m->module~euler_multiprecision_util_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~euler_multiprecision_m~~UsedByGraph module~euler_multiprecision_m euler_multiprecision_m module~euler_prob_0055_m euler_prob_0055_m module~euler_prob_0055_m->module~euler_multiprecision_m module~euler_prob_0057_m euler_prob_0057_m module~euler_prob_0057_m->module~euler_multiprecision_m module~euler_prob_0013_m euler_prob_0013_m module~euler_prob_0013_m->module~euler_multiprecision_m module~euler_prob_0056_m euler_prob_0056_m module~euler_prob_0056_m->module~euler_multiprecision_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces to_long digits_of Derived Types multiprecision_int_t Interfaces public interface to_long A generic interface that converts an integer or a string\n into a multiple precision integer type. Read more… private function to_long_char(chars) result(ret) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: chars Return Value type( multiprecision_int_t ) private function to_long_int(val) result(ret) Arguments Type Intent Optional Attributes Name integer, intent(in) :: val Return Value type( multiprecision_int_t ) public interface digits_of A generic interface that returns the length(digits) of a multiple\n precision integer, essentially that is Read more… private function digits_of_func(val) result(ret) Arguments Type Intent Optional Attributes Name type( multiprecision_int_t ), intent(in) :: val Return Value integer Derived Types type, public :: multiprecision_int_t Muliple precision integer type for Project Euler Read more… Components Type Visibility Attributes Name Initial integer, public, allocatable :: arr (:) character(len=1), public :: sgn Type-Bound Procedures procedure, public :: re_alloc => re_alloc_sub generic, public :: assignment(=) => init_char_sub, init_int_sub, init_arr_sub generic, public :: operator(==) => eq_func, eq_int_func, eq_char_func generic, public :: operator(>) => gt_func, gt_int_func, gt_char_func generic, public :: operator(<) => lt_func, lt_int_func, lt_char_func generic, public :: operator(>=) => ge_func, ge_int_func, ge_char_func generic, public :: operator(<=) => le_func, le_int_func, le_char_func generic, public :: operator(+) => add_func, add_int_func, add_char_func generic, public :: operator(-) => sub_func, sub_int_func, sub_char_func generic, public :: operator(*) => mul_func, mul_int_func, mul_char_func generic, public :: operator(**) => pow_int_func","tags":"","loc":"module/euler_multiprecision_m.html"},{"title":"euler_main_m – PE Fortran","text":"Uses euler_prob_api_m iso_fortran_env module~~euler_main_m~~UsesGraph module~euler_main_m euler_main_m module~euler_prob_api_m euler_prob_api_m module~euler_main_m->module~euler_prob_api_m iso_fortran_env iso_fortran_env module~euler_main_m->iso_fortran_env module~euler_interface_m euler_interface_m module~euler_prob_api_m->module~euler_interface_m module~euler_interface_m->iso_fortran_env module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines get_arguments Subroutines public subroutine get_arguments () Arguments None","tags":"","loc":"module/euler_main_m.html"},{"title":"euler_var_arr_m – PE Fortran","text":"Used by module~~euler_var_arr_m~~UsedByGraph module~euler_var_arr_m euler_var_arr_m module~euler_prob_0061_m euler_prob_0061_m module~euler_prob_0061_m->module~euler_var_arr_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Derived Types var_arr_t Derived Types type, public :: var_arr_t Components Type Visibility Attributes Name Initial integer, public, allocatable :: arr (:)","tags":"","loc":"module/euler_var_arr_m.html"},{"title":"euler_prob_api_m – PE Fortran","text":"Uses euler_interface_m module~~euler_prob_api_m~~UsesGraph module~euler_prob_api_m euler_prob_api_m module~euler_interface_m euler_interface_m module~euler_prob_api_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~euler_prob_api_m~~UsedByGraph module~euler_prob_api_m euler_prob_api_m module~euler_main_m euler_main_m module~euler_main_m->module~euler_prob_api_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Abstract Interfaces euler_prob_x Derived Types euler_probs_t Subroutines euler_init Abstract Interfaces abstract interface public function euler_prob_x() Arguments None Return Value character(len=20) Derived Types type, public :: euler_probs_t Components Type Visibility Attributes Name Initial procedure( euler_prob_x ), public, nopass, pointer :: answer Subroutines public subroutine euler_init (probs) Arguments Type Intent Optional Attributes Name type( euler_probs_t ), intent(out), allocatable :: probs (:)","tags":"","loc":"module/euler_prob_api_m.html"},{"title":"euler_prob_0025_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0025_m~~UsesGraph module~euler_prob_0025_m euler_prob_0025_m module~euler_interface_m euler_interface_m module~euler_prob_0025_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0025_m.html"},{"title":"euler_prob_0010_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0010_m~~UsesGraph module~euler_prob_0010_m euler_prob_0010_m module~euler_interface_m euler_interface_m module~euler_prob_0010_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0010_m.html"},{"title":"euler_prob_0016_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0016_m~~UsesGraph module~euler_prob_0016_m euler_prob_0016_m module~euler_interface_m euler_interface_m module~euler_prob_0016_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0016_m.html"},{"title":"euler_prob_0052_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0052_m~~UsesGraph module~euler_prob_0052_m euler_prob_0052_m module~euler_interface_m euler_interface_m module~euler_prob_0052_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0052_m.html"},{"title":"euler_prob_0019_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0019_m~~UsesGraph module~euler_prob_0019_m euler_prob_0019_m module~euler_interface_m euler_interface_m module~euler_prob_0019_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0019_m.html"},{"title":"euler_prob_0018_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0018_m~~UsesGraph module~euler_prob_0018_m euler_prob_0018_m module~euler_interface_m euler_interface_m module~euler_prob_0018_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0018_m.html"},{"title":"euler_prob_0032_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0032_m~~UsesGraph module~euler_prob_0032_m euler_prob_0032_m module~euler_interface_m euler_interface_m module~euler_prob_0032_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0032_m.html"},{"title":"euler_prob_0024_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0024_m~~UsesGraph module~euler_prob_0024_m euler_prob_0024_m module~euler_interface_m euler_interface_m module~euler_prob_0024_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0024_m.html"},{"title":"euler_prob_0059_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0059_m~~UsesGraph module~euler_prob_0059_m euler_prob_0059_m module~euler_interface_m euler_interface_m module~euler_prob_0059_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0059_m.html"},{"title":"euler_prob_0006_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0006_m~~UsesGraph module~euler_prob_0006_m euler_prob_0006_m module~euler_interface_m euler_interface_m module~euler_prob_0006_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0006_m.html"},{"title":"euler_prob_0049_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0049_m~~UsesGraph module~euler_prob_0049_m euler_prob_0049_m module~euler_interface_m euler_interface_m module~euler_prob_0049_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0049_m.html"},{"title":"euler_prob_0020_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0020_m~~UsesGraph module~euler_prob_0020_m euler_prob_0020_m module~euler_interface_m euler_interface_m module~euler_prob_0020_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0020_m.html"},{"title":"euler_prob_0029_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0029_m~~UsesGraph module~euler_prob_0029_m euler_prob_0029_m module~euler_interface_m euler_interface_m module~euler_prob_0029_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0029_m.html"},{"title":"euler_prob_0002_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0002_m~~UsesGraph module~euler_prob_0002_m euler_prob_0002_m module~euler_interface_m euler_interface_m module~euler_prob_0002_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0002_m.html"},{"title":"euler_prob_0055_m – PE Fortran","text":"Uses euler_multiprecision_m Ancestors: euler_interface_m module~~euler_prob_0055_m~~UsesGraph module~euler_prob_0055_m euler_prob_0055_m module~euler_multiprecision_m euler_multiprecision_m module~euler_prob_0055_m->module~euler_multiprecision_m module~euler_interface_m euler_interface_m module~euler_prob_0055_m->module~euler_interface_m module~euler_multiprecision_util_m euler_multiprecision_util_m module~euler_multiprecision_m->module~euler_multiprecision_util_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0055_m.html"},{"title":"euler_prob_0001_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0001_m~~UsesGraph module~euler_prob_0001_m euler_prob_0001_m module~euler_interface_m euler_interface_m module~euler_prob_0001_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0001_m.html"},{"title":"euler_prob_0007_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0007_m~~UsesGraph module~euler_prob_0007_m euler_prob_0007_m module~euler_interface_m euler_interface_m module~euler_prob_0007_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0007_m.html"},{"title":"euler_prob_0047_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0047_m~~UsesGraph module~euler_prob_0047_m euler_prob_0047_m module~euler_interface_m euler_interface_m module~euler_prob_0047_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0047_m.html"},{"title":"euler_prob_0054_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0054_m~~UsesGraph module~euler_prob_0054_m euler_prob_0054_m module~euler_interface_m euler_interface_m module~euler_prob_0054_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0054_m.html"},{"title":"euler_prob_0035_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0035_m~~UsesGraph module~euler_prob_0035_m euler_prob_0035_m module~euler_interface_m euler_interface_m module~euler_prob_0035_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0035_m.html"},{"title":"euler_prob_0013_m – PE Fortran","text":"Uses euler_multiprecision_m Ancestors: euler_interface_m module~~euler_prob_0013_m~~UsesGraph module~euler_prob_0013_m euler_prob_0013_m module~euler_multiprecision_m euler_multiprecision_m module~euler_prob_0013_m->module~euler_multiprecision_m module~euler_interface_m euler_interface_m module~euler_prob_0013_m->module~euler_interface_m module~euler_multiprecision_util_m euler_multiprecision_util_m module~euler_multiprecision_m->module~euler_multiprecision_util_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0013_m.html"},{"title":"euler_prob_0061_m – PE Fortran","text":"Uses euler_var_arr_m Ancestors: euler_interface_m module~~euler_prob_0061_m~~UsesGraph module~euler_prob_0061_m euler_prob_0061_m module~euler_var_arr_m euler_var_arr_m module~euler_prob_0061_m->module~euler_var_arr_m module~euler_interface_m euler_interface_m module~euler_prob_0061_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0061_m.html"},{"title":"euler_prob_0009_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0009_m~~UsesGraph module~euler_prob_0009_m euler_prob_0009_m module~euler_interface_m euler_interface_m module~euler_prob_0009_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0009_m.html"},{"title":"euler_prob_0030_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0030_m~~UsesGraph module~euler_prob_0030_m euler_prob_0030_m module~euler_interface_m euler_interface_m module~euler_prob_0030_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0030_m.html"},{"title":"euler_prob_0012_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0012_m~~UsesGraph module~euler_prob_0012_m euler_prob_0012_m module~euler_interface_m euler_interface_m module~euler_prob_0012_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0012_m.html"},{"title":"euler_prob_0021_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0021_m~~UsesGraph module~euler_prob_0021_m euler_prob_0021_m module~euler_interface_m euler_interface_m module~euler_prob_0021_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0021_m.html"},{"title":"euler_prob_0045_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0045_m~~UsesGraph module~euler_prob_0045_m euler_prob_0045_m module~euler_interface_m euler_interface_m module~euler_prob_0045_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0045_m.html"},{"title":"euler_prob_0056_m – PE Fortran","text":"Uses euler_multiprecision_m Ancestors: euler_interface_m module~~euler_prob_0056_m~~UsesGraph module~euler_prob_0056_m euler_prob_0056_m module~euler_multiprecision_m euler_multiprecision_m module~euler_prob_0056_m->module~euler_multiprecision_m module~euler_interface_m euler_interface_m module~euler_prob_0056_m->module~euler_interface_m module~euler_multiprecision_util_m euler_multiprecision_util_m module~euler_multiprecision_m->module~euler_multiprecision_util_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0056_m.html"},{"title":"euler_prob_0004_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0004_m~~UsesGraph module~euler_prob_0004_m euler_prob_0004_m module~euler_interface_m euler_interface_m module~euler_prob_0004_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0004_m.html"},{"title":"euler_prob_0040_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0040_m~~UsesGraph module~euler_prob_0040_m euler_prob_0040_m module~euler_interface_m euler_interface_m module~euler_prob_0040_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0040_m.html"},{"title":"euler_prob_0058_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0058_m~~UsesGraph module~euler_prob_0058_m euler_prob_0058_m module~euler_interface_m euler_interface_m module~euler_prob_0058_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0058_m.html"},{"title":"euler_prob_0033_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0033_m~~UsesGraph module~euler_prob_0033_m euler_prob_0033_m module~euler_interface_m euler_interface_m module~euler_prob_0033_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0033_m.html"},{"title":"euler_prob_0057_m – PE Fortran","text":"Uses euler_multiprecision_m Ancestors: euler_interface_m module~~euler_prob_0057_m~~UsesGraph module~euler_prob_0057_m euler_prob_0057_m module~euler_multiprecision_m euler_multiprecision_m module~euler_prob_0057_m->module~euler_multiprecision_m module~euler_interface_m euler_interface_m module~euler_prob_0057_m->module~euler_interface_m module~euler_multiprecision_util_m euler_multiprecision_util_m module~euler_multiprecision_m->module~euler_multiprecision_util_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0057_m.html"},{"title":"euler_prob_0046_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0046_m~~UsesGraph module~euler_prob_0046_m euler_prob_0046_m module~euler_interface_m euler_interface_m module~euler_prob_0046_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0046_m.html"},{"title":"euler_prob_0043_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0043_m~~UsesGraph module~euler_prob_0043_m euler_prob_0043_m module~euler_interface_m euler_interface_m module~euler_prob_0043_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0043_m.html"},{"title":"euler_prob_0011_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0011_m~~UsesGraph module~euler_prob_0011_m euler_prob_0011_m module~euler_interface_m euler_interface_m module~euler_prob_0011_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0011_m.html"},{"title":"euler_prob_0063_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0063_m~~UsesGraph module~euler_prob_0063_m euler_prob_0063_m module~euler_interface_m euler_interface_m module~euler_prob_0063_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0063_m.html"},{"title":"euler_prob_0005_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0005_m~~UsesGraph module~euler_prob_0005_m euler_prob_0005_m module~euler_interface_m euler_interface_m module~euler_prob_0005_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0005_m.html"},{"title":"euler_prob_0053_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0053_m~~UsesGraph module~euler_prob_0053_m euler_prob_0053_m module~euler_interface_m euler_interface_m module~euler_prob_0053_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0053_m.html"},{"title":"euler_prob_0023_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0023_m~~UsesGraph module~euler_prob_0023_m euler_prob_0023_m module~euler_interface_m euler_interface_m module~euler_prob_0023_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0023_m.html"},{"title":"euler_prob_0027_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0027_m~~UsesGraph module~euler_prob_0027_m euler_prob_0027_m module~euler_interface_m euler_interface_m module~euler_prob_0027_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0027_m.html"},{"title":"euler_prob_0041_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0041_m~~UsesGraph module~euler_prob_0041_m euler_prob_0041_m module~euler_interface_m euler_interface_m module~euler_prob_0041_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0041_m.html"},{"title":"euler_prob_0014_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0014_m~~UsesGraph module~euler_prob_0014_m euler_prob_0014_m module~euler_interface_m euler_interface_m module~euler_prob_0014_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0014_m.html"},{"title":"euler_prob_0037_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0037_m~~UsesGraph module~euler_prob_0037_m euler_prob_0037_m module~euler_interface_m euler_interface_m module~euler_prob_0037_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0037_m.html"},{"title":"euler_prob_0048_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0048_m~~UsesGraph module~euler_prob_0048_m euler_prob_0048_m module~euler_interface_m euler_interface_m module~euler_prob_0048_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0048_m.html"},{"title":"euler_prob_0008_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0008_m~~UsesGraph module~euler_prob_0008_m euler_prob_0008_m module~euler_interface_m euler_interface_m module~euler_prob_0008_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0008_m.html"},{"title":"euler_prob_0050_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0050_m~~UsesGraph module~euler_prob_0050_m euler_prob_0050_m module~euler_interface_m euler_interface_m module~euler_prob_0050_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0050_m.html"},{"title":"euler_prob_0060_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0060_m~~UsesGraph module~euler_prob_0060_m euler_prob_0060_m module~euler_interface_m euler_interface_m module~euler_prob_0060_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0060_m.html"},{"title":"euler_prob_0022_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0022_m~~UsesGraph module~euler_prob_0022_m euler_prob_0022_m module~euler_interface_m euler_interface_m module~euler_prob_0022_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0022_m.html"},{"title":"euler_prob_0039_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0039_m~~UsesGraph module~euler_prob_0039_m euler_prob_0039_m module~euler_interface_m euler_interface_m module~euler_prob_0039_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0039_m.html"},{"title":"euler_prob_0015_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0015_m~~UsesGraph module~euler_prob_0015_m euler_prob_0015_m module~euler_interface_m euler_interface_m module~euler_prob_0015_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0015_m.html"},{"title":"euler_prob_0051_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0051_m~~UsesGraph module~euler_prob_0051_m euler_prob_0051_m module~euler_interface_m euler_interface_m module~euler_prob_0051_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0051_m.html"},{"title":"euler_prob_0028_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0028_m~~UsesGraph module~euler_prob_0028_m euler_prob_0028_m module~euler_interface_m euler_interface_m module~euler_prob_0028_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0028_m.html"},{"title":"euler_prob_0003_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0003_m~~UsesGraph module~euler_prob_0003_m euler_prob_0003_m module~euler_interface_m euler_interface_m module~euler_prob_0003_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0003_m.html"},{"title":"euler_prob_0031_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0031_m~~UsesGraph module~euler_prob_0031_m euler_prob_0031_m module~euler_interface_m euler_interface_m module~euler_prob_0031_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0031_m.html"},{"title":"euler_prob_0017_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0017_m~~UsesGraph module~euler_prob_0017_m euler_prob_0017_m module~euler_interface_m euler_interface_m module~euler_prob_0017_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0017_m.html"},{"title":"euler_prob_0034_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0034_m~~UsesGraph module~euler_prob_0034_m euler_prob_0034_m module~euler_interface_m euler_interface_m module~euler_prob_0034_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0034_m.html"},{"title":"euler_prob_0038_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0038_m~~UsesGraph module~euler_prob_0038_m euler_prob_0038_m module~euler_interface_m euler_interface_m module~euler_prob_0038_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0038_m.html"},{"title":"euler_prob_0036_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0036_m~~UsesGraph module~euler_prob_0036_m euler_prob_0036_m module~euler_interface_m euler_interface_m module~euler_prob_0036_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0036_m.html"},{"title":"euler_prob_0062_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0062_m~~UsesGraph module~euler_prob_0062_m euler_prob_0062_m module~euler_interface_m euler_interface_m module~euler_prob_0062_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0062_m.html"},{"title":"euler_prob_0042_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0042_m~~UsesGraph module~euler_prob_0042_m euler_prob_0042_m module~euler_interface_m euler_interface_m module~euler_prob_0042_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0042_m.html"},{"title":"euler_prob_0044_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0044_m~~UsesGraph module~euler_prob_0044_m euler_prob_0044_m module~euler_interface_m euler_interface_m module~euler_prob_0044_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0044_m.html"},{"title":"euler_prob_0026_m – PE Fortran","text":"Uses Ancestors: euler_interface_m module~~euler_prob_0026_m~~UsesGraph module~euler_prob_0026_m euler_prob_0026_m module~euler_interface_m euler_interface_m module~euler_prob_0026_m->module~euler_interface_m module~euler_utils_m euler_utils_m module~euler_interface_m->module~euler_utils_m iso_fortran_env iso_fortran_env module~euler_interface_m->iso_fortran_env module~euler_utils_m->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/euler_prob_0026_m.html"}]}